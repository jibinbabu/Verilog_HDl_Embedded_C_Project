
tse.elf:     file format elf32-littlenios2
tse.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00080240

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x00006128 memsz 0x00006128 flags r-x
    LOAD off    0x00007148 vaddr 0x00086148 paddr 0x00087c1c align 2**12
         filesz 0x00001ad4 memsz 0x00001ad4 flags rw-
    LOAD off    0x000096f0 vaddr 0x000896f0 paddr 0x000896f0 align 2**12
         filesz 0x00000000 memsz 0x00000564 flags rw-
    LOAD off    0x00009000 vaddr 0x00100000 paddr 0x00089c54 align 2**12
         filesz 0x00000080 memsz 0x00000080 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000220  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005d48  00080240  00080240  00001240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000001c0  00085f88  00085f88  00006f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ad4  00086148  00087c1c  00007148  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000564  000896f0  000896f0  000096f0  2**2
                  ALLOC, SMALL_DATA
  6 .main_memory  00000000  00089c54  00089c54  00009080  2**0
                  CONTENTS
  7 .descriptor_memory 00000080  00100000  00089c54  00009000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .comment      00000023  00000000  00000000  00009080  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000978  00000000  00000000  000090a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000166f8  00000000  00000000  00009a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006021  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006563  00000000  00000000  00026139  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000017dc  00000000  00000000  0002c69c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000028c7  00000000  00000000  0002de78  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00002d54  00000000  00000000  0003073f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00033494  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000001d0  00000000  00000000  000334c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0003612a  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0003612d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00036132  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00036133  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  00036134  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0003613d  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  00036146  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000b  00000000  00000000  0003614f  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000001e  00000000  00000000  0003615a  2**0
                  CONTENTS, READONLY
 27 .jdi          00004537  00000000  00000000  00036178  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0006d1f9  00000000  00000000  0003a6af  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
00080240 l    d  .text	00000000 .text
00085f88 l    d  .rodata	00000000 .rodata
00086148 l    d  .rwdata	00000000 .rwdata
000896f0 l    d  .bss	00000000 .bss
00089c54 l    d  .main_memory	00000000 .main_memory
00100000 l    d  .descriptor_memory	00000000 .descriptor_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../tse_bsp//obj/HAL/src/crt0.o
00080288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 lab3.c
00000000 l    df *ABS*	00000000 alt_load.c
00080720 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00080ae8 l     F .text	00000038 alt_dev_reg
00086148 l     O .rwdata	00001060 jtag_uart
000871a8 l     O .rwdata	00000030 sgdma_rx
000871d8 l     O .rwdata	00000030 sgdma_tx
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00080dec l     F .text	00000204 altera_avalon_jtag_uart_irq
00080ff0 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
00081610 l     F .text	00000050 alt_get_errno
00082224 l     F .text	000000b8 alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
000824c0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00082698 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000826c4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00082c00 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00082d38 l     F .text	00000050 alt_get_errno
00082d88 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
000873b0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00084058 l     F .text	00000008 __fp_lock
00084060 l     F .text	00000008 __fp_unlock
00084074 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000858ec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
000859ec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00085ae0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00085c44 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
00087c18 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00085e40 l     F .text	00000050 alt_get_errno
00089718 g     O .bss	00000004 alt_instruction_exception_handler
000857ac g     F .text	00000054 _isatty_r
00080804 g     F .text	00000078 alt_main
000805bc g     F .text	00000164 rx_ethernet_isr
00089b54 g     O .bss	00000100 alt_irq
00085800 g     F .text	0000005c _lseek_r
00087c1c g       *ABS*	00000000 __flash_rwdata_start
000896f4 g     O .bss	00000004 print
00089c54 g       *ABS*	00000000 __alt_heap_start
00081784 g     F .text	00000110 alt_avalon_sgdma_do_sync_transfer
0008552c g     F .text	0000005c __sseek
000843a8 g     F .text	00000010 __sinit
000838b8 g     F .text	00000154 __swbuf_r
00084214 g     F .text	00000064 __sfmoreglue
00085c24 g     F .text	00000020 __malloc_unlock
00081e70 g     F .text	000003b4 alt_avalon_sgdma_construct_descriptor_burst
00084390 g     F .text	00000018 _cleanup
000896f0 g     O .bss	00000004 in
000831a8 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00080000 g     F .entry	0000001c __reset
000819e0 g     F .text	00000074 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
00080020 g       *ABS*	00000000 __flash_exceptions_start
00085754 g     F .text	00000058 _fstat_r
0008971c g     O .bss	00000004 errno
000854a8 g     F .text	00000008 __seofread
00089704 g     O .bss	00000004 alt_argv
0008fbdc g       *ABS*	00000000 _gp
00087230 g     O .rwdata	00000180 alt_fd_list
00082870 g     F .text	00000090 alt_find_dev
00083580 g     F .text	00000138 memcpy
00084068 g     F .text	0000000c _cleanup_r
00082cc0 g     F .text	00000078 alt_io_redirect
00085f88 g       *ABS*	00000000 __DTOR_END__
0008341c g     F .text	0000009c alt_exception_cause_generated_bad_addr
00081acc g     F .text	00000088 alt_avalon_sgdma_construct_mem_to_stream_desc_burst
000811ec g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00085a3c g     F .text	000000a4 isatty
00083390 g     F .text	0000008c alt_icache_flush
00089728 g     O .bss	00000004 __malloc_top_pad
00081bf8 g     F .text	00000058 alt_avalon_sgdma_stop
00085400 g     F .text	00000054 _sbrk_r
0008585c g     F .text	0000005c _read_r
000825e0 g     F .text	00000074 alt_dcache_flush
00087bf4 g     O .rwdata	00000004 alt_max_fd
00085640 g     F .text	00000100 _fclose_r
00084028 g     F .text	00000030 fflush
00089724 g     O .bss	00000004 __malloc_max_sbrked_mem
00080000 g       *ABS*	00000000 __alt_mem_main_memory
00085b30 g     F .text	000000d4 lseek
00087c08 g     O .rwdata	00000004 _global_impure_ptr
00089c54 g       *ABS*	00000000 __bss_end
00082b10 g     F .text	000000f0 alt_iic_isr_register
00081660 g     F .text	00000124 alt_avalon_sgdma_do_async_transfer
000830a4 g     F .text	00000104 alt_tick
00100060 g     O .descriptor_memory	00000020 rx_descriptor_end
000843c8 g     F .text	00000018 __fp_lock_all
00082ac4 g     F .text	0000004c alt_ic_irq_enabled
0008300c g     F .text	00000098 alt_alarm_stop
00100000 g       *ABS*	00000000 __alt_mem_descriptor_memory
0008970c g     O .bss	00000004 alt_irq_active
000800fc g     F .exceptions	000000d0 alt_irq_handler
00087208 g     O .rwdata	00000028 alt_dev_null
00081c50 g     F .text	00000064 alt_avalon_sgdma_check_descriptor_status
00082654 g     F .text	00000044 alt_dcache_flush_all
00100040 g     O .descriptor_memory	00000020 rx_descriptor
00087c1c g       *ABS*	00000000 __ram_rwdata_end
00087bec g     O .rwdata	00000008 alt_dev_list
00085e90 g     F .text	000000f8 write
00081d90 g     F .text	00000080 alt_avalon_sgdma_enable_desc_poll
000836b8 g     F .text	000000a0 _putc_r
00086148 g       *ABS*	00000000 __ram_rodata_end
0008593c g     F .text	000000b0 fstat
00081a54 g     F .text	00000078 alt_avalon_sgdma_construct_mem_to_stream_desc
00081b54 g     F .text	00000050 alt_avalon_sgdma_register_callback
00089c54 g       *ABS*	00000000 end
00080d28 g     F .text	000000c4 altera_avalon_jtag_uart_init
000801cc g     F .exceptions	00000074 alt_instruction_exception_entry
00085f88 g       *ABS*	00000000 __CTOR_LIST__
000cb000 g       *ABS*	00000000 __alt_stack_pointer
00081e10 g     F .text	00000060 alt_avalon_sgdma_disable_desc_poll
000813f8 g     F .text	00000218 altera_avalon_jtag_uart_write
00081894 g     F .text	00000070 alt_avalon_sgdma_construct_mem_to_mem_desc
000843b8 g     F .text	00000004 __sfp_lock_acquire
00081984 g     F .text	0000005c alt_avalon_sgdma_construct_stream_to_mem_desc
0008451c g     F .text	000002f0 _free_r
0008087c g     F .text	00000228 alt_printf
00083c6c g     F .text	00000194 __call_exitprocs
00087c10 g     O .rwdata	00000004 __malloc_sbrk_base
00080240 g     F .text	0000004c _start
00089710 g     O .bss	00000004 _alt_tick_rate
000896f8 g     O .bss	00000004 sgdma_tx_dev
00081cb4 g     F .text	00000054 alt_avalon_sgdma_open
00089714 g     O .bss	00000004 _alt_nticks
00085c94 g     F .text	000000fc read
00080b54 g     F .text	00000070 alt_sys_init
00083b58 g     F .text	00000114 __register_exitproc
00081098 g     F .text	00000068 altera_avalon_jtag_uart_close
00086148 g       *ABS*	00000000 __ram_rwdata_start
00085f88 g       *ABS*	00000000 __ram_rodata_start
00089b2c g     O .bss	00000028 __malloc_current_mallinfo
00080bc4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000832dc g     F .text	000000b4 alt_get_fd
000855ec g     F .text	00000054 _close_r
00083504 g     F .text	0000007c memcmp
00080c84 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00089c54 g       *ABS*	00000000 __alt_stack_base
00080cd4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00083a28 g     F .text	00000130 __swsetup_r
00084278 g     F .text	00000118 __sfp
000877d4 g     O .rwdata	00000408 __malloc_av_
000843c4 g     F .text	00000004 __sinit_lock_release
00085454 g     F .text	00000054 __sread
000831c8 g     F .text	00000114 alt_find_file
00082714 g     F .text	000000a4 alt_dev_llist_insert
00085c04 g     F .text	00000020 __malloc_lock
00085d90 g     F .text	000000b0 sbrk
00081ba4 g     F .text	00000054 alt_avalon_sgdma_start
00083e00 g     F .text	00000228 _fflush_r
000896f0 g       *ABS*	00000000 __bss_start
000852dc g     F .text	00000124 memset
0008028c g     F .text	00000330 main
00089708 g     O .bss	00000004 alt_envp
00089720 g     O .bss	00000004 __malloc_max_total_mem
00080c24 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00083a0c g     F .text	0000001c __swbuf
00087bdc g     O .rwdata	00000008 alt_sgdma_list
00085588 g     F .text	00000008 __sclose
000cb000 g       *ABS*	00000000 __alt_heap_limit
00085740 g     F .text	00000014 fclose
00084b34 g     F .text	000007a8 _malloc_r
00087bf8 g     O .rwdata	00000004 alt_errno
00100000 g     O .descriptor_memory	00000020 tx_descriptor
0008972c g     O .bss	00000400 rx_frame
0008480c g     F .text	000000b8 _fwalk
00083758 g     F .text	000000c8 putc
000843f8 g     F .text	00000124 _malloc_trim_r
00085f88 g       *ABS*	00000000 __CTOR_END__
00085f88 g       *ABS*	00000000 __flash_rodata_start
00085f88 g       *ABS*	00000000 __DTOR_LIST__
00080b20 g     F .text	00000034 alt_irq_init
00082fac g     F .text	00000060 alt_release_fd
000834b8 g     F .text	00000014 atexit
00085590 g     F .text	0000005c _write_r
00087c0c g     O .rwdata	00000004 _impure_ptr
00089700 g     O .bss	00000004 alt_argc
00082814 g     F .text	0000005c _do_dtors
00080020 g       .exceptions	00000000 alt_irq_entry
000843e0 g     F .text	00000018 __fp_unlock_all
00087be4 g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
00082930 g     F .text	00000050 alt_ic_isr_register
00087c1c g       *ABS*	00000000 _edata
00089c54 g       *ABS*	00000000 _end
00080240 g       *ABS*	00000000 __ram_exceptions_end
00081100 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00082a20 g     F .text	000000a4 alt_ic_irq_disable
00100020 g     O .descriptor_memory	00000020 tx_descriptor_end
00081d08 g     F .text	00000088 alt_avalon_sgdma_construct_descriptor
000854b0 g     F .text	0000007c __swrite
00087c14 g     O .rwdata	00000004 __malloc_trim_threshold
000834cc g     F .text	00000038 exit
000848c4 g     F .text	000000b8 _fwalk_reent
000cb000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
000843bc g     F .text	00000004 __sfp_lock_release
000896fc g     O .bss	00000004 sgdma_rx_dev
000858b8 g     F .text	00000034 _exit
00082380 g     F .text	00000140 alt_alarm_start
0008497c g     F .text	000001b8 __smakebuf_r
00083820 g     F .text	00000098 strlen
00082e54 g     F .text	00000158 open
00080aa4 g     F .text	00000044 alt_putchar
00082900 g     F .text	00000030 alt_icache_flush_all
00087bfc g     O .rwdata	00000004 alt_priority_mask
00082980 g     F .text	000000a0 alt_ic_irq_enable
00081904 g     F .text	00000080 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
00087c00 g     O .rwdata	00000008 alt_alarm_list
000827b8 g     F .text	0000005c _do_ctors
00082510 g     F .text	000000d0 close
00080784 g     F .text	00000080 alt_load
000822dc g     F .text	000000a4 alt_avalon_sgdma_init
00000000  w      *UND*	00000000 free
000843c0 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   80000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   80004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   80008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   8000c:	00bffd16 	blt	zero,r2,80004 <rx_descriptor_end+0xfff7ffa4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80010:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80014:	08409014 	ori	at,at,576
    jmp r1
   80018:	0800683a 	jmp	at
   8001c:	00000000 	call	0 <__reset-0x80000>

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800fc0 	call	800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000706 	br	800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   80094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   80098:	00801cc0 	call	801cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   8009c:	1000021e 	bne	r2,zero,800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800f8:	ef80083a 	eret

000800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800fc:	defff904 	addi	sp,sp,-28
   80100:	dfc00615 	stw	ra,24(sp)
   80104:	df000515 	stw	fp,20(sp)
   80108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   8010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80110:	0005313a 	rdctl	r2,ipending
   80114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80124:	00800044 	movi	r2,1
   80128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8012c:	e0fffb17 	ldw	r3,-20(fp)
   80130:	e0bffc17 	ldw	r2,-16(fp)
   80134:	1884703a 	and	r2,r3,r2
   80138:	10001426 	beq	r2,zero,8018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8013c:	00800274 	movhi	r2,9
   80140:	10a6d504 	addi	r2,r2,-25772
   80144:	e0fffd17 	ldw	r3,-12(fp)
   80148:	180690fa 	slli	r3,r3,3
   8014c:	10c5883a 	add	r2,r2,r3
   80150:	10c00017 	ldw	r3,0(r2)
   80154:	00800274 	movhi	r2,9
   80158:	10a6d504 	addi	r2,r2,-25772
   8015c:	e13ffd17 	ldw	r4,-12(fp)
   80160:	200890fa 	slli	r4,r4,3
   80164:	1105883a 	add	r2,r2,r4
   80168:	10800104 	addi	r2,r2,4
   8016c:	10800017 	ldw	r2,0(r2)
   80170:	1009883a 	mov	r4,r2
   80174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   80178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8017c:	0005313a 	rdctl	r2,ipending
   80180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   80184:	e0bfff17 	ldw	r2,-4(fp)
   80188:	00000706 	br	801a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   8018c:	e0bffc17 	ldw	r2,-16(fp)
   80190:	1085883a 	add	r2,r2,r2
   80194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   80198:	e0bffd17 	ldw	r2,-12(fp)
   8019c:	10800044 	addi	r2,r2,1
   801a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a4:	003fe106 	br	8012c <rx_descriptor_end+0xfff800cc>

    active = alt_irq_pending ();
   801a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   801ac:	e0bffb17 	ldw	r2,-20(fp)
   801b0:	103fdb1e 	bne	r2,zero,80120 <rx_descriptor_end+0xfff800c0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   801b4:	0001883a 	nop
}
   801b8:	e037883a 	mov	sp,fp
   801bc:	dfc00117 	ldw	ra,4(sp)
   801c0:	df000017 	ldw	fp,0(sp)
   801c4:	dec00204 	addi	sp,sp,8
   801c8:	f800283a 	ret

000801cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   801cc:	defffb04 	addi	sp,sp,-20
   801d0:	dfc00415 	stw	ra,16(sp)
   801d4:	df000315 	stw	fp,12(sp)
   801d8:	df000304 	addi	fp,sp,12
   801dc:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   801e0:	000531fa 	rdctl	r2,exception
   801e4:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   801e8:	e0bffd17 	ldw	r2,-12(fp)
   801ec:	10801f0c 	andi	r2,r2,124
   801f0:	1004d0ba 	srli	r2,r2,2
   801f4:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   801f8:	0005333a 	rdctl	r2,badaddr
   801fc:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   80200:	d0a6cf17 	ldw	r2,-25796(gp)
   80204:	10000726 	beq	r2,zero,80224 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   80208:	d0a6cf17 	ldw	r2,-25796(gp)
   8020c:	e0fffd17 	ldw	r3,-12(fp)
   80210:	1809883a 	mov	r4,r3
   80214:	e17fff17 	ldw	r5,-4(fp)
   80218:	e1bffe17 	ldw	r6,-8(fp)
   8021c:	103ee83a 	callr	r2
   80220:	00000206 	br	8022c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   80224:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   80228:	0005883a 	mov	r2,zero
}
   8022c:	e037883a 	mov	sp,fp
   80230:	dfc00117 	ldw	ra,4(sp)
   80234:	df000017 	ldw	fp,0(sp)
   80238:	dec00204 	addi	sp,sp,8
   8023c:	f800283a 	ret

Disassembly of section .text:

00080240 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   80240:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   80244:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   80248:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   8024c:	00bffd16 	blt	zero,r2,80244 <rx_descriptor_end+0xfff801e4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   80250:	06c00334 	movhi	sp,12
    ori sp, sp, %lo(__alt_stack_pointer)
   80254:	deec0014 	ori	sp,sp,45056
    movhi gp, %hi(_gp)
   80258:	06800234 	movhi	gp,8
    ori gp, gp, %lo(_gp)
   8025c:	d6bef714 	ori	gp,gp,64476
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   80260:	00800234 	movhi	r2,8
    ori r2, r2, %lo(__bss_start)
   80264:	10a5bc14 	ori	r2,r2,38640

    movhi r3, %hi(__bss_end)
   80268:	00c00234 	movhi	r3,8
    ori r3, r3, %lo(__bss_end)
   8026c:	18e71514 	ori	r3,r3,40020

    beq r2, r3, 1f
   80270:	10c00326 	beq	r2,r3,80280 <_start+0x40>

0:
    stw zero, (r2)
   80274:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   80278:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   8027c:	10fffd36 	bltu	r2,r3,80274 <rx_descriptor_end+0xfff80214>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   80280:	00807840 	call	80784 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   80284:	00808040 	call	80804 <alt_main>

00080288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   80288:	003fff06 	br	80288 <rx_descriptor_end+0xfff80228>

0008028c <main>:


/********************************************************************************
 * This program demonstrates use of the Ethernet in the DE2i-150 board.
********************************************************************************/
int main(void){
   8028c:	defffc04 	addi	sp,sp,-16
   80290:	dfc00315 	stw	ra,12(sp)
   80294:	df000215 	stw	fp,8(sp)
   80298:	df000204 	addi	fp,sp,8

	// Open the sgdma transmit device
	sgdma_tx_dev = alt_avalon_sgdma_open ("/dev/sgdma_tx");
   8029c:	01000234 	movhi	r4,8
   802a0:	2117e204 	addi	r4,r4,24456
   802a4:	0081cb40 	call	81cb4 <alt_avalon_sgdma_open>
   802a8:	d0a6c715 	stw	r2,-25828(gp)
	if (sgdma_tx_dev == NULL) {
   802ac:	d0a6c717 	ldw	r2,-25828(gp)
   802b0:	1000041e 	bne	r2,zero,802c4 <main+0x38>
		alt_printf ("Error: could not open scatter-gather dma transmit device\n");
   802b4:	01000234 	movhi	r4,8
   802b8:	2117e604 	addi	r4,r4,24472
   802bc:	008087c0 	call	8087c <alt_printf>
   802c0:	00000306 	br	802d0 <main+0x44>
		//return -1;
	} else alt_printf ("Opened scatter-gather dma transmit device\n");
   802c4:	01000234 	movhi	r4,8
   802c8:	2117f504 	addi	r4,r4,24532
   802cc:	008087c0 	call	8087c <alt_printf>

	// Open the sgdma receive device
	sgdma_rx_dev = alt_avalon_sgdma_open ("/dev/sgdma_rx");
   802d0:	01000234 	movhi	r4,8
   802d4:	21180004 	addi	r4,r4,24576
   802d8:	0081cb40 	call	81cb4 <alt_avalon_sgdma_open>
   802dc:	d0a6c815 	stw	r2,-25824(gp)
	if (sgdma_rx_dev == NULL) {
   802e0:	d0a6c817 	ldw	r2,-25824(gp)
   802e4:	1000041e 	bne	r2,zero,802f8 <main+0x6c>
		alt_printf ("Error: could not open scatter-gather dma receive device\n");
   802e8:	01000234 	movhi	r4,8
   802ec:	21180404 	addi	r4,r4,24592
   802f0:	008087c0 	call	8087c <alt_printf>
   802f4:	00000306 	br	80304 <main+0x78>
		//return -1;
	} else alt_printf ("Opened scatter-gather dma receive device\n");
   802f8:	01000234 	movhi	r4,8
   802fc:	21181304 	addi	r4,r4,24652
   80300:	008087c0 	call	8087c <alt_printf>



	// Set interrupts for the sgdma receive device
	alt_avalon_sgdma_register_callback( sgdma_rx_dev, (alt_avalon_sgdma_callback) rx_ethernet_isr, 0x00000014, NULL );
   80304:	d0a6c817 	ldw	r2,-25824(gp)
   80308:	1009883a 	mov	r4,r2
   8030c:	01400234 	movhi	r5,8
   80310:	29416f04 	addi	r5,r5,1468
   80314:	01800504 	movi	r6,20
   80318:	000f883a 	mov	r7,zero
   8031c:	0081b540 	call	81b54 <alt_avalon_sgdma_register_callback>

	// Create sgdma receive descriptor
	alt_avalon_sgdma_construct_stream_to_mem_desc( &rx_descriptor, &rx_descriptor_end, (alt_u32 *)rx_frame, 0, 0 );
   80320:	d8000015 	stw	zero,0(sp)
   80324:	01000434 	movhi	r4,16
   80328:	21001004 	addi	r4,r4,64
   8032c:	01400434 	movhi	r5,16
   80330:	29401804 	addi	r5,r5,96
   80334:	01800274 	movhi	r6,9
   80338:	31a5cb04 	addi	r6,r6,-26836
   8033c:	000f883a 	mov	r7,zero
   80340:	00819840 	call	81984 <alt_avalon_sgdma_construct_stream_to_mem_desc>

	// Set up non-blocking transfer of sgdma receive descriptor
	alt_avalon_sgdma_do_async_transfer( sgdma_rx_dev, &rx_descriptor );
   80344:	d0a6c817 	ldw	r2,-25824(gp)
   80348:	1009883a 	mov	r4,r2
   8034c:	01400434 	movhi	r5,16
   80350:	29401004 	addi	r5,r5,64
   80354:	00816600 	call	81660 <alt_avalon_sgdma_do_async_transfer>



	// Triple-speed Ethernet MegaCore base address
	volatile int * tse = (int *) TSE_BASE;
   80358:	00800434 	movhi	r2,16
   8035c:	10880004 	addi	r2,r2,8192
   80360:	e0bfff15 	stw	r2,-4(fp)

	// Specify the addresses of the PHY devices to be accessed through MDIO interface
	*(tse + 0x0F) = 0x10;
   80364:	e0bfff17 	ldw	r2,-4(fp)
   80368:	10800f04 	addi	r2,r2,60
   8036c:	00c00404 	movi	r3,16
   80370:	10c00015 	stw	r3,0(r2)

	// Disable read and write transfers and wait
	*(tse + 0x02) = *(tse + 0x02) | 0x00800220;
   80374:	e0bfff17 	ldw	r2,-4(fp)
   80378:	10c00204 	addi	r3,r2,8
   8037c:	e0bfff17 	ldw	r2,-4(fp)
   80380:	10800204 	addi	r2,r2,8
   80384:	11000017 	ldw	r4,0(r2)
   80388:	00802034 	movhi	r2,128
   8038c:	10808804 	addi	r2,r2,544
   80390:	2084b03a 	or	r2,r4,r2
   80394:	18800015 	stw	r2,0(r3)
	while ( *(tse + 0x02) != ( *(tse + 0x02) | 0x00800220 ) );
   80398:	0001883a 	nop
   8039c:	e0bfff17 	ldw	r2,-4(fp)
   803a0:	10800204 	addi	r2,r2,8
   803a4:	10c00017 	ldw	r3,0(r2)
   803a8:	e0bfff17 	ldw	r2,-4(fp)
   803ac:	10800204 	addi	r2,r2,8
   803b0:	11000017 	ldw	r4,0(r2)
   803b4:	00802034 	movhi	r2,128
   803b8:	10808804 	addi	r2,r2,544
   803bc:	2084b03a 	or	r2,r4,r2
   803c0:	18bff61e 	bne	r3,r2,8039c <rx_descriptor_end+0xfff8033c>


	//MAC FIFO Configuration
	*(tse + 0x09 ) = TSE_TRANSMIT_FIFO_DEPTH-16;
   803c4:	e0bfff17 	ldw	r2,-4(fp)
   803c8:	10800904 	addi	r2,r2,36
   803cc:	00c1fc04 	movi	r3,2032
   803d0:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0E ) = 3;
   803d4:	e0bfff17 	ldw	r2,-4(fp)
   803d8:	10800e04 	addi	r2,r2,56
   803dc:	00c000c4 	movi	r3,3
   803e0:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0D ) = 8;
   803e4:	e0bfff17 	ldw	r2,-4(fp)
   803e8:	10800d04 	addi	r2,r2,52
   803ec:	00c00204 	movi	r3,8
   803f0:	10c00015 	stw	r3,0(r2)
	*(tse + 0x07 ) =TSE_RECEIVE_FIFO_DEPTH-16;
   803f4:	e0bfff17 	ldw	r2,-4(fp)
   803f8:	10800704 	addi	r2,r2,28
   803fc:	00c1fc04 	movi	r3,2032
   80400:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0C ) = 8;
   80404:	e0bfff17 	ldw	r2,-4(fp)
   80408:	10800c04 	addi	r2,r2,48
   8040c:	00c00204 	movi	r3,8
   80410:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0B ) = 8;
   80414:	e0bfff17 	ldw	r2,-4(fp)
   80418:	10800b04 	addi	r2,r2,44
   8041c:	00c00204 	movi	r3,8
   80420:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0A ) = 0;
   80424:	e0bfff17 	ldw	r2,-4(fp)
   80428:	10800a04 	addi	r2,r2,40
   8042c:	10000015 	stw	zero,0(r2)
	*(tse + 0x08 ) = 0;
   80430:	e0bfff17 	ldw	r2,-4(fp)
   80434:	10800804 	addi	r2,r2,32
   80438:	10000015 	stw	zero,0(r2)

	// Initialize the MAC address
	*(tse + 0x03) = 0x17231C00;
   8043c:	e0bfff17 	ldw	r2,-4(fp)
   80440:	10c00304 	addi	r3,r2,12
   80444:	0085c8f4 	movhi	r2,5923
   80448:	10870004 	addi	r2,r2,7168
   8044c:	18800015 	stw	r2,0(r3)
	*(tse + 0x04) = 0x0000CB4A;
   80450:	e0bfff17 	ldw	r2,-4(fp)
   80454:	10800404 	addi	r2,r2,16
   80458:	00f2d294 	movui	r3,52042
   8045c:	10c00015 	stw	r3,0(r2)

	// MAC function configuration
	*(tse + 0x05) = 1518;
   80460:	e0bfff17 	ldw	r2,-4(fp)
   80464:	10800504 	addi	r2,r2,20
   80468:	00c17b84 	movi	r3,1518
   8046c:	10c00015 	stw	r3,0(r2)
	*(tse + 0x17) = 12;
   80470:	e0bfff17 	ldw	r2,-4(fp)
   80474:	10801704 	addi	r2,r2,92
   80478:	00c00304 	movi	r3,12
   8047c:	10c00015 	stw	r3,0(r2)
	*(tse + 0x06) = 0xFFFF;
   80480:	e0bfff17 	ldw	r2,-4(fp)
   80484:	10800604 	addi	r2,r2,24
   80488:	00ffffd4 	movui	r3,65535
   8048c:	10c00015 	stw	r3,0(r2)
	*(tse + 0x02) = 0x00800220;
   80490:	e0bfff17 	ldw	r2,-4(fp)
   80494:	10c00204 	addi	r3,r2,8
   80498:	00802034 	movhi	r2,128
   8049c:	10808804 	addi	r2,r2,544
   804a0:	18800015 	stw	r2,0(r3)


	// Software reset the PHY chip and wait
	*(tse + 0x02) =  0x00802220;
   804a4:	e0bfff17 	ldw	r2,-4(fp)
   804a8:	10c00204 	addi	r3,r2,8
   804ac:	00802034 	movhi	r2,128
   804b0:	10888804 	addi	r2,r2,8736
   804b4:	18800015 	stw	r2,0(r3)
	while ( *(tse + 0x02) != ( 0x00800220 )  ) alt_printf( "Hi" );
   804b8:	00000306 	br	804c8 <main+0x23c>
   804bc:	01000234 	movhi	r4,8
   804c0:	21181e04 	addi	r4,r4,24696
   804c4:	008087c0 	call	8087c <alt_printf>
   804c8:	e0bfff17 	ldw	r2,-4(fp)
   804cc:	10800204 	addi	r2,r2,8
   804d0:	10c00017 	ldw	r3,0(r2)
   804d4:	00802034 	movhi	r2,128
   804d8:	10808804 	addi	r2,r2,544
   804dc:	18bff71e 	bne	r3,r2,804bc <rx_descriptor_end+0xfff8045c>

	// Enable read and write transfers, gigabit Ethernet operation and promiscuous mode
	
	*(tse + 0x02) = *(tse + 0x02) | 0x0080023B;
   804e0:	e0bfff17 	ldw	r2,-4(fp)
   804e4:	10c00204 	addi	r3,r2,8
   804e8:	e0bfff17 	ldw	r2,-4(fp)
   804ec:	10800204 	addi	r2,r2,8
   804f0:	11000017 	ldw	r4,0(r2)
   804f4:	00802034 	movhi	r2,128
   804f8:	10808ec4 	addi	r2,r2,571
   804fc:	2084b03a 	or	r2,r4,r2
   80500:	18800015 	stw	r2,0(r3)

	while ( *(tse + 0x02) != ( *(tse + 0x02) | 0x0080023B ) ) ;
   80504:	0001883a 	nop
   80508:	e0bfff17 	ldw	r2,-4(fp)
   8050c:	10800204 	addi	r2,r2,8
   80510:	10c00017 	ldw	r3,0(r2)
   80514:	e0bfff17 	ldw	r2,-4(fp)
   80518:	10800204 	addi	r2,r2,8
   8051c:	11000017 	ldw	r4,0(r2)
   80520:	00802034 	movhi	r2,128
   80524:	10808ec4 	addi	r2,r2,571
   80528:	2084b03a 	or	r2,r4,r2
   8052c:	18bff61e 	bne	r3,r2,80508 <rx_descriptor_end+0xfff804a8>


	while (1) {

		print=in;
   80530:	d0a6c517 	ldw	r2,-25836(gp)
   80534:	d0a6c615 	stw	r2,-25832(gp)
		in= IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE); //read the input from the switch
   80538:	00800434 	movhi	r2,16
   8053c:	10892004 	addi	r2,r2,9344
   80540:	10800037 	ldwio	r2,0(r2)
   80544:	d0a6c515 	stw	r2,-25836(gp)
		IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, in); //switch on or switch off the LED
   80548:	d0e6c517 	ldw	r3,-25836(gp)
   8054c:	00800434 	movhi	r2,16
   80550:	10892404 	addi	r2,r2,9360
   80554:	10c00035 	stwio	r3,0(r2)

		if (in==1){
   80558:	d0a6c517 	ldw	r2,-25836(gp)
   8055c:	10800058 	cmpnei	r2,r2,1
   80560:	10000b1e 	bne	r2,zero,80590 <main+0x304>

			if (print != in){
   80564:	d0e6c617 	ldw	r3,-25832(gp)
   80568:	d0a6c517 	ldw	r2,-25836(gp)
   8056c:	18801226 	beq	r3,r2,805b8 <main+0x32c>
				IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x0100);
   80570:	00c04004 	movi	r3,256
   80574:	00800434 	movhi	r2,16
   80578:	10892404 	addi	r2,r2,9360
   8057c:	10c00035 	stwio	r3,0(r2)
				alt_printf( "Switch on LED \n" );		
   80580:	01000234 	movhi	r4,8
   80584:	21181f04 	addi	r4,r4,24700
   80588:	008087c0 	call	8087c <alt_printf>
   8058c:	003fe806 	br	80530 <rx_descriptor_end+0xfff804d0>
			}
		}
		else{
			if (print != in) {
   80590:	d0e6c617 	ldw	r3,-25832(gp)
   80594:	d0a6c517 	ldw	r2,-25836(gp)
   80598:	18800726 	beq	r3,r2,805b8 <main+0x32c>
				IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x0000);
   8059c:	0007883a 	mov	r3,zero
   805a0:	00800434 	movhi	r2,16
   805a4:	10892404 	addi	r2,r2,9360
   805a8:	10c00035 	stwio	r3,0(r2)
				alt_printf( "Switch off LED \n" );
   805ac:	01000234 	movhi	r4,8
   805b0:	21182304 	addi	r4,r4,24716
   805b4:	008087c0 	call	8087c <alt_printf>
			}
		}
	}
   805b8:	003fdd06 	br	80530 <rx_descriptor_end+0xfff804d0>

000805bc <rx_ethernet_isr>:

/****************************************************************************************
 * Subroutine to read incoming Ethernet frames
****************************************************************************************/
void rx_ethernet_isr (void *context)
{
   805bc:	defffa04 	addi	sp,sp,-24
   805c0:	dfc00515 	stw	ra,20(sp)
   805c4:	df000415 	stw	fp,16(sp)
   805c8:	df000404 	addi	fp,sp,16
   805cc:	e13fff15 	stw	r4,-4(fp)

	//Include your code to show the values of the source and destination addresses of the received frame. For example:
	//if(in==1){
		alt_printf( "Source address: %x,%x, %x, %x, %x, %x \n", rx_frame[8], rx_frame[9],rx_frame[10], rx_frame[11], rx_frame[12], rx_frame[13]);
   805d0:	00800274 	movhi	r2,9
   805d4:	10a5cb04 	addi	r2,r2,-26836
   805d8:	10800203 	ldbu	r2,8(r2)
   805dc:	11403fcc 	andi	r5,r2,255
   805e0:	00800274 	movhi	r2,9
   805e4:	10a5cb04 	addi	r2,r2,-26836
   805e8:	10800243 	ldbu	r2,9(r2)
   805ec:	11803fcc 	andi	r6,r2,255
   805f0:	00800274 	movhi	r2,9
   805f4:	10a5cb04 	addi	r2,r2,-26836
   805f8:	10800283 	ldbu	r2,10(r2)
   805fc:	11c03fcc 	andi	r7,r2,255
   80600:	00800274 	movhi	r2,9
   80604:	10a5cb04 	addi	r2,r2,-26836
   80608:	108002c3 	ldbu	r2,11(r2)
   8060c:	11003fcc 	andi	r4,r2,255
   80610:	00800274 	movhi	r2,9
   80614:	10a5cb04 	addi	r2,r2,-26836
   80618:	10800303 	ldbu	r2,12(r2)
   8061c:	10c03fcc 	andi	r3,r2,255
   80620:	00800274 	movhi	r2,9
   80624:	10a5cb04 	addi	r2,r2,-26836
   80628:	10800343 	ldbu	r2,13(r2)
   8062c:	10803fcc 	andi	r2,r2,255
   80630:	d9000015 	stw	r4,0(sp)
   80634:	d8c00115 	stw	r3,4(sp)
   80638:	d8800215 	stw	r2,8(sp)
   8063c:	01000234 	movhi	r4,8
   80640:	21182804 	addi	r4,r4,24736
   80644:	008087c0 	call	8087c <alt_printf>
		alt_printf( "destination address: %x,%x, %x, %x, %x, %x \n", rx_frame[2], rx_frame[3],rx_frame[4], rx_frame[5], rx_frame[6], rx_frame[7]);
   80648:	00800274 	movhi	r2,9
   8064c:	10a5cb04 	addi	r2,r2,-26836
   80650:	10800083 	ldbu	r2,2(r2)
   80654:	11403fcc 	andi	r5,r2,255
   80658:	00800274 	movhi	r2,9
   8065c:	10a5cb04 	addi	r2,r2,-26836
   80660:	108000c3 	ldbu	r2,3(r2)
   80664:	11803fcc 	andi	r6,r2,255
   80668:	00800274 	movhi	r2,9
   8066c:	10a5cb04 	addi	r2,r2,-26836
   80670:	10800103 	ldbu	r2,4(r2)
   80674:	11c03fcc 	andi	r7,r2,255
   80678:	00800274 	movhi	r2,9
   8067c:	10a5cb04 	addi	r2,r2,-26836
   80680:	10800143 	ldbu	r2,5(r2)
   80684:	11003fcc 	andi	r4,r2,255
   80688:	00800274 	movhi	r2,9
   8068c:	10a5cb04 	addi	r2,r2,-26836
   80690:	10800183 	ldbu	r2,6(r2)
   80694:	10c03fcc 	andi	r3,r2,255
   80698:	00800274 	movhi	r2,9
   8069c:	10a5cb04 	addi	r2,r2,-26836
   806a0:	108001c3 	ldbu	r2,7(r2)
   806a4:	10803fcc 	andi	r2,r2,255
   806a8:	d9000015 	stw	r4,0(sp)
   806ac:	d8c00115 	stw	r3,4(sp)
   806b0:	d8800215 	stw	r2,8(sp)
   806b4:	01000234 	movhi	r4,8
   806b8:	21183204 	addi	r4,r4,24776
   806bc:	008087c0 	call	8087c <alt_printf>
	//}



	// Wait until receive descriptor transfer is complete
	while (alt_avalon_sgdma_check_descriptor_status(&rx_descriptor) != 0)
   806c0:	0001883a 	nop
   806c4:	01000434 	movhi	r4,16
   806c8:	21001004 	addi	r4,r4,64
   806cc:	0081c500 	call	81c50 <alt_avalon_sgdma_check_descriptor_status>
   806d0:	103ffc1e 	bne	r2,zero,806c4 <rx_descriptor_end+0xfff80664>
		;

	// Create new receive sgdma descriptor
	alt_avalon_sgdma_construct_stream_to_mem_desc( &rx_descriptor, &rx_descriptor_end, (alt_u32 *)rx_frame, 0, 0 );
   806d4:	d8000015 	stw	zero,0(sp)
   806d8:	01000434 	movhi	r4,16
   806dc:	21001004 	addi	r4,r4,64
   806e0:	01400434 	movhi	r5,16
   806e4:	29401804 	addi	r5,r5,96
   806e8:	01800274 	movhi	r6,9
   806ec:	31a5cb04 	addi	r6,r6,-26836
   806f0:	000f883a 	mov	r7,zero
   806f4:	00819840 	call	81984 <alt_avalon_sgdma_construct_stream_to_mem_desc>

	// Set up non-blocking transfer of sgdma receive descriptor
	alt_avalon_sgdma_do_async_transfer( sgdma_rx_dev, &rx_descriptor );
   806f8:	d0a6c817 	ldw	r2,-25824(gp)
   806fc:	1009883a 	mov	r4,r2
   80700:	01400434 	movhi	r5,16
   80704:	29401004 	addi	r5,r5,64
   80708:	00816600 	call	81660 <alt_avalon_sgdma_do_async_transfer>
}
   8070c:	e037883a 	mov	sp,fp
   80710:	dfc00117 	ldw	ra,4(sp)
   80714:	df000017 	ldw	fp,0(sp)
   80718:	dec00204 	addi	sp,sp,8
   8071c:	f800283a 	ret

00080720 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   80720:	defffc04 	addi	sp,sp,-16
   80724:	df000315 	stw	fp,12(sp)
   80728:	df000304 	addi	fp,sp,12
   8072c:	e13ffd15 	stw	r4,-12(fp)
   80730:	e17ffe15 	stw	r5,-8(fp)
   80734:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   80738:	e0fffe17 	ldw	r3,-8(fp)
   8073c:	e0bffd17 	ldw	r2,-12(fp)
   80740:	18800c26 	beq	r3,r2,80774 <alt_load_section+0x54>
  {
    while( to != end )
   80744:	00000806 	br	80768 <alt_load_section+0x48>
    {
      *to++ = *from++;
   80748:	e0bffe17 	ldw	r2,-8(fp)
   8074c:	10c00104 	addi	r3,r2,4
   80750:	e0fffe15 	stw	r3,-8(fp)
   80754:	e0fffd17 	ldw	r3,-12(fp)
   80758:	19000104 	addi	r4,r3,4
   8075c:	e13ffd15 	stw	r4,-12(fp)
   80760:	18c00017 	ldw	r3,0(r3)
   80764:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   80768:	e0fffe17 	ldw	r3,-8(fp)
   8076c:	e0bfff17 	ldw	r2,-4(fp)
   80770:	18bff51e 	bne	r3,r2,80748 <rx_descriptor_end+0xfff806e8>
    {
      *to++ = *from++;
    }
  }
}
   80774:	e037883a 	mov	sp,fp
   80778:	df000017 	ldw	fp,0(sp)
   8077c:	dec00104 	addi	sp,sp,4
   80780:	f800283a 	ret

00080784 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   80784:	defffe04 	addi	sp,sp,-8
   80788:	dfc00115 	stw	ra,4(sp)
   8078c:	df000015 	stw	fp,0(sp)
   80790:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   80794:	01000234 	movhi	r4,8
   80798:	211f0704 	addi	r4,r4,31772
   8079c:	01400234 	movhi	r5,8
   807a0:	29585204 	addi	r5,r5,24904
   807a4:	01800234 	movhi	r6,8
   807a8:	319f0704 	addi	r6,r6,31772
   807ac:	00807200 	call	80720 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   807b0:	01000234 	movhi	r4,8
   807b4:	21000804 	addi	r4,r4,32
   807b8:	01400234 	movhi	r5,8
   807bc:	29400804 	addi	r5,r5,32
   807c0:	01800234 	movhi	r6,8
   807c4:	31809004 	addi	r6,r6,576
   807c8:	00807200 	call	80720 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   807cc:	01000234 	movhi	r4,8
   807d0:	2117e204 	addi	r4,r4,24456
   807d4:	01400234 	movhi	r5,8
   807d8:	2957e204 	addi	r5,r5,24456
   807dc:	01800234 	movhi	r6,8
   807e0:	31985204 	addi	r6,r6,24904
   807e4:	00807200 	call	80720 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   807e8:	00826540 	call	82654 <alt_dcache_flush_all>
  alt_icache_flush_all();
   807ec:	00829000 	call	82900 <alt_icache_flush_all>
}
   807f0:	e037883a 	mov	sp,fp
   807f4:	dfc00117 	ldw	ra,4(sp)
   807f8:	df000017 	ldw	fp,0(sp)
   807fc:	dec00204 	addi	sp,sp,8
   80800:	f800283a 	ret

00080804 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   80804:	defffd04 	addi	sp,sp,-12
   80808:	dfc00215 	stw	ra,8(sp)
   8080c:	df000115 	stw	fp,4(sp)
   80810:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   80814:	0009883a 	mov	r4,zero
   80818:	0080b200 	call	80b20 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   8081c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   80820:	0080b540 	call	80b54 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   80824:	01000234 	movhi	r4,8
   80828:	21183e04 	addi	r4,r4,24824
   8082c:	01400234 	movhi	r5,8
   80830:	29583e04 	addi	r5,r5,24824
   80834:	01800234 	movhi	r6,8
   80838:	31983e04 	addi	r6,r6,24824
   8083c:	0082cc00 	call	82cc0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   80840:	00827b80 	call	827b8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   80844:	01000234 	movhi	r4,8
   80848:	210a0504 	addi	r4,r4,10260
   8084c:	00834b80 	call	834b8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   80850:	d126c917 	ldw	r4,-25820(gp)
   80854:	d0e6ca17 	ldw	r3,-25816(gp)
   80858:	d0a6cb17 	ldw	r2,-25812(gp)
   8085c:	180b883a 	mov	r5,r3
   80860:	100d883a 	mov	r6,r2
   80864:	008028c0 	call	8028c <main>
   80868:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   8086c:	01000044 	movi	r4,1
   80870:	00825100 	call	82510 <close>
  exit (result);
   80874:	e13fff17 	ldw	r4,-4(fp)
   80878:	00834cc0 	call	834cc <exit>

0008087c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   8087c:	defff204 	addi	sp,sp,-56
   80880:	dfc00a15 	stw	ra,40(sp)
   80884:	df000915 	stw	fp,36(sp)
   80888:	df000904 	addi	fp,sp,36
   8088c:	e1400215 	stw	r5,8(fp)
   80890:	e1800315 	stw	r6,12(fp)
   80894:	e1c00415 	stw	r7,16(fp)
   80898:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
   8089c:	e0800204 	addi	r2,fp,8
   808a0:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   808a4:	e0bfff17 	ldw	r2,-4(fp)
   808a8:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   808ac:	00007106 	br	80a74 <alt_printf+0x1f8>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   808b0:	e0bff807 	ldb	r2,-32(fp)
   808b4:	10800960 	cmpeqi	r2,r2,37
   808b8:	1000041e 	bne	r2,zero,808cc <alt_printf+0x50>
        {
            alt_putchar(c);
   808bc:	e0bff807 	ldb	r2,-32(fp)
   808c0:	1009883a 	mov	r4,r2
   808c4:	0080aa40 	call	80aa4 <alt_putchar>
   808c8:	00006a06 	br	80a74 <alt_printf+0x1f8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   808cc:	e0bff717 	ldw	r2,-36(fp)
   808d0:	10c00044 	addi	r3,r2,1
   808d4:	e0fff715 	stw	r3,-36(fp)
   808d8:	10800003 	ldbu	r2,0(r2)
   808dc:	e0bff805 	stb	r2,-32(fp)
   808e0:	e0bff807 	ldb	r2,-32(fp)
   808e4:	10006226 	beq	r2,zero,80a70 <alt_printf+0x1f4>
            {
                if (c == '%')
   808e8:	e0bff807 	ldb	r2,-32(fp)
   808ec:	10800958 	cmpnei	r2,r2,37
   808f0:	1000041e 	bne	r2,zero,80904 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   808f4:	e0bff807 	ldb	r2,-32(fp)
   808f8:	1009883a 	mov	r4,r2
   808fc:	0080aa40 	call	80aa4 <alt_putchar>
   80900:	00005c06 	br	80a74 <alt_printf+0x1f8>
                } 
                else if (c == 'c')
   80904:	e0bff807 	ldb	r2,-32(fp)
   80908:	108018d8 	cmpnei	r2,r2,99
   8090c:	1000081e 	bne	r2,zero,80930 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   80910:	e0bffe17 	ldw	r2,-8(fp)
   80914:	10c00104 	addi	r3,r2,4
   80918:	e0fffe15 	stw	r3,-8(fp)
   8091c:	10800017 	ldw	r2,0(r2)
   80920:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   80924:	e13ffd17 	ldw	r4,-12(fp)
   80928:	0080aa40 	call	80aa4 <alt_putchar>
   8092c:	00005106 	br	80a74 <alt_printf+0x1f8>
                }
                else if (c == 'x')
   80930:	e0bff807 	ldb	r2,-32(fp)
   80934:	10801e18 	cmpnei	r2,r2,120
   80938:	1000341e 	bne	r2,zero,80a0c <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   8093c:	e0bffe17 	ldw	r2,-8(fp)
   80940:	10c00104 	addi	r3,r2,4
   80944:	e0fffe15 	stw	r3,-8(fp)
   80948:	10800017 	ldw	r2,0(r2)
   8094c:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   80950:	e0bffb17 	ldw	r2,-20(fp)
   80954:	1000031e 	bne	r2,zero,80964 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   80958:	01000c04 	movi	r4,48
   8095c:	0080aa40 	call	80aa4 <alt_putchar>
                        continue;
   80960:	00004406 	br	80a74 <alt_printf+0x1f8>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   80964:	00800704 	movi	r2,28
   80968:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   8096c:	00000306 	br	8097c <alt_printf+0x100>
                        digit_shift -= 4;
   80970:	e0bff917 	ldw	r2,-28(fp)
   80974:	10bfff04 	addi	r2,r2,-4
   80978:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   8097c:	00c003c4 	movi	r3,15
   80980:	e0bff917 	ldw	r2,-28(fp)
   80984:	1884983a 	sll	r2,r3,r2
   80988:	1007883a 	mov	r3,r2
   8098c:	e0bffb17 	ldw	r2,-20(fp)
   80990:	1884703a 	and	r2,r3,r2
   80994:	103ff626 	beq	r2,zero,80970 <rx_descriptor_end+0xfff80910>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   80998:	00001906 	br	80a00 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   8099c:	00c003c4 	movi	r3,15
   809a0:	e0bff917 	ldw	r2,-28(fp)
   809a4:	1884983a 	sll	r2,r3,r2
   809a8:	1007883a 	mov	r3,r2
   809ac:	e0bffb17 	ldw	r2,-20(fp)
   809b0:	1886703a 	and	r3,r3,r2
   809b4:	e0bff917 	ldw	r2,-28(fp)
   809b8:	1884d83a 	srl	r2,r3,r2
   809bc:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   809c0:	e0bffc17 	ldw	r2,-16(fp)
   809c4:	108002a8 	cmpgeui	r2,r2,10
   809c8:	1000041e 	bne	r2,zero,809dc <alt_printf+0x160>
                            c = '0' + digit;
   809cc:	e0bffc17 	ldw	r2,-16(fp)
   809d0:	10800c04 	addi	r2,r2,48
   809d4:	e0bff805 	stb	r2,-32(fp)
   809d8:	00000306 	br	809e8 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   809dc:	e0bffc17 	ldw	r2,-16(fp)
   809e0:	108015c4 	addi	r2,r2,87
   809e4:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   809e8:	e0bff807 	ldb	r2,-32(fp)
   809ec:	1009883a 	mov	r4,r2
   809f0:	0080aa40 	call	80aa4 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   809f4:	e0bff917 	ldw	r2,-28(fp)
   809f8:	10bfff04 	addi	r2,r2,-4
   809fc:	e0bff915 	stw	r2,-28(fp)
   80a00:	e0bff917 	ldw	r2,-28(fp)
   80a04:	103fe50e 	bge	r2,zero,8099c <rx_descriptor_end+0xfff8093c>
   80a08:	00001a06 	br	80a74 <alt_printf+0x1f8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   80a0c:	e0bff807 	ldb	r2,-32(fp)
   80a10:	10801cd8 	cmpnei	r2,r2,115
   80a14:	1000151e 	bne	r2,zero,80a6c <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   80a18:	e0bffe17 	ldw	r2,-8(fp)
   80a1c:	10c00104 	addi	r3,r2,4
   80a20:	e0fffe15 	stw	r3,-8(fp)
   80a24:	10800017 	ldw	r2,0(r2)
   80a28:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   80a2c:	00000906 	br	80a54 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   80a30:	e0bffa17 	ldw	r2,-24(fp)
   80a34:	10c00044 	addi	r3,r2,1
   80a38:	e0fffa15 	stw	r3,-24(fp)
   80a3c:	10800003 	ldbu	r2,0(r2)
   80a40:	10803fcc 	andi	r2,r2,255
   80a44:	1080201c 	xori	r2,r2,128
   80a48:	10bfe004 	addi	r2,r2,-128
   80a4c:	1009883a 	mov	r4,r2
   80a50:	0080aa40 	call	80aa4 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   80a54:	e0bffa17 	ldw	r2,-24(fp)
   80a58:	10800003 	ldbu	r2,0(r2)
   80a5c:	10803fcc 	andi	r2,r2,255
   80a60:	1080201c 	xori	r2,r2,128
   80a64:	10bfe004 	addi	r2,r2,-128
   80a68:	103ff11e 	bne	r2,zero,80a30 <rx_descriptor_end+0xfff809d0>
   80a6c:	00000106 	br	80a74 <alt_printf+0x1f8>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   80a70:	00000706 	br	80a90 <alt_printf+0x214>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   80a74:	e0bff717 	ldw	r2,-36(fp)
   80a78:	10c00044 	addi	r3,r2,1
   80a7c:	e0fff715 	stw	r3,-36(fp)
   80a80:	10800003 	ldbu	r2,0(r2)
   80a84:	e0bff805 	stb	r2,-32(fp)
   80a88:	e0bff807 	ldb	r2,-32(fp)
   80a8c:	103f881e 	bne	r2,zero,808b0 <rx_descriptor_end+0xfff80850>
            {
                break;
            }
        }
    }
}
   80a90:	e037883a 	mov	sp,fp
   80a94:	dfc00117 	ldw	ra,4(sp)
   80a98:	df000017 	ldw	fp,0(sp)
   80a9c:	dec00504 	addi	sp,sp,20
   80aa0:	f800283a 	ret

00080aa4 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   80aa4:	defffd04 	addi	sp,sp,-12
   80aa8:	dfc00215 	stw	ra,8(sp)
   80aac:	df000115 	stw	fp,4(sp)
   80ab0:	df000104 	addi	fp,sp,4
   80ab4:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   80ab8:	00800234 	movhi	r2,8
   80abc:	109f0304 	addi	r2,r2,31756
   80ac0:	10800017 	ldw	r2,0(r2)
   80ac4:	10800217 	ldw	r2,8(r2)
   80ac8:	e13fff17 	ldw	r4,-4(fp)
   80acc:	100b883a 	mov	r5,r2
   80ad0:	00837580 	call	83758 <putc>
#endif
}
   80ad4:	e037883a 	mov	sp,fp
   80ad8:	dfc00117 	ldw	ra,4(sp)
   80adc:	df000017 	ldw	fp,0(sp)
   80ae0:	dec00204 	addi	sp,sp,8
   80ae4:	f800283a 	ret

00080ae8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   80ae8:	defffd04 	addi	sp,sp,-12
   80aec:	dfc00215 	stw	ra,8(sp)
   80af0:	df000115 	stw	fp,4(sp)
   80af4:	df000104 	addi	fp,sp,4
   80af8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   80afc:	e13fff17 	ldw	r4,-4(fp)
   80b00:	01400234 	movhi	r5,8
   80b04:	295efb04 	addi	r5,r5,31724
   80b08:	00827140 	call	82714 <alt_dev_llist_insert>
}
   80b0c:	e037883a 	mov	sp,fp
   80b10:	dfc00117 	ldw	ra,4(sp)
   80b14:	df000017 	ldw	fp,0(sp)
   80b18:	dec00204 	addi	sp,sp,8
   80b1c:	f800283a 	ret

00080b20 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   80b20:	defffd04 	addi	sp,sp,-12
   80b24:	dfc00215 	stw	ra,8(sp)
   80b28:	df000115 	stw	fp,4(sp)
   80b2c:	df000104 	addi	fp,sp,4
   80b30:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
   80b34:	00831a80 	call	831a8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   80b38:	00800044 	movi	r2,1
   80b3c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   80b40:	e037883a 	mov	sp,fp
   80b44:	dfc00117 	ldw	ra,4(sp)
   80b48:	df000017 	ldw	fp,0(sp)
   80b4c:	dec00204 	addi	sp,sp,8
   80b50:	f800283a 	ret

00080b54 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   80b54:	defffe04 	addi	sp,sp,-8
   80b58:	dfc00115 	stw	ra,4(sp)
   80b5c:	df000015 	stw	fp,0(sp)
   80b60:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   80b64:	01000234 	movhi	r4,8
   80b68:	21185c04 	addi	r4,r4,24944
   80b6c:	000b883a 	mov	r5,zero
   80b70:	000d883a 	mov	r6,zero
   80b74:	0080d280 	call	80d28 <altera_avalon_jtag_uart_init>
   80b78:	01000234 	movhi	r4,8
   80b7c:	21185204 	addi	r4,r4,24904
   80b80:	0080ae80 	call	80ae8 <alt_dev_reg>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX, sgdma_rx);
   80b84:	01000234 	movhi	r4,8
   80b88:	211c6a04 	addi	r4,r4,29096
   80b8c:	000b883a 	mov	r5,zero
   80b90:	01800044 	movi	r6,1
   80b94:	00822dc0 	call	822dc <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TX, sgdma_tx);
   80b98:	01000234 	movhi	r4,8
   80b9c:	211c7604 	addi	r4,r4,29144
   80ba0:	000b883a 	mov	r5,zero
   80ba4:	01800084 	movi	r6,2
   80ba8:	00822dc0 	call	822dc <alt_avalon_sgdma_init>
    ALTERA_ETH_TSE_INIT ( TSE, tse);
   80bac:	0001883a 	nop
}
   80bb0:	e037883a 	mov	sp,fp
   80bb4:	dfc00117 	ldw	ra,4(sp)
   80bb8:	df000017 	ldw	fp,0(sp)
   80bbc:	dec00204 	addi	sp,sp,8
   80bc0:	f800283a 	ret

00080bc4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   80bc4:	defffa04 	addi	sp,sp,-24
   80bc8:	dfc00515 	stw	ra,20(sp)
   80bcc:	df000415 	stw	fp,16(sp)
   80bd0:	df000404 	addi	fp,sp,16
   80bd4:	e13ffd15 	stw	r4,-12(fp)
   80bd8:	e17ffe15 	stw	r5,-8(fp)
   80bdc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   80be0:	e0bffd17 	ldw	r2,-12(fp)
   80be4:	10800017 	ldw	r2,0(r2)
   80be8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   80bec:	e0bffc17 	ldw	r2,-16(fp)
   80bf0:	10c00a04 	addi	r3,r2,40
   80bf4:	e0bffd17 	ldw	r2,-12(fp)
   80bf8:	10800217 	ldw	r2,8(r2)
   80bfc:	1809883a 	mov	r4,r3
   80c00:	e17ffe17 	ldw	r5,-8(fp)
   80c04:	e1bfff17 	ldw	r6,-4(fp)
   80c08:	100f883a 	mov	r7,r2
   80c0c:	00811ec0 	call	811ec <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   80c10:	e037883a 	mov	sp,fp
   80c14:	dfc00117 	ldw	ra,4(sp)
   80c18:	df000017 	ldw	fp,0(sp)
   80c1c:	dec00204 	addi	sp,sp,8
   80c20:	f800283a 	ret

00080c24 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   80c24:	defffa04 	addi	sp,sp,-24
   80c28:	dfc00515 	stw	ra,20(sp)
   80c2c:	df000415 	stw	fp,16(sp)
   80c30:	df000404 	addi	fp,sp,16
   80c34:	e13ffd15 	stw	r4,-12(fp)
   80c38:	e17ffe15 	stw	r5,-8(fp)
   80c3c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   80c40:	e0bffd17 	ldw	r2,-12(fp)
   80c44:	10800017 	ldw	r2,0(r2)
   80c48:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   80c4c:	e0bffc17 	ldw	r2,-16(fp)
   80c50:	10c00a04 	addi	r3,r2,40
   80c54:	e0bffd17 	ldw	r2,-12(fp)
   80c58:	10800217 	ldw	r2,8(r2)
   80c5c:	1809883a 	mov	r4,r3
   80c60:	e17ffe17 	ldw	r5,-8(fp)
   80c64:	e1bfff17 	ldw	r6,-4(fp)
   80c68:	100f883a 	mov	r7,r2
   80c6c:	00813f80 	call	813f8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   80c70:	e037883a 	mov	sp,fp
   80c74:	dfc00117 	ldw	ra,4(sp)
   80c78:	df000017 	ldw	fp,0(sp)
   80c7c:	dec00204 	addi	sp,sp,8
   80c80:	f800283a 	ret

00080c84 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   80c84:	defffc04 	addi	sp,sp,-16
   80c88:	dfc00315 	stw	ra,12(sp)
   80c8c:	df000215 	stw	fp,8(sp)
   80c90:	df000204 	addi	fp,sp,8
   80c94:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   80c98:	e0bfff17 	ldw	r2,-4(fp)
   80c9c:	10800017 	ldw	r2,0(r2)
   80ca0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   80ca4:	e0bffe17 	ldw	r2,-8(fp)
   80ca8:	10c00a04 	addi	r3,r2,40
   80cac:	e0bfff17 	ldw	r2,-4(fp)
   80cb0:	10800217 	ldw	r2,8(r2)
   80cb4:	1809883a 	mov	r4,r3
   80cb8:	100b883a 	mov	r5,r2
   80cbc:	00810980 	call	81098 <altera_avalon_jtag_uart_close>
}
   80cc0:	e037883a 	mov	sp,fp
   80cc4:	dfc00117 	ldw	ra,4(sp)
   80cc8:	df000017 	ldw	fp,0(sp)
   80ccc:	dec00204 	addi	sp,sp,8
   80cd0:	f800283a 	ret

00080cd4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   80cd4:	defffa04 	addi	sp,sp,-24
   80cd8:	dfc00515 	stw	ra,20(sp)
   80cdc:	df000415 	stw	fp,16(sp)
   80ce0:	df000404 	addi	fp,sp,16
   80ce4:	e13ffd15 	stw	r4,-12(fp)
   80ce8:	e17ffe15 	stw	r5,-8(fp)
   80cec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   80cf0:	e0bffd17 	ldw	r2,-12(fp)
   80cf4:	10800017 	ldw	r2,0(r2)
   80cf8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   80cfc:	e0bffc17 	ldw	r2,-16(fp)
   80d00:	10800a04 	addi	r2,r2,40
   80d04:	1009883a 	mov	r4,r2
   80d08:	e17ffe17 	ldw	r5,-8(fp)
   80d0c:	e1bfff17 	ldw	r6,-4(fp)
   80d10:	00811000 	call	81100 <altera_avalon_jtag_uart_ioctl>
}
   80d14:	e037883a 	mov	sp,fp
   80d18:	dfc00117 	ldw	ra,4(sp)
   80d1c:	df000017 	ldw	fp,0(sp)
   80d20:	dec00204 	addi	sp,sp,8
   80d24:	f800283a 	ret

00080d28 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   80d28:	defffa04 	addi	sp,sp,-24
   80d2c:	dfc00515 	stw	ra,20(sp)
   80d30:	df000415 	stw	fp,16(sp)
   80d34:	df000404 	addi	fp,sp,16
   80d38:	e13ffd15 	stw	r4,-12(fp)
   80d3c:	e17ffe15 	stw	r5,-8(fp)
   80d40:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   80d44:	e0bffd17 	ldw	r2,-12(fp)
   80d48:	00c00044 	movi	r3,1
   80d4c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   80d50:	e0bffd17 	ldw	r2,-12(fp)
   80d54:	10800017 	ldw	r2,0(r2)
   80d58:	10800104 	addi	r2,r2,4
   80d5c:	1007883a 	mov	r3,r2
   80d60:	e0bffd17 	ldw	r2,-12(fp)
   80d64:	10800817 	ldw	r2,32(r2)
   80d68:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   80d6c:	e0fffe17 	ldw	r3,-8(fp)
   80d70:	e0bfff17 	ldw	r2,-4(fp)
   80d74:	d8000015 	stw	zero,0(sp)
   80d78:	1809883a 	mov	r4,r3
   80d7c:	100b883a 	mov	r5,r2
   80d80:	01800234 	movhi	r6,8
   80d84:	31837b04 	addi	r6,r6,3564
   80d88:	e1fffd17 	ldw	r7,-12(fp)
   80d8c:	00829300 	call	82930 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   80d90:	e0bffd17 	ldw	r2,-12(fp)
   80d94:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   80d98:	e0bffd17 	ldw	r2,-12(fp)
   80d9c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   80da0:	00800274 	movhi	r2,9
   80da4:	10a5c404 	addi	r2,r2,-26864
   80da8:	10800017 	ldw	r2,0(r2)
   80dac:	1809883a 	mov	r4,r3
   80db0:	100b883a 	mov	r5,r2
   80db4:	01800234 	movhi	r6,8
   80db8:	3183fc04 	addi	r6,r6,4080
   80dbc:	e1fffd17 	ldw	r7,-12(fp)
   80dc0:	00823800 	call	82380 <alt_alarm_start>
   80dc4:	1000040e 	bge	r2,zero,80dd8 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   80dc8:	e0fffd17 	ldw	r3,-12(fp)
   80dcc:	00a00034 	movhi	r2,32768
   80dd0:	10bfffc4 	addi	r2,r2,-1
   80dd4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   80dd8:	e037883a 	mov	sp,fp
   80ddc:	dfc00117 	ldw	ra,4(sp)
   80de0:	df000017 	ldw	fp,0(sp)
   80de4:	dec00204 	addi	sp,sp,8
   80de8:	f800283a 	ret

00080dec <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   80dec:	defff804 	addi	sp,sp,-32
   80df0:	df000715 	stw	fp,28(sp)
   80df4:	df000704 	addi	fp,sp,28
   80df8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   80dfc:	e0bfff17 	ldw	r2,-4(fp)
   80e00:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   80e04:	e0bffb17 	ldw	r2,-20(fp)
   80e08:	10800017 	ldw	r2,0(r2)
   80e0c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   80e10:	e0bffc17 	ldw	r2,-16(fp)
   80e14:	10800104 	addi	r2,r2,4
   80e18:	10800037 	ldwio	r2,0(r2)
   80e1c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   80e20:	e0bffd17 	ldw	r2,-12(fp)
   80e24:	1080c00c 	andi	r2,r2,768
   80e28:	1000011e 	bne	r2,zero,80e30 <altera_avalon_jtag_uart_irq+0x44>
      break;
   80e2c:	00006c06 	br	80fe0 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   80e30:	e0bffd17 	ldw	r2,-12(fp)
   80e34:	1080400c 	andi	r2,r2,256
   80e38:	10003426 	beq	r2,zero,80f0c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   80e3c:	00800074 	movhi	r2,1
   80e40:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80e44:	e0bffb17 	ldw	r2,-20(fp)
   80e48:	10800a17 	ldw	r2,40(r2)
   80e4c:	10800044 	addi	r2,r2,1
   80e50:	1081ffcc 	andi	r2,r2,2047
   80e54:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   80e58:	e0bffb17 	ldw	r2,-20(fp)
   80e5c:	10c00b17 	ldw	r3,44(r2)
   80e60:	e0bffe17 	ldw	r2,-8(fp)
   80e64:	1880011e 	bne	r3,r2,80e6c <altera_avalon_jtag_uart_irq+0x80>
          break;
   80e68:	00001606 	br	80ec4 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   80e6c:	e0bffc17 	ldw	r2,-16(fp)
   80e70:	10800037 	ldwio	r2,0(r2)
   80e74:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   80e78:	e0bff917 	ldw	r2,-28(fp)
   80e7c:	10a0000c 	andi	r2,r2,32768
   80e80:	1000011e 	bne	r2,zero,80e88 <altera_avalon_jtag_uart_irq+0x9c>
          break;
   80e84:	00000f06 	br	80ec4 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   80e88:	e0bffb17 	ldw	r2,-20(fp)
   80e8c:	10800a17 	ldw	r2,40(r2)
   80e90:	e0fff917 	ldw	r3,-28(fp)
   80e94:	1809883a 	mov	r4,r3
   80e98:	e0fffb17 	ldw	r3,-20(fp)
   80e9c:	1885883a 	add	r2,r3,r2
   80ea0:	10800e04 	addi	r2,r2,56
   80ea4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80ea8:	e0bffb17 	ldw	r2,-20(fp)
   80eac:	10800a17 	ldw	r2,40(r2)
   80eb0:	10800044 	addi	r2,r2,1
   80eb4:	10c1ffcc 	andi	r3,r2,2047
   80eb8:	e0bffb17 	ldw	r2,-20(fp)
   80ebc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   80ec0:	003fe006 	br	80e44 <rx_descriptor_end+0xfff80de4>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   80ec4:	e0bff917 	ldw	r2,-28(fp)
   80ec8:	10bfffec 	andhi	r2,r2,65535
   80ecc:	10000f26 	beq	r2,zero,80f0c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   80ed0:	e0bffb17 	ldw	r2,-20(fp)
   80ed4:	10c00817 	ldw	r3,32(r2)
   80ed8:	00bfff84 	movi	r2,-2
   80edc:	1886703a 	and	r3,r3,r2
   80ee0:	e0bffb17 	ldw	r2,-20(fp)
   80ee4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   80ee8:	e0bffc17 	ldw	r2,-16(fp)
   80eec:	10800104 	addi	r2,r2,4
   80ef0:	1007883a 	mov	r3,r2
   80ef4:	e0bffb17 	ldw	r2,-20(fp)
   80ef8:	10800817 	ldw	r2,32(r2)
   80efc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   80f00:	e0bffc17 	ldw	r2,-16(fp)
   80f04:	10800104 	addi	r2,r2,4
   80f08:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   80f0c:	e0bffd17 	ldw	r2,-12(fp)
   80f10:	1080800c 	andi	r2,r2,512
   80f14:	10003126 	beq	r2,zero,80fdc <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   80f18:	e0bffd17 	ldw	r2,-12(fp)
   80f1c:	1004d43a 	srli	r2,r2,16
   80f20:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   80f24:	00001406 	br	80f78 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   80f28:	e0bffc17 	ldw	r2,-16(fp)
   80f2c:	e0fffb17 	ldw	r3,-20(fp)
   80f30:	18c00d17 	ldw	r3,52(r3)
   80f34:	e13ffb17 	ldw	r4,-20(fp)
   80f38:	20c7883a 	add	r3,r4,r3
   80f3c:	18c20e04 	addi	r3,r3,2104
   80f40:	18c00003 	ldbu	r3,0(r3)
   80f44:	18c03fcc 	andi	r3,r3,255
   80f48:	18c0201c 	xori	r3,r3,128
   80f4c:	18ffe004 	addi	r3,r3,-128
   80f50:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80f54:	e0bffb17 	ldw	r2,-20(fp)
   80f58:	10800d17 	ldw	r2,52(r2)
   80f5c:	10800044 	addi	r2,r2,1
   80f60:	10c1ffcc 	andi	r3,r2,2047
   80f64:	e0bffb17 	ldw	r2,-20(fp)
   80f68:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   80f6c:	e0bffa17 	ldw	r2,-24(fp)
   80f70:	10bfffc4 	addi	r2,r2,-1
   80f74:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   80f78:	e0bffa17 	ldw	r2,-24(fp)
   80f7c:	10000526 	beq	r2,zero,80f94 <altera_avalon_jtag_uart_irq+0x1a8>
   80f80:	e0bffb17 	ldw	r2,-20(fp)
   80f84:	10c00d17 	ldw	r3,52(r2)
   80f88:	e0bffb17 	ldw	r2,-20(fp)
   80f8c:	10800c17 	ldw	r2,48(r2)
   80f90:	18bfe51e 	bne	r3,r2,80f28 <rx_descriptor_end+0xfff80ec8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   80f94:	e0bffa17 	ldw	r2,-24(fp)
   80f98:	10001026 	beq	r2,zero,80fdc <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   80f9c:	e0bffb17 	ldw	r2,-20(fp)
   80fa0:	10c00817 	ldw	r3,32(r2)
   80fa4:	00bfff44 	movi	r2,-3
   80fa8:	1886703a 	and	r3,r3,r2
   80fac:	e0bffb17 	ldw	r2,-20(fp)
   80fb0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   80fb4:	e0bffb17 	ldw	r2,-20(fp)
   80fb8:	10800017 	ldw	r2,0(r2)
   80fbc:	10800104 	addi	r2,r2,4
   80fc0:	1007883a 	mov	r3,r2
   80fc4:	e0bffb17 	ldw	r2,-20(fp)
   80fc8:	10800817 	ldw	r2,32(r2)
   80fcc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   80fd0:	e0bffc17 	ldw	r2,-16(fp)
   80fd4:	10800104 	addi	r2,r2,4
   80fd8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   80fdc:	003f8c06 	br	80e10 <rx_descriptor_end+0xfff80db0>
}
   80fe0:	e037883a 	mov	sp,fp
   80fe4:	df000017 	ldw	fp,0(sp)
   80fe8:	dec00104 	addi	sp,sp,4
   80fec:	f800283a 	ret

00080ff0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   80ff0:	defff804 	addi	sp,sp,-32
   80ff4:	df000715 	stw	fp,28(sp)
   80ff8:	df000704 	addi	fp,sp,28
   80ffc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   81000:	e0bffb17 	ldw	r2,-20(fp)
   81004:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   81008:	e0bff917 	ldw	r2,-28(fp)
   8100c:	10800017 	ldw	r2,0(r2)
   81010:	10800104 	addi	r2,r2,4
   81014:	10800037 	ldwio	r2,0(r2)
   81018:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   8101c:	e0bffa17 	ldw	r2,-24(fp)
   81020:	1081000c 	andi	r2,r2,1024
   81024:	10000b26 	beq	r2,zero,81054 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   81028:	e0bff917 	ldw	r2,-28(fp)
   8102c:	10800017 	ldw	r2,0(r2)
   81030:	10800104 	addi	r2,r2,4
   81034:	1007883a 	mov	r3,r2
   81038:	e0bff917 	ldw	r2,-28(fp)
   8103c:	10800817 	ldw	r2,32(r2)
   81040:	10810014 	ori	r2,r2,1024
   81044:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   81048:	e0bff917 	ldw	r2,-28(fp)
   8104c:	10000915 	stw	zero,36(r2)
   81050:	00000a06 	br	8107c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   81054:	e0bff917 	ldw	r2,-28(fp)
   81058:	10c00917 	ldw	r3,36(r2)
   8105c:	00a00034 	movhi	r2,32768
   81060:	10bfff04 	addi	r2,r2,-4
   81064:	10c00536 	bltu	r2,r3,8107c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   81068:	e0bff917 	ldw	r2,-28(fp)
   8106c:	10800917 	ldw	r2,36(r2)
   81070:	10c00044 	addi	r3,r2,1
   81074:	e0bff917 	ldw	r2,-28(fp)
   81078:	10c00915 	stw	r3,36(r2)
   8107c:	00800274 	movhi	r2,9
   81080:	10a5c404 	addi	r2,r2,-26864
   81084:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   81088:	e037883a 	mov	sp,fp
   8108c:	df000017 	ldw	fp,0(sp)
   81090:	dec00104 	addi	sp,sp,4
   81094:	f800283a 	ret

00081098 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   81098:	defffd04 	addi	sp,sp,-12
   8109c:	df000215 	stw	fp,8(sp)
   810a0:	df000204 	addi	fp,sp,8
   810a4:	e13ffe15 	stw	r4,-8(fp)
   810a8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   810ac:	00000506 	br	810c4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   810b0:	e0bfff17 	ldw	r2,-4(fp)
   810b4:	1090000c 	andi	r2,r2,16384
   810b8:	10000226 	beq	r2,zero,810c4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   810bc:	00bffd44 	movi	r2,-11
   810c0:	00000b06 	br	810f0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   810c4:	e0bffe17 	ldw	r2,-8(fp)
   810c8:	10c00d17 	ldw	r3,52(r2)
   810cc:	e0bffe17 	ldw	r2,-8(fp)
   810d0:	10800c17 	ldw	r2,48(r2)
   810d4:	18800526 	beq	r3,r2,810ec <altera_avalon_jtag_uart_close+0x54>
   810d8:	e0bffe17 	ldw	r2,-8(fp)
   810dc:	10c00917 	ldw	r3,36(r2)
   810e0:	e0bffe17 	ldw	r2,-8(fp)
   810e4:	10800117 	ldw	r2,4(r2)
   810e8:	18bff136 	bltu	r3,r2,810b0 <rx_descriptor_end+0xfff81050>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   810ec:	0005883a 	mov	r2,zero
}
   810f0:	e037883a 	mov	sp,fp
   810f4:	df000017 	ldw	fp,0(sp)
   810f8:	dec00104 	addi	sp,sp,4
   810fc:	f800283a 	ret

00081100 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   81100:	defffa04 	addi	sp,sp,-24
   81104:	df000515 	stw	fp,20(sp)
   81108:	df000504 	addi	fp,sp,20
   8110c:	e13ffd15 	stw	r4,-12(fp)
   81110:	e17ffe15 	stw	r5,-8(fp)
   81114:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   81118:	00bff9c4 	movi	r2,-25
   8111c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   81120:	e0bffe17 	ldw	r2,-8(fp)
   81124:	10da8060 	cmpeqi	r3,r2,27137
   81128:	1800031e 	bne	r3,zero,81138 <altera_avalon_jtag_uart_ioctl+0x38>
   8112c:	109a80a0 	cmpeqi	r2,r2,27138
   81130:	1000191e 	bne	r2,zero,81198 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   81134:	00002806 	br	811d8 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   81138:	e0bffd17 	ldw	r2,-12(fp)
   8113c:	10c00117 	ldw	r3,4(r2)
   81140:	00a00034 	movhi	r2,32768
   81144:	10bfffc4 	addi	r2,r2,-1
   81148:	18801226 	beq	r3,r2,81194 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   8114c:	e0bfff17 	ldw	r2,-4(fp)
   81150:	10800017 	ldw	r2,0(r2)
   81154:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   81158:	e0bffc17 	ldw	r2,-16(fp)
   8115c:	10800090 	cmplti	r2,r2,2
   81160:	1000061e 	bne	r2,zero,8117c <altera_avalon_jtag_uart_ioctl+0x7c>
   81164:	e0fffc17 	ldw	r3,-16(fp)
   81168:	00a00034 	movhi	r2,32768
   8116c:	10bfffc4 	addi	r2,r2,-1
   81170:	18800226 	beq	r3,r2,8117c <altera_avalon_jtag_uart_ioctl+0x7c>
   81174:	e0bffc17 	ldw	r2,-16(fp)
   81178:	00000206 	br	81184 <altera_avalon_jtag_uart_ioctl+0x84>
   8117c:	00a00034 	movhi	r2,32768
   81180:	10bfff84 	addi	r2,r2,-2
   81184:	e0fffd17 	ldw	r3,-12(fp)
   81188:	18800115 	stw	r2,4(r3)
      rc = 0;
   8118c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   81190:	00001106 	br	811d8 <altera_avalon_jtag_uart_ioctl+0xd8>
   81194:	00001006 	br	811d8 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   81198:	e0bffd17 	ldw	r2,-12(fp)
   8119c:	10c00117 	ldw	r3,4(r2)
   811a0:	00a00034 	movhi	r2,32768
   811a4:	10bfffc4 	addi	r2,r2,-1
   811a8:	18800a26 	beq	r3,r2,811d4 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   811ac:	e0bffd17 	ldw	r2,-12(fp)
   811b0:	10c00917 	ldw	r3,36(r2)
   811b4:	e0bffd17 	ldw	r2,-12(fp)
   811b8:	10800117 	ldw	r2,4(r2)
   811bc:	1885803a 	cmpltu	r2,r3,r2
   811c0:	10c03fcc 	andi	r3,r2,255
   811c4:	e0bfff17 	ldw	r2,-4(fp)
   811c8:	10c00015 	stw	r3,0(r2)
      rc = 0;
   811cc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   811d0:	00000006 	br	811d4 <altera_avalon_jtag_uart_ioctl+0xd4>
   811d4:	0001883a 	nop

  default:
    break;
  }

  return rc;
   811d8:	e0bffb17 	ldw	r2,-20(fp)
}
   811dc:	e037883a 	mov	sp,fp
   811e0:	df000017 	ldw	fp,0(sp)
   811e4:	dec00104 	addi	sp,sp,4
   811e8:	f800283a 	ret

000811ec <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   811ec:	defff304 	addi	sp,sp,-52
   811f0:	dfc00c15 	stw	ra,48(sp)
   811f4:	df000b15 	stw	fp,44(sp)
   811f8:	df000b04 	addi	fp,sp,44
   811fc:	e13ffc15 	stw	r4,-16(fp)
   81200:	e17ffd15 	stw	r5,-12(fp)
   81204:	e1bffe15 	stw	r6,-8(fp)
   81208:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   8120c:	e0bffd17 	ldw	r2,-12(fp)
   81210:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   81214:	00004906 	br	8133c <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   81218:	e0bffc17 	ldw	r2,-16(fp)
   8121c:	10800a17 	ldw	r2,40(r2)
   81220:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   81224:	e0bffc17 	ldw	r2,-16(fp)
   81228:	10800b17 	ldw	r2,44(r2)
   8122c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   81230:	e0fff717 	ldw	r3,-36(fp)
   81234:	e0bff817 	ldw	r2,-32(fp)
   81238:	18800536 	bltu	r3,r2,81250 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   8123c:	e0fff717 	ldw	r3,-36(fp)
   81240:	e0bff817 	ldw	r2,-32(fp)
   81244:	1885c83a 	sub	r2,r3,r2
   81248:	e0bff615 	stw	r2,-40(fp)
   8124c:	00000406 	br	81260 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   81250:	00c20004 	movi	r3,2048
   81254:	e0bff817 	ldw	r2,-32(fp)
   81258:	1885c83a 	sub	r2,r3,r2
   8125c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   81260:	e0bff617 	ldw	r2,-40(fp)
   81264:	1000011e 	bne	r2,zero,8126c <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   81268:	00001d06 	br	812e0 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   8126c:	e0fffe17 	ldw	r3,-8(fp)
   81270:	e0bff617 	ldw	r2,-40(fp)
   81274:	1880022e 	bgeu	r3,r2,81280 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   81278:	e0bffe17 	ldw	r2,-8(fp)
   8127c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   81280:	e0bff817 	ldw	r2,-32(fp)
   81284:	10800e04 	addi	r2,r2,56
   81288:	e0fffc17 	ldw	r3,-16(fp)
   8128c:	1885883a 	add	r2,r3,r2
   81290:	e13ff517 	ldw	r4,-44(fp)
   81294:	100b883a 	mov	r5,r2
   81298:	e1bff617 	ldw	r6,-40(fp)
   8129c:	00835800 	call	83580 <memcpy>
      ptr   += n;
   812a0:	e0fff517 	ldw	r3,-44(fp)
   812a4:	e0bff617 	ldw	r2,-40(fp)
   812a8:	1885883a 	add	r2,r3,r2
   812ac:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   812b0:	e0fffe17 	ldw	r3,-8(fp)
   812b4:	e0bff617 	ldw	r2,-40(fp)
   812b8:	1885c83a 	sub	r2,r3,r2
   812bc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   812c0:	e0fff817 	ldw	r3,-32(fp)
   812c4:	e0bff617 	ldw	r2,-40(fp)
   812c8:	1885883a 	add	r2,r3,r2
   812cc:	10c1ffcc 	andi	r3,r2,2047
   812d0:	e0bffc17 	ldw	r2,-16(fp)
   812d4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   812d8:	e0bffe17 	ldw	r2,-8(fp)
   812dc:	00bfce16 	blt	zero,r2,81218 <rx_descriptor_end+0xfff811b8>

    /* If we read any data then return it */
    if (ptr != buffer)
   812e0:	e0fff517 	ldw	r3,-44(fp)
   812e4:	e0bffd17 	ldw	r2,-12(fp)
   812e8:	18800126 	beq	r3,r2,812f0 <altera_avalon_jtag_uart_read+0x104>
      break;
   812ec:	00001506 	br	81344 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   812f0:	e0bfff17 	ldw	r2,-4(fp)
   812f4:	1090000c 	andi	r2,r2,16384
   812f8:	10000126 	beq	r2,zero,81300 <altera_avalon_jtag_uart_read+0x114>
      break;
   812fc:	00001106 	br	81344 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   81300:	0001883a 	nop
   81304:	e0bffc17 	ldw	r2,-16(fp)
   81308:	10c00a17 	ldw	r3,40(r2)
   8130c:	e0bff717 	ldw	r2,-36(fp)
   81310:	1880051e 	bne	r3,r2,81328 <altera_avalon_jtag_uart_read+0x13c>
   81314:	e0bffc17 	ldw	r2,-16(fp)
   81318:	10c00917 	ldw	r3,36(r2)
   8131c:	e0bffc17 	ldw	r2,-16(fp)
   81320:	10800117 	ldw	r2,4(r2)
   81324:	18bff736 	bltu	r3,r2,81304 <rx_descriptor_end+0xfff812a4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   81328:	e0bffc17 	ldw	r2,-16(fp)
   8132c:	10c00a17 	ldw	r3,40(r2)
   81330:	e0bff717 	ldw	r2,-36(fp)
   81334:	1880011e 	bne	r3,r2,8133c <altera_avalon_jtag_uart_read+0x150>
      break;
   81338:	00000206 	br	81344 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8133c:	e0bffe17 	ldw	r2,-8(fp)
   81340:	00bfb516 	blt	zero,r2,81218 <rx_descriptor_end+0xfff811b8>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   81344:	e0fff517 	ldw	r3,-44(fp)
   81348:	e0bffd17 	ldw	r2,-12(fp)
   8134c:	18801826 	beq	r3,r2,813b0 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81350:	0005303a 	rdctl	r2,status
   81354:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81358:	e0fffa17 	ldw	r3,-24(fp)
   8135c:	00bfff84 	movi	r2,-2
   81360:	1884703a 	and	r2,r3,r2
   81364:	1001703a 	wrctl	status,r2
  
  return context;
   81368:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   8136c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   81370:	e0bffc17 	ldw	r2,-16(fp)
   81374:	10800817 	ldw	r2,32(r2)
   81378:	10c00054 	ori	r3,r2,1
   8137c:	e0bffc17 	ldw	r2,-16(fp)
   81380:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   81384:	e0bffc17 	ldw	r2,-16(fp)
   81388:	10800017 	ldw	r2,0(r2)
   8138c:	10800104 	addi	r2,r2,4
   81390:	1007883a 	mov	r3,r2
   81394:	e0bffc17 	ldw	r2,-16(fp)
   81398:	10800817 	ldw	r2,32(r2)
   8139c:	18800035 	stwio	r2,0(r3)
   813a0:	e0bff917 	ldw	r2,-28(fp)
   813a4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   813a8:	e0bffb17 	ldw	r2,-20(fp)
   813ac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   813b0:	e0fff517 	ldw	r3,-44(fp)
   813b4:	e0bffd17 	ldw	r2,-12(fp)
   813b8:	18800426 	beq	r3,r2,813cc <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   813bc:	e0fff517 	ldw	r3,-44(fp)
   813c0:	e0bffd17 	ldw	r2,-12(fp)
   813c4:	1885c83a 	sub	r2,r3,r2
   813c8:	00000606 	br	813e4 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   813cc:	e0bfff17 	ldw	r2,-4(fp)
   813d0:	1090000c 	andi	r2,r2,16384
   813d4:	10000226 	beq	r2,zero,813e0 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   813d8:	00bffd44 	movi	r2,-11
   813dc:	00000106 	br	813e4 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   813e0:	00bffec4 	movi	r2,-5
}
   813e4:	e037883a 	mov	sp,fp
   813e8:	dfc00117 	ldw	ra,4(sp)
   813ec:	df000017 	ldw	fp,0(sp)
   813f0:	dec00204 	addi	sp,sp,8
   813f4:	f800283a 	ret

000813f8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   813f8:	defff304 	addi	sp,sp,-52
   813fc:	dfc00c15 	stw	ra,48(sp)
   81400:	df000b15 	stw	fp,44(sp)
   81404:	df000b04 	addi	fp,sp,44
   81408:	e13ffc15 	stw	r4,-16(fp)
   8140c:	e17ffd15 	stw	r5,-12(fp)
   81410:	e1bffe15 	stw	r6,-8(fp)
   81414:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   81418:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   8141c:	e0bffd17 	ldw	r2,-12(fp)
   81420:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   81424:	00003806 	br	81508 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   81428:	e0bffc17 	ldw	r2,-16(fp)
   8142c:	10800c17 	ldw	r2,48(r2)
   81430:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   81434:	e0bffc17 	ldw	r2,-16(fp)
   81438:	10800d17 	ldw	r2,52(r2)
   8143c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   81440:	e0fff817 	ldw	r3,-32(fp)
   81444:	e0bff517 	ldw	r2,-44(fp)
   81448:	1880062e 	bgeu	r3,r2,81464 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   8144c:	e0fff517 	ldw	r3,-44(fp)
   81450:	e0bff817 	ldw	r2,-32(fp)
   81454:	1885c83a 	sub	r2,r3,r2
   81458:	10bfffc4 	addi	r2,r2,-1
   8145c:	e0bff615 	stw	r2,-40(fp)
   81460:	00000b06 	br	81490 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   81464:	e0bff517 	ldw	r2,-44(fp)
   81468:	10000526 	beq	r2,zero,81480 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   8146c:	00c20004 	movi	r3,2048
   81470:	e0bff817 	ldw	r2,-32(fp)
   81474:	1885c83a 	sub	r2,r3,r2
   81478:	e0bff615 	stw	r2,-40(fp)
   8147c:	00000406 	br	81490 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   81480:	00c1ffc4 	movi	r3,2047
   81484:	e0bff817 	ldw	r2,-32(fp)
   81488:	1885c83a 	sub	r2,r3,r2
   8148c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   81490:	e0bff617 	ldw	r2,-40(fp)
   81494:	1000011e 	bne	r2,zero,8149c <altera_avalon_jtag_uart_write+0xa4>
        break;
   81498:	00001d06 	br	81510 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   8149c:	e0fffe17 	ldw	r3,-8(fp)
   814a0:	e0bff617 	ldw	r2,-40(fp)
   814a4:	1880022e 	bgeu	r3,r2,814b0 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   814a8:	e0bffe17 	ldw	r2,-8(fp)
   814ac:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   814b0:	e0bff817 	ldw	r2,-32(fp)
   814b4:	10820e04 	addi	r2,r2,2104
   814b8:	e0fffc17 	ldw	r3,-16(fp)
   814bc:	1885883a 	add	r2,r3,r2
   814c0:	1009883a 	mov	r4,r2
   814c4:	e17ffd17 	ldw	r5,-12(fp)
   814c8:	e1bff617 	ldw	r6,-40(fp)
   814cc:	00835800 	call	83580 <memcpy>
      ptr   += n;
   814d0:	e0fffd17 	ldw	r3,-12(fp)
   814d4:	e0bff617 	ldw	r2,-40(fp)
   814d8:	1885883a 	add	r2,r3,r2
   814dc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   814e0:	e0fffe17 	ldw	r3,-8(fp)
   814e4:	e0bff617 	ldw	r2,-40(fp)
   814e8:	1885c83a 	sub	r2,r3,r2
   814ec:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   814f0:	e0fff817 	ldw	r3,-32(fp)
   814f4:	e0bff617 	ldw	r2,-40(fp)
   814f8:	1885883a 	add	r2,r3,r2
   814fc:	10c1ffcc 	andi	r3,r2,2047
   81500:	e0bffc17 	ldw	r2,-16(fp)
   81504:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   81508:	e0bffe17 	ldw	r2,-8(fp)
   8150c:	00bfc616 	blt	zero,r2,81428 <rx_descriptor_end+0xfff813c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81510:	0005303a 	rdctl	r2,status
   81514:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81518:	e0fffa17 	ldw	r3,-24(fp)
   8151c:	00bfff84 	movi	r2,-2
   81520:	1884703a 	and	r2,r3,r2
   81524:	1001703a 	wrctl	status,r2
  
  return context;
   81528:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   8152c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   81530:	e0bffc17 	ldw	r2,-16(fp)
   81534:	10800817 	ldw	r2,32(r2)
   81538:	10c00094 	ori	r3,r2,2
   8153c:	e0bffc17 	ldw	r2,-16(fp)
   81540:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   81544:	e0bffc17 	ldw	r2,-16(fp)
   81548:	10800017 	ldw	r2,0(r2)
   8154c:	10800104 	addi	r2,r2,4
   81550:	1007883a 	mov	r3,r2
   81554:	e0bffc17 	ldw	r2,-16(fp)
   81558:	10800817 	ldw	r2,32(r2)
   8155c:	18800035 	stwio	r2,0(r3)
   81560:	e0bff917 	ldw	r2,-28(fp)
   81564:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   81568:	e0bffb17 	ldw	r2,-20(fp)
   8156c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   81570:	e0bffe17 	ldw	r2,-8(fp)
   81574:	0080120e 	bge	zero,r2,815c0 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   81578:	e0bfff17 	ldw	r2,-4(fp)
   8157c:	1090000c 	andi	r2,r2,16384
   81580:	10000126 	beq	r2,zero,81588 <altera_avalon_jtag_uart_write+0x190>
        break;
   81584:	00001006 	br	815c8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   81588:	0001883a 	nop
   8158c:	e0bffc17 	ldw	r2,-16(fp)
   81590:	10c00d17 	ldw	r3,52(r2)
   81594:	e0bff517 	ldw	r2,-44(fp)
   81598:	1880051e 	bne	r3,r2,815b0 <altera_avalon_jtag_uart_write+0x1b8>
   8159c:	e0bffc17 	ldw	r2,-16(fp)
   815a0:	10c00917 	ldw	r3,36(r2)
   815a4:	e0bffc17 	ldw	r2,-16(fp)
   815a8:	10800117 	ldw	r2,4(r2)
   815ac:	18bff736 	bltu	r3,r2,8158c <rx_descriptor_end+0xfff8152c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   815b0:	e0bffc17 	ldw	r2,-16(fp)
   815b4:	10800917 	ldw	r2,36(r2)
   815b8:	10000126 	beq	r2,zero,815c0 <altera_avalon_jtag_uart_write+0x1c8>
         break;
   815bc:	00000206 	br	815c8 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   815c0:	e0bffe17 	ldw	r2,-8(fp)
   815c4:	00bf9716 	blt	zero,r2,81424 <rx_descriptor_end+0xfff813c4>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   815c8:	e0fffd17 	ldw	r3,-12(fp)
   815cc:	e0bff717 	ldw	r2,-36(fp)
   815d0:	18800426 	beq	r3,r2,815e4 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   815d4:	e0fffd17 	ldw	r3,-12(fp)
   815d8:	e0bff717 	ldw	r2,-36(fp)
   815dc:	1885c83a 	sub	r2,r3,r2
   815e0:	00000606 	br	815fc <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   815e4:	e0bfff17 	ldw	r2,-4(fp)
   815e8:	1090000c 	andi	r2,r2,16384
   815ec:	10000226 	beq	r2,zero,815f8 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   815f0:	00bffd44 	movi	r2,-11
   815f4:	00000106 	br	815fc <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   815f8:	00bffec4 	movi	r2,-5
}
   815fc:	e037883a 	mov	sp,fp
   81600:	dfc00117 	ldw	ra,4(sp)
   81604:	df000017 	ldw	fp,0(sp)
   81608:	dec00204 	addi	sp,sp,8
   8160c:	f800283a 	ret

00081610 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   81610:	defffe04 	addi	sp,sp,-8
   81614:	dfc00115 	stw	ra,4(sp)
   81618:	df000015 	stw	fp,0(sp)
   8161c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   81620:	00800234 	movhi	r2,8
   81624:	109efe04 	addi	r2,r2,31736
   81628:	10800017 	ldw	r2,0(r2)
   8162c:	10000526 	beq	r2,zero,81644 <alt_get_errno+0x34>
   81630:	00800234 	movhi	r2,8
   81634:	109efe04 	addi	r2,r2,31736
   81638:	10800017 	ldw	r2,0(r2)
   8163c:	103ee83a 	callr	r2
   81640:	00000206 	br	8164c <alt_get_errno+0x3c>
   81644:	00800274 	movhi	r2,9
   81648:	10a5c704 	addi	r2,r2,-26852
}
   8164c:	e037883a 	mov	sp,fp
   81650:	dfc00117 	ldw	ra,4(sp)
   81654:	df000017 	ldw	fp,0(sp)
   81658:	dec00204 	addi	sp,sp,8
   8165c:	f800283a 	ret

00081660 <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
   81660:	defffc04 	addi	sp,sp,-16
   81664:	df000315 	stw	fp,12(sp)
   81668:	df000304 	addi	fp,sp,12
   8166c:	e13ffe15 	stw	r4,-8(fp)
   81670:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   81674:	e0bffe17 	ldw	r2,-8(fp)
   81678:	10800317 	ldw	r2,12(r2)
   8167c:	10800037 	ldwio	r2,0(r2)
   81680:	1080040c 	andi	r2,r2,16
   81684:	10000226 	beq	r2,zero,81690 <alt_avalon_sgdma_do_async_transfer+0x30>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
   81688:	00bffc04 	movi	r2,-16
   8168c:	00003906 	br	81774 <alt_avalon_sgdma_do_async_transfer+0x114>
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   81690:	e0bffe17 	ldw	r2,-8(fp)
   81694:	10800317 	ldw	r2,12(r2)
   81698:	10800404 	addi	r2,r2,16
   8169c:	e0fffe17 	ldw	r3,-8(fp)
   816a0:	18c00317 	ldw	r3,12(r3)
   816a4:	18c00404 	addi	r3,r3,16
   816a8:	19000037 	ldwio	r4,0(r3)
   816ac:	00fff7c4 	movi	r3,-33
   816b0:	20c6703a 	and	r3,r4,r3
   816b4:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   816b8:	e0bffe17 	ldw	r2,-8(fp)
   816bc:	10800317 	ldw	r2,12(r2)
   816c0:	00c03fc4 	movi	r3,255
   816c4:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
   816c8:	e0bffe17 	ldw	r2,-8(fp)
   816cc:	10800317 	ldw	r2,12(r2)
   816d0:	10800804 	addi	r2,r2,32
   816d4:	e0ffff17 	ldw	r3,-4(fp)
   816d8:	10c00035 	stwio	r3,0(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
   816dc:	e0bffe17 	ldw	r2,-8(fp)
   816e0:	10800917 	ldw	r2,36(r2)
   816e4:	10001126 	beq	r2,zero,8172c <alt_avalon_sgdma_do_async_transfer+0xcc>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   816e8:	e0bffe17 	ldw	r2,-8(fp)
   816ec:	10800317 	ldw	r2,12(r2)
   816f0:	10800404 	addi	r2,r2,16
   816f4:	10800037 	ldwio	r2,0(r2)
   816f8:	e0bffd15 	stw	r2,-12(fp)

    control |= (dev->chain_control                          |
   816fc:	e0bffe17 	ldw	r2,-8(fp)
   81700:	10c00b17 	ldw	r3,44(r2)
   81704:	e0bffd17 	ldw	r2,-12(fp)
   81708:	1884b03a 	or	r2,r3,r2
   8170c:	10801814 	ori	r2,r2,96
   81710:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   81714:	e0bffe17 	ldw	r2,-8(fp)
   81718:	10800317 	ldw	r2,12(r2)
   8171c:	10800404 	addi	r2,r2,16
   81720:	e0fffd17 	ldw	r3,-12(fp)
   81724:	10c00035 	stwio	r3,0(r2)
   81728:	00001106 	br	81770 <alt_avalon_sgdma_do_async_transfer+0x110>
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   8172c:	e0bffe17 	ldw	r2,-8(fp)
   81730:	10800317 	ldw	r2,12(r2)
   81734:	10800404 	addi	r2,r2,16
   81738:	10800037 	ldwio	r2,0(r2)
   8173c:	e0bffd15 	stw	r2,-12(fp)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
   81740:	e0bffd17 	ldw	r2,-12(fp)
   81744:	10801814 	ori	r2,r2,96
   81748:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;
   8174c:	e0fffd17 	ldw	r3,-12(fp)
   81750:	00bffbc4 	movi	r2,-17
   81754:	1884703a 	and	r2,r3,r2
   81758:	e0bffd15 	stw	r2,-12(fp)

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   8175c:	e0bffe17 	ldw	r2,-8(fp)
   81760:	10800317 	ldw	r2,12(r2)
   81764:	10800404 	addi	r2,r2,16
   81768:	e0fffd17 	ldw	r3,-12(fp)
   8176c:	10c00035 	stwio	r3,0(r2)

  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
   81770:	0005883a 	mov	r2,zero
}
   81774:	e037883a 	mov	sp,fp
   81778:	df000017 	ldw	fp,0(sp)
   8177c:	dec00104 	addi	sp,sp,4
   81780:	f800283a 	ret

00081784 <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
   81784:	defffc04 	addi	sp,sp,-16
   81788:	df000315 	stw	fp,12(sp)
   8178c:	df000304 	addi	fp,sp,12
   81790:	e13ffe15 	stw	r4,-8(fp)
   81794:	e17fff15 	stw	r5,-4(fp)
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   81798:	0001883a 	nop
   8179c:	e0bffe17 	ldw	r2,-8(fp)
   817a0:	10800317 	ldw	r2,12(r2)
   817a4:	10800037 	ldwio	r2,0(r2)
   817a8:	1080040c 	andi	r2,r2,16
   817ac:	103ffb1e 	bne	r2,zero,8179c <rx_descriptor_end+0xfff8173c>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   817b0:	e0bffe17 	ldw	r2,-8(fp)
   817b4:	10800317 	ldw	r2,12(r2)
   817b8:	10800404 	addi	r2,r2,16
   817bc:	e0fffe17 	ldw	r3,-8(fp)
   817c0:	18c00317 	ldw	r3,12(r3)
   817c4:	18c00404 	addi	r3,r3,16
   817c8:	19000037 	ldwio	r4,0(r3)
   817cc:	00fff7c4 	movi	r3,-33
   817d0:	20c6703a 	and	r3,r4,r3
   817d4:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   817d8:	e0bffe17 	ldw	r2,-8(fp)
   817dc:	10800317 	ldw	r2,12(r2)
   817e0:	00c03fc4 	movi	r3,255
   817e4:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
   817e8:	e0bffe17 	ldw	r2,-8(fp)
   817ec:	10800317 	ldw	r2,12(r2)
   817f0:	10800804 	addi	r2,r2,32
   817f4:	e0ffff17 	ldw	r3,-4(fp)
   817f8:	10c00035 	stwio	r3,0(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   817fc:	e0bffe17 	ldw	r2,-8(fp)
   81800:	10800317 	ldw	r2,12(r2)
   81804:	10800404 	addi	r2,r2,16
   81808:	e0fffe17 	ldw	r3,-8(fp)
   8180c:	18c00317 	ldw	r3,12(r3)
   81810:	18c00404 	addi	r3,r3,16
   81814:	18c00037 	ldwio	r3,0(r3)
   81818:	18c01814 	ori	r3,r3,96
   8181c:	10c00035 	stwio	r3,0(r2)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   81820:	0001883a 	nop
   81824:	e0bffe17 	ldw	r2,-8(fp)
   81828:	10800317 	ldw	r2,12(r2)
   8182c:	10800037 	ldwio	r2,0(r2)
   81830:	1080040c 	andi	r2,r2,16
   81834:	103ffb1e 	bne	r2,zero,81824 <rx_descriptor_end+0xfff817c4>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
   81838:	e0bffe17 	ldw	r2,-8(fp)
   8183c:	10800317 	ldw	r2,12(r2)
   81840:	10800404 	addi	r2,r2,16
   81844:	e0fffe17 	ldw	r3,-8(fp)
   81848:	18c00317 	ldw	r3,12(r3)
   8184c:	18c00404 	addi	r3,r3,16
   81850:	19000037 	ldwio	r4,0(r3)
   81854:	00fff7c4 	movi	r3,-33
   81858:	20c6703a 	and	r3,r4,r3
   8185c:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
   81860:	e0bffe17 	ldw	r2,-8(fp)
   81864:	10800317 	ldw	r2,12(r2)
   81868:	10800037 	ldwio	r2,0(r2)
   8186c:	e0bffd05 	stb	r2,-12(fp)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   81870:	e0bffe17 	ldw	r2,-8(fp)
   81874:	10800317 	ldw	r2,12(r2)
   81878:	00c03fc4 	movi	r3,255
   8187c:	10c00035 	stwio	r3,0(r2)

  return status;
   81880:	e0bffd03 	ldbu	r2,-12(fp)
}
   81884:	e037883a 	mov	sp,fp
   81888:	df000017 	ldw	fp,0(sp)
   8188c:	dec00104 	addi	sp,sp,4
   81890:	f800283a 	ret

00081894 <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
   81894:	defff404 	addi	sp,sp,-48
   81898:	dfc00b15 	stw	ra,44(sp)
   8189c:	df000a15 	stw	fp,40(sp)
   818a0:	df000a04 	addi	fp,sp,40
   818a4:	e13ffb15 	stw	r4,-20(fp)
   818a8:	e17ffc15 	stw	r5,-16(fp)
   818ac:	e1bffd15 	stw	r6,-12(fp)
   818b0:	e1fffe15 	stw	r7,-8(fp)
   818b4:	e0800217 	ldw	r2,8(fp)
   818b8:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
   818bc:	e0bfff0b 	ldhu	r2,-4(fp)
   818c0:	d8800015 	stw	r2,0(sp)
   818c4:	e0800317 	ldw	r2,12(fp)
   818c8:	d8800115 	stw	r2,4(sp)
   818cc:	e0800417 	ldw	r2,16(fp)
   818d0:	d8800215 	stw	r2,8(sp)
   818d4:	d8000315 	stw	zero,12(sp)
   818d8:	d8000415 	stw	zero,16(sp)
   818dc:	e13ffb17 	ldw	r4,-20(fp)
   818e0:	e17ffc17 	ldw	r5,-16(fp)
   818e4:	e1bffd17 	ldw	r6,-12(fp)
   818e8:	e1fffe17 	ldw	r7,-8(fp)
   818ec:	00819040 	call	81904 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
   818f0:	e037883a 	mov	sp,fp
   818f4:	dfc00117 	ldw	ra,4(sp)
   818f8:	df000017 	ldw	fp,0(sp)
   818fc:	dec00204 	addi	sp,sp,8
   81900:	f800283a 	ret

00081904 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
   81904:	defff204 	addi	sp,sp,-56
   81908:	dfc00d15 	stw	ra,52(sp)
   8190c:	df000c15 	stw	fp,48(sp)
   81910:	df000c04 	addi	fp,sp,48
   81914:	e13ffb15 	stw	r4,-20(fp)
   81918:	e17ffc15 	stw	r5,-16(fp)
   8191c:	e1bffd15 	stw	r6,-12(fp)
   81920:	e1fffe15 	stw	r7,-8(fp)
   81924:	e0800217 	ldw	r2,8(fp)
   81928:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
   8192c:	e0bfff0b 	ldhu	r2,-4(fp)
   81930:	d8800015 	stw	r2,0(sp)
   81934:	d8000115 	stw	zero,4(sp)
   81938:	e0800317 	ldw	r2,12(fp)
   8193c:	d8800215 	stw	r2,8(sp)
   81940:	e0800417 	ldw	r2,16(fp)
   81944:	d8800315 	stw	r2,12(sp)
   81948:	e0800517 	ldw	r2,20(fp)
   8194c:	d8800415 	stw	r2,16(sp)
   81950:	e0800617 	ldw	r2,24(fp)
   81954:	d8800515 	stw	r2,20(sp)
   81958:	d8000615 	stw	zero,24(sp)
   8195c:	e13ffb17 	ldw	r4,-20(fp)
   81960:	e17ffc17 	ldw	r5,-16(fp)
   81964:	e1bffd17 	ldw	r6,-12(fp)
   81968:	e1fffe17 	ldw	r7,-8(fp)
   8196c:	0081e700 	call	81e70 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
   81970:	e037883a 	mov	sp,fp
   81974:	dfc00117 	ldw	ra,4(sp)
   81978:	df000017 	ldw	fp,0(sp)
   8197c:	dec00204 	addi	sp,sp,8
   81980:	f800283a 	ret

00081984 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
   81984:	defff804 	addi	sp,sp,-32
   81988:	dfc00715 	stw	ra,28(sp)
   8198c:	df000615 	stw	fp,24(sp)
   81990:	df000604 	addi	fp,sp,24
   81994:	e13ffc15 	stw	r4,-16(fp)
   81998:	e17ffd15 	stw	r5,-12(fp)
   8199c:	e1bffe15 	stw	r6,-8(fp)
   819a0:	3805883a 	mov	r2,r7
   819a4:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
   819a8:	e0ffff0b 	ldhu	r3,-4(fp)
   819ac:	e0800217 	ldw	r2,8(fp)
   819b0:	d8800015 	stw	r2,0(sp)
   819b4:	d8000115 	stw	zero,4(sp)
   819b8:	e13ffc17 	ldw	r4,-16(fp)
   819bc:	e17ffd17 	ldw	r5,-12(fp)
   819c0:	e1bffe17 	ldw	r6,-8(fp)
   819c4:	180f883a 	mov	r7,r3
   819c8:	00819e00 	call	819e0 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
   819cc:	e037883a 	mov	sp,fp
   819d0:	dfc00117 	ldw	ra,4(sp)
   819d4:	df000017 	ldw	fp,0(sp)
   819d8:	dec00204 	addi	sp,sp,8
   819dc:	f800283a 	ret

000819e0 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
   819e0:	defff304 	addi	sp,sp,-52
   819e4:	dfc00c15 	stw	ra,48(sp)
   819e8:	df000b15 	stw	fp,44(sp)
   819ec:	df000b04 	addi	fp,sp,44
   819f0:	e13ffc15 	stw	r4,-16(fp)
   819f4:	e17ffd15 	stw	r5,-12(fp)
   819f8:	e1bffe15 	stw	r6,-8(fp)
   819fc:	3805883a 	mov	r2,r7
   81a00:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
   81a04:	e0bfff0b 	ldhu	r2,-4(fp)
   81a08:	d8800015 	stw	r2,0(sp)
   81a0c:	d8000115 	stw	zero,4(sp)
   81a10:	d8000215 	stw	zero,8(sp)
   81a14:	e0800217 	ldw	r2,8(fp)
   81a18:	d8800315 	stw	r2,12(sp)
   81a1c:	d8000415 	stw	zero,16(sp)
   81a20:	e0800317 	ldw	r2,12(fp)
   81a24:	d8800515 	stw	r2,20(sp)
   81a28:	d8000615 	stw	zero,24(sp)
   81a2c:	e13ffc17 	ldw	r4,-16(fp)
   81a30:	e17ffd17 	ldw	r5,-12(fp)
   81a34:	000d883a 	mov	r6,zero
   81a38:	e1fffe17 	ldw	r7,-8(fp)
   81a3c:	0081e700 	call	81e70 <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
   81a40:	e037883a 	mov	sp,fp
   81a44:	dfc00117 	ldw	ra,4(sp)
   81a48:	df000017 	ldw	fp,0(sp)
   81a4c:	dec00204 	addi	sp,sp,8
   81a50:	f800283a 	ret

00081a54 <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
   81a54:	defff404 	addi	sp,sp,-48
   81a58:	dfc00b15 	stw	ra,44(sp)
   81a5c:	df000a15 	stw	fp,40(sp)
   81a60:	df000a04 	addi	fp,sp,40
   81a64:	e13ffb15 	stw	r4,-20(fp)
   81a68:	e17ffc15 	stw	r5,-16(fp)
   81a6c:	e1bffd15 	stw	r6,-12(fp)
   81a70:	3807883a 	mov	r3,r7
   81a74:	e0800517 	ldw	r2,20(fp)
   81a78:	e0fffe0d 	sth	r3,-8(fp)
   81a7c:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
   81a80:	e1fffe0b 	ldhu	r7,-8(fp)
   81a84:	e0bfff03 	ldbu	r2,-4(fp)
   81a88:	e0c00217 	ldw	r3,8(fp)
   81a8c:	d8c00015 	stw	r3,0(sp)
   81a90:	e0c00317 	ldw	r3,12(fp)
   81a94:	d8c00115 	stw	r3,4(sp)
   81a98:	e0c00417 	ldw	r3,16(fp)
   81a9c:	d8c00215 	stw	r3,8(sp)
   81aa0:	d8000315 	stw	zero,12(sp)
   81aa4:	d8800415 	stw	r2,16(sp)
   81aa8:	e13ffb17 	ldw	r4,-20(fp)
   81aac:	e17ffc17 	ldw	r5,-16(fp)
   81ab0:	e1bffd17 	ldw	r6,-12(fp)
   81ab4:	0081acc0 	call	81acc <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
   81ab8:	e037883a 	mov	sp,fp
   81abc:	dfc00117 	ldw	ra,4(sp)
   81ac0:	df000017 	ldw	fp,0(sp)
   81ac4:	dec00204 	addi	sp,sp,8
   81ac8:	f800283a 	ret

00081acc <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
   81acc:	defff204 	addi	sp,sp,-56
   81ad0:	dfc00d15 	stw	ra,52(sp)
   81ad4:	df000c15 	stw	fp,48(sp)
   81ad8:	df000c04 	addi	fp,sp,48
   81adc:	e13ffb15 	stw	r4,-20(fp)
   81ae0:	e17ffc15 	stw	r5,-16(fp)
   81ae4:	e1bffd15 	stw	r6,-12(fp)
   81ae8:	3807883a 	mov	r3,r7
   81aec:	e0800617 	ldw	r2,24(fp)
   81af0:	e0fffe0d 	sth	r3,-8(fp)
   81af4:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
   81af8:	e0fffe0b 	ldhu	r3,-8(fp)
   81afc:	e0bfff03 	ldbu	r2,-4(fp)
   81b00:	d8c00015 	stw	r3,0(sp)
   81b04:	e0c00417 	ldw	r3,16(fp)
   81b08:	d8c00115 	stw	r3,4(sp)
   81b0c:	e0c00217 	ldw	r3,8(fp)
   81b10:	d8c00215 	stw	r3,8(sp)
   81b14:	e0c00317 	ldw	r3,12(fp)
   81b18:	d8c00315 	stw	r3,12(sp)
   81b1c:	e0c00517 	ldw	r3,20(fp)
   81b20:	d8c00415 	stw	r3,16(sp)
   81b24:	d8000515 	stw	zero,20(sp)
   81b28:	d8800615 	stw	r2,24(sp)
   81b2c:	e13ffb17 	ldw	r4,-20(fp)
   81b30:	e17ffc17 	ldw	r5,-16(fp)
   81b34:	e1bffd17 	ldw	r6,-12(fp)
   81b38:	000f883a 	mov	r7,zero
   81b3c:	0081e700 	call	81e70 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
   81b40:	e037883a 	mov	sp,fp
   81b44:	dfc00117 	ldw	ra,4(sp)
   81b48:	df000017 	ldw	fp,0(sp)
   81b4c:	dec00204 	addi	sp,sp,8
   81b50:	f800283a 	ret

00081b54 <alt_avalon_sgdma_register_callback>:
void alt_avalon_sgdma_register_callback(
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
   81b54:	defffb04 	addi	sp,sp,-20
   81b58:	df000415 	stw	fp,16(sp)
   81b5c:	df000404 	addi	fp,sp,16
   81b60:	e13ffc15 	stw	r4,-16(fp)
   81b64:	e17ffd15 	stw	r5,-12(fp)
   81b68:	e1bffe15 	stw	r6,-8(fp)
   81b6c:	e1ffff15 	stw	r7,-4(fp)
  dev->callback         = callback;
   81b70:	e0bffc17 	ldw	r2,-16(fp)
   81b74:	e0fffd17 	ldw	r3,-12(fp)
   81b78:	10c00915 	stw	r3,36(r2)
  dev->callback_context = context;
   81b7c:	e0bffc17 	ldw	r2,-16(fp)
   81b80:	e0ffff17 	ldw	r3,-4(fp)
   81b84:	10c00a15 	stw	r3,40(r2)
  dev->chain_control    = chain_control;
   81b88:	e0bffc17 	ldw	r2,-16(fp)
   81b8c:	e0fffe17 	ldw	r3,-8(fp)
   81b90:	10c00b15 	stw	r3,44(r2)
}
   81b94:	e037883a 	mov	sp,fp
   81b98:	df000017 	ldw	fp,0(sp)
   81b9c:	dec00104 	addi	sp,sp,4
   81ba0:	f800283a 	ret

00081ba4 <alt_avalon_sgdma_start>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct.
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
   81ba4:	defffd04 	addi	sp,sp,-12
   81ba8:	df000215 	stw	fp,8(sp)
   81bac:	df000204 	addi	fp,sp,8
   81bb0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   81bb4:	e0bfff17 	ldw	r2,-4(fp)
   81bb8:	10800317 	ldw	r2,12(r2)
   81bbc:	10800404 	addi	r2,r2,16
   81bc0:	10800037 	ldwio	r2,0(r2)
   81bc4:	e0bffe15 	stw	r2,-8(fp)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
   81bc8:	e0bffe17 	ldw	r2,-8(fp)
   81bcc:	10800814 	ori	r2,r2,32
   81bd0:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   81bd4:	e0bfff17 	ldw	r2,-4(fp)
   81bd8:	10800317 	ldw	r2,12(r2)
   81bdc:	10800404 	addi	r2,r2,16
   81be0:	e0fffe17 	ldw	r3,-8(fp)
   81be4:	10c00035 	stwio	r3,0(r2)
}
   81be8:	e037883a 	mov	sp,fp
   81bec:	df000017 	ldw	fp,0(sp)
   81bf0:	dec00104 	addi	sp,sp,4
   81bf4:	f800283a 	ret

00081bf8 <alt_avalon_sgdma_stop>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
   81bf8:	defffd04 	addi	sp,sp,-12
   81bfc:	df000215 	stw	fp,8(sp)
   81c00:	df000204 	addi	fp,sp,8
   81c04:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   81c08:	e0bfff17 	ldw	r2,-4(fp)
   81c0c:	10800317 	ldw	r2,12(r2)
   81c10:	10800404 	addi	r2,r2,16
   81c14:	10800037 	ldwio	r2,0(r2)
   81c18:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
   81c1c:	e0fffe17 	ldw	r3,-8(fp)
   81c20:	00bff7c4 	movi	r2,-33
   81c24:	1884703a 	and	r2,r3,r2
   81c28:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   81c2c:	e0bfff17 	ldw	r2,-4(fp)
   81c30:	10800317 	ldw	r2,12(r2)
   81c34:	10800404 	addi	r2,r2,16
   81c38:	e0fffe17 	ldw	r3,-8(fp)
   81c3c:	10c00035 	stwio	r3,0(r2)
}
   81c40:	e037883a 	mov	sp,fp
   81c44:	df000017 	ldw	fp,0(sp)
   81c48:	dec00104 	addi	sp,sp,4
   81c4c:	f800283a 	ret

00081c50 <alt_avalon_sgdma_check_descriptor_status>:
 * - 0 if the descriptor is error-free, not "owned by hardware", or
 *   a previously requested transfer has appeared to have completed
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
   81c50:	defffe04 	addi	sp,sp,-8
   81c54:	df000115 	stw	fp,4(sp)
   81c58:	df000104 	addi	fp,sp,4
   81c5c:	e13fff15 	stw	r4,-4(fp)
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
   81c60:	e0bfff17 	ldw	r2,-4(fp)
   81c64:	10800784 	addi	r2,r2,30
   81c68:	10800023 	ldbuio	r2,0(r2)
   81c6c:	10803fcc 	andi	r2,r2,255
   81c70:	10801fcc 	andi	r2,r2,127
   81c74:	10000226 	beq	r2,zero,81c80 <alt_avalon_sgdma_check_descriptor_status+0x30>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
   81c78:	00bffec4 	movi	r2,-5
   81c7c:	00000906 	br	81ca4 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

  if( IORD_8DIRECT(&desc->control, 0) &
   81c80:	e0bfff17 	ldw	r2,-4(fp)
   81c84:	108007c4 	addi	r2,r2,31
   81c88:	10800023 	ldbuio	r2,0(r2)
   81c8c:	10803fcc 	andi	r2,r2,255
   81c90:	1080200c 	andi	r2,r2,128
   81c94:	10000226 	beq	r2,zero,81ca0 <alt_avalon_sgdma_check_descriptor_status+0x50>
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
   81c98:	00bfe244 	movi	r2,-119
   81c9c:	00000106 	br	81ca4 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

    return 0;
   81ca0:	0005883a 	mov	r2,zero
}
   81ca4:	e037883a 	mov	sp,fp
   81ca8:	df000017 	ldw	fp,0(sp)
   81cac:	dec00104 	addi	sp,sp,4
   81cb0:	f800283a 	ret

00081cb4 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
   81cb4:	defffc04 	addi	sp,sp,-16
   81cb8:	dfc00315 	stw	ra,12(sp)
   81cbc:	df000215 	stw	fp,8(sp)
   81cc0:	df000204 	addi	fp,sp,8
   81cc4:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
   81cc8:	e13fff17 	ldw	r4,-4(fp)
   81ccc:	d1600004 	addi	r5,gp,-32768
   81cd0:	00828700 	call	82870 <alt_find_dev>
   81cd4:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev) {
   81cd8:	e0bffe17 	ldw	r2,-8(fp)
   81cdc:	1000041e 	bne	r2,zero,81cf0 <alt_avalon_sgdma_open+0x3c>
    ALT_ERRNO = ENODEV;
   81ce0:	00816100 	call	81610 <alt_get_errno>
   81ce4:	1007883a 	mov	r3,r2
   81ce8:	008004c4 	movi	r2,19
   81cec:	18800015 	stw	r2,0(r3)
  }

  return dev;
   81cf0:	e0bffe17 	ldw	r2,-8(fp)
}
   81cf4:	e037883a 	mov	sp,fp
   81cf8:	dfc00117 	ldw	ra,4(sp)
   81cfc:	df000017 	ldw	fp,0(sp)
   81d00:	dec00204 	addi	sp,sp,8
   81d04:	f800283a 	ret

00081d08 <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
   81d08:	defff104 	addi	sp,sp,-60
   81d0c:	dfc00e15 	stw	ra,56(sp)
   81d10:	df000d15 	stw	fp,52(sp)
   81d14:	df000d04 	addi	fp,sp,52
   81d18:	e13ffa15 	stw	r4,-24(fp)
   81d1c:	e17ffb15 	stw	r5,-20(fp)
   81d20:	e1bffc15 	stw	r6,-16(fp)
   81d24:	e1fffd15 	stw	r7,-12(fp)
   81d28:	e0c00217 	ldw	r3,8(fp)
   81d2c:	e0800617 	ldw	r2,24(fp)
   81d30:	e0fffe0d 	sth	r3,-8(fp)
   81d34:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
   81d38:	e0fffe0b 	ldhu	r3,-8(fp)
   81d3c:	e0bfff03 	ldbu	r2,-4(fp)
   81d40:	d8c00015 	stw	r3,0(sp)
   81d44:	e0c00317 	ldw	r3,12(fp)
   81d48:	d8c00115 	stw	r3,4(sp)
   81d4c:	e0c00417 	ldw	r3,16(fp)
   81d50:	d8c00215 	stw	r3,8(sp)
   81d54:	e0c00517 	ldw	r3,20(fp)
   81d58:	d8c00315 	stw	r3,12(sp)
   81d5c:	d8000415 	stw	zero,16(sp)
   81d60:	d8000515 	stw	zero,20(sp)
   81d64:	d8800615 	stw	r2,24(sp)
   81d68:	e13ffa17 	ldw	r4,-24(fp)
   81d6c:	e17ffb17 	ldw	r5,-20(fp)
   81d70:	e1bffc17 	ldw	r6,-16(fp)
   81d74:	e1fffd17 	ldw	r7,-12(fp)
   81d78:	0081e700 	call	81e70 <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
   81d7c:	e037883a 	mov	sp,fp
   81d80:	dfc00117 	ldw	ra,4(sp)
   81d84:	df000017 	ldw	fp,0(sp)
   81d88:	dec00204 	addi	sp,sp,8
   81d8c:	f800283a 	ret

00081d90 <alt_avalon_sgdma_enable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
   81d90:	defffc04 	addi	sp,sp,-16
   81d94:	df000315 	stw	fp,12(sp)
   81d98:	df000304 	addi	fp,sp,12
   81d9c:	e13ffe15 	stw	r4,-8(fp)
   81da0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   81da4:	e0bffe17 	ldw	r2,-8(fp)
   81da8:	10800317 	ldw	r2,12(r2)
   81dac:	10800404 	addi	r2,r2,16
   81db0:	10800037 	ldwio	r2,0(r2)
   81db4:	e0bffd15 	stw	r2,-12(fp)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
   81db8:	e0fffd17 	ldw	r3,-12(fp)
   81dbc:	00a00434 	movhi	r2,32784
   81dc0:	10bfffc4 	addi	r2,r2,-1
   81dc4:	1884703a 	and	r2,r3,r2
   81dc8:	e0bffd15 	stw	r2,-12(fp)
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
   81dcc:	e0bfff17 	ldw	r2,-4(fp)
   81dd0:	1004953a 	slli	r2,r2,20
   81dd4:	10dffc2c 	andhi	r3,r2,32752

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
   81dd8:	e0bffd17 	ldw	r2,-12(fp)
   81ddc:	1884b03a 	or	r2,r3,r2
   81de0:	10800134 	orhi	r2,r2,4
   81de4:	e0bffd15 	stw	r2,-12(fp)
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   81de8:	e0bffe17 	ldw	r2,-8(fp)
   81dec:	10800317 	ldw	r2,12(r2)
   81df0:	10800404 	addi	r2,r2,16
   81df4:	e0fffd17 	ldw	r3,-12(fp)
   81df8:	10c00035 	stwio	r3,0(r2)
  
  return;
   81dfc:	0001883a 	nop
}
   81e00:	e037883a 	mov	sp,fp
   81e04:	df000017 	ldw	fp,0(sp)
   81e08:	dec00104 	addi	sp,sp,4
   81e0c:	f800283a 	ret

00081e10 <alt_avalon_sgdma_disable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
   81e10:	defffd04 	addi	sp,sp,-12
   81e14:	df000215 	stw	fp,8(sp)
   81e18:	df000204 	addi	fp,sp,8
   81e1c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   81e20:	e0bfff17 	ldw	r2,-4(fp)
   81e24:	10800317 	ldw	r2,12(r2)
   81e28:	10800404 	addi	r2,r2,16
   81e2c:	10800037 	ldwio	r2,0(r2)
   81e30:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;
   81e34:	e0fffe17 	ldw	r3,-8(fp)
   81e38:	00bfff34 	movhi	r2,65532
   81e3c:	10bfffc4 	addi	r2,r2,-1
   81e40:	1884703a 	and	r2,r3,r2
   81e44:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   81e48:	e0bfff17 	ldw	r2,-4(fp)
   81e4c:	10800317 	ldw	r2,12(r2)
   81e50:	10800404 	addi	r2,r2,16
   81e54:	e0fffe17 	ldw	r3,-8(fp)
   81e58:	10c00035 	stwio	r3,0(r2)
  
  return;
   81e5c:	0001883a 	nop
}
   81e60:	e037883a 	mov	sp,fp
   81e64:	df000017 	ldw	fp,0(sp)
   81e68:	dec00104 	addi	sp,sp,4
   81e6c:	f800283a 	ret

00081e70 <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
   81e70:	defff804 	addi	sp,sp,-32
   81e74:	dfc00715 	stw	ra,28(sp)
   81e78:	df000615 	stw	fp,24(sp)
   81e7c:	df000604 	addi	fp,sp,24
   81e80:	e13ffa15 	stw	r4,-24(fp)
   81e84:	e17ffb15 	stw	r5,-20(fp)
   81e88:	e1bffc15 	stw	r6,-16(fp)
   81e8c:	e1fffd15 	stw	r7,-12(fp)
   81e90:	e0c00217 	ldw	r3,8(fp)
   81e94:	e0800817 	ldw	r2,32(fp)
   81e98:	e0fffe0d 	sth	r3,-8(fp)
   81e9c:	e0bfff05 	stb	r2,-4(fp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
   81ea0:	e0bffb17 	ldw	r2,-20(fp)
   81ea4:	108007c4 	addi	r2,r2,31
   81ea8:	e0fffb17 	ldw	r3,-20(fp)
   81eac:	18c007c3 	ldbu	r3,31(r3)
   81eb0:	19003fcc 	andi	r4,r3,255
   81eb4:	00ffdfc4 	movi	r3,-129
   81eb8:	20c6703a 	and	r3,r4,r3
   81ebc:	10c00025 	stbio	r3,0(r2)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
   81ec0:	e0bffa17 	ldw	r2,-24(fp)
   81ec4:	e0fffc17 	ldw	r3,-16(fp)
   81ec8:	19403fcc 	andi	r5,r3,255
   81ecc:	10c00003 	ldbu	r3,0(r2)
   81ed0:	1806703a 	and	r3,r3,zero
   81ed4:	1809883a 	mov	r4,r3
   81ed8:	2807883a 	mov	r3,r5
   81edc:	20c6b03a 	or	r3,r4,r3
   81ee0:	10c00005 	stb	r3,0(r2)
   81ee4:	e0fffc17 	ldw	r3,-16(fp)
   81ee8:	1806d23a 	srli	r3,r3,8
   81eec:	19403fcc 	andi	r5,r3,255
   81ef0:	10c00043 	ldbu	r3,1(r2)
   81ef4:	1806703a 	and	r3,r3,zero
   81ef8:	1809883a 	mov	r4,r3
   81efc:	2807883a 	mov	r3,r5
   81f00:	20c6b03a 	or	r3,r4,r3
   81f04:	10c00045 	stb	r3,1(r2)
   81f08:	e0fffc17 	ldw	r3,-16(fp)
   81f0c:	1806d43a 	srli	r3,r3,16
   81f10:	19403fcc 	andi	r5,r3,255
   81f14:	10c00083 	ldbu	r3,2(r2)
   81f18:	1806703a 	and	r3,r3,zero
   81f1c:	1809883a 	mov	r4,r3
   81f20:	2807883a 	mov	r3,r5
   81f24:	20c6b03a 	or	r3,r4,r3
   81f28:	10c00085 	stb	r3,2(r2)
   81f2c:	e0fffc17 	ldw	r3,-16(fp)
   81f30:	180ad63a 	srli	r5,r3,24
   81f34:	10c000c3 	ldbu	r3,3(r2)
   81f38:	1806703a 	and	r3,r3,zero
   81f3c:	1809883a 	mov	r4,r3
   81f40:	2807883a 	mov	r3,r5
   81f44:	20c6b03a 	or	r3,r4,r3
   81f48:	10c000c5 	stb	r3,3(r2)
  desc->write_addr               = write_addr;
   81f4c:	e0bffa17 	ldw	r2,-24(fp)
   81f50:	e0fffd17 	ldw	r3,-12(fp)
   81f54:	19403fcc 	andi	r5,r3,255
   81f58:	10c00203 	ldbu	r3,8(r2)
   81f5c:	1806703a 	and	r3,r3,zero
   81f60:	1809883a 	mov	r4,r3
   81f64:	2807883a 	mov	r3,r5
   81f68:	20c6b03a 	or	r3,r4,r3
   81f6c:	10c00205 	stb	r3,8(r2)
   81f70:	e0fffd17 	ldw	r3,-12(fp)
   81f74:	1806d23a 	srli	r3,r3,8
   81f78:	19403fcc 	andi	r5,r3,255
   81f7c:	10c00243 	ldbu	r3,9(r2)
   81f80:	1806703a 	and	r3,r3,zero
   81f84:	1809883a 	mov	r4,r3
   81f88:	2807883a 	mov	r3,r5
   81f8c:	20c6b03a 	or	r3,r4,r3
   81f90:	10c00245 	stb	r3,9(r2)
   81f94:	e0fffd17 	ldw	r3,-12(fp)
   81f98:	1806d43a 	srli	r3,r3,16
   81f9c:	19403fcc 	andi	r5,r3,255
   81fa0:	10c00283 	ldbu	r3,10(r2)
   81fa4:	1806703a 	and	r3,r3,zero
   81fa8:	1809883a 	mov	r4,r3
   81fac:	2807883a 	mov	r3,r5
   81fb0:	20c6b03a 	or	r3,r4,r3
   81fb4:	10c00285 	stb	r3,10(r2)
   81fb8:	e0fffd17 	ldw	r3,-12(fp)
   81fbc:	180ad63a 	srli	r5,r3,24
   81fc0:	10c002c3 	ldbu	r3,11(r2)
   81fc4:	1806703a 	and	r3,r3,zero
   81fc8:	1809883a 	mov	r4,r3
   81fcc:	2807883a 	mov	r3,r5
   81fd0:	20c6b03a 	or	r3,r4,r3
   81fd4:	10c002c5 	stb	r3,11(r2)
  desc->next                     = (alt_u32 *) next;
   81fd8:	e0bffa17 	ldw	r2,-24(fp)
   81fdc:	e0fffb17 	ldw	r3,-20(fp)
   81fe0:	19403fcc 	andi	r5,r3,255
   81fe4:	10c00403 	ldbu	r3,16(r2)
   81fe8:	1806703a 	and	r3,r3,zero
   81fec:	1809883a 	mov	r4,r3
   81ff0:	2807883a 	mov	r3,r5
   81ff4:	20c6b03a 	or	r3,r4,r3
   81ff8:	10c00405 	stb	r3,16(r2)
   81ffc:	e0fffb17 	ldw	r3,-20(fp)
   82000:	1806d23a 	srli	r3,r3,8
   82004:	19403fcc 	andi	r5,r3,255
   82008:	10c00443 	ldbu	r3,17(r2)
   8200c:	1806703a 	and	r3,r3,zero
   82010:	1809883a 	mov	r4,r3
   82014:	2807883a 	mov	r3,r5
   82018:	20c6b03a 	or	r3,r4,r3
   8201c:	10c00445 	stb	r3,17(r2)
   82020:	e0fffb17 	ldw	r3,-20(fp)
   82024:	1806d43a 	srli	r3,r3,16
   82028:	19403fcc 	andi	r5,r3,255
   8202c:	10c00483 	ldbu	r3,18(r2)
   82030:	1806703a 	and	r3,r3,zero
   82034:	1809883a 	mov	r4,r3
   82038:	2807883a 	mov	r3,r5
   8203c:	20c6b03a 	or	r3,r4,r3
   82040:	10c00485 	stb	r3,18(r2)
   82044:	e0fffb17 	ldw	r3,-20(fp)
   82048:	180ad63a 	srli	r5,r3,24
   8204c:	10c004c3 	ldbu	r3,19(r2)
   82050:	1806703a 	and	r3,r3,zero
   82054:	1809883a 	mov	r4,r3
   82058:	2807883a 	mov	r3,r5
   8205c:	20c6b03a 	or	r3,r4,r3
   82060:	10c004c5 	stb	r3,19(r2)
  desc->read_addr_pad            = 0x0;
   82064:	e0bffa17 	ldw	r2,-24(fp)
   82068:	10c00103 	ldbu	r3,4(r2)
   8206c:	1806703a 	and	r3,r3,zero
   82070:	10c00105 	stb	r3,4(r2)
   82074:	10c00143 	ldbu	r3,5(r2)
   82078:	1806703a 	and	r3,r3,zero
   8207c:	10c00145 	stb	r3,5(r2)
   82080:	10c00183 	ldbu	r3,6(r2)
   82084:	1806703a 	and	r3,r3,zero
   82088:	10c00185 	stb	r3,6(r2)
   8208c:	10c001c3 	ldbu	r3,7(r2)
   82090:	1806703a 	and	r3,r3,zero
   82094:	10c001c5 	stb	r3,7(r2)
  desc->write_addr_pad           = 0x0;
   82098:	e0bffa17 	ldw	r2,-24(fp)
   8209c:	10c00303 	ldbu	r3,12(r2)
   820a0:	1806703a 	and	r3,r3,zero
   820a4:	10c00305 	stb	r3,12(r2)
   820a8:	10c00343 	ldbu	r3,13(r2)
   820ac:	1806703a 	and	r3,r3,zero
   820b0:	10c00345 	stb	r3,13(r2)
   820b4:	10c00383 	ldbu	r3,14(r2)
   820b8:	1806703a 	and	r3,r3,zero
   820bc:	10c00385 	stb	r3,14(r2)
   820c0:	10c003c3 	ldbu	r3,15(r2)
   820c4:	1806703a 	and	r3,r3,zero
   820c8:	10c003c5 	stb	r3,15(r2)
  desc->next_pad                 = 0x0;
   820cc:	e0bffa17 	ldw	r2,-24(fp)
   820d0:	10c00503 	ldbu	r3,20(r2)
   820d4:	1806703a 	and	r3,r3,zero
   820d8:	10c00505 	stb	r3,20(r2)
   820dc:	10c00543 	ldbu	r3,21(r2)
   820e0:	1806703a 	and	r3,r3,zero
   820e4:	10c00545 	stb	r3,21(r2)
   820e8:	10c00583 	ldbu	r3,22(r2)
   820ec:	1806703a 	and	r3,r3,zero
   820f0:	10c00585 	stb	r3,22(r2)
   820f4:	10c005c3 	ldbu	r3,23(r2)
   820f8:	1806703a 	and	r3,r3,zero
   820fc:	10c005c5 	stb	r3,23(r2)
  desc->bytes_to_transfer        = length_or_eop;
   82100:	e0bffa17 	ldw	r2,-24(fp)
   82104:	e0fffe17 	ldw	r3,-8(fp)
   82108:	19403fcc 	andi	r5,r3,255
   8210c:	10c00603 	ldbu	r3,24(r2)
   82110:	1806703a 	and	r3,r3,zero
   82114:	1809883a 	mov	r4,r3
   82118:	2807883a 	mov	r3,r5
   8211c:	20c6b03a 	or	r3,r4,r3
   82120:	10c00605 	stb	r3,24(r2)
   82124:	e0fffe17 	ldw	r3,-8(fp)
   82128:	1806d23a 	srli	r3,r3,8
   8212c:	19403fcc 	andi	r5,r3,255
   82130:	10c00643 	ldbu	r3,25(r2)
   82134:	1806703a 	and	r3,r3,zero
   82138:	1809883a 	mov	r4,r3
   8213c:	2807883a 	mov	r3,r5
   82140:	20c6b03a 	or	r3,r4,r3
   82144:	10c00645 	stb	r3,25(r2)
  desc->actual_bytes_transferred = 0;
   82148:	e0bffa17 	ldw	r2,-24(fp)
   8214c:	10c00703 	ldbu	r3,28(r2)
   82150:	1806703a 	and	r3,r3,zero
   82154:	10c00705 	stb	r3,28(r2)
   82158:	10c00743 	ldbu	r3,29(r2)
   8215c:	1806703a 	and	r3,r3,zero
   82160:	10c00745 	stb	r3,29(r2)
  desc->status                   = 0x0;
   82164:	e0bffa17 	ldw	r2,-24(fp)
   82168:	10000785 	stb	zero,30(r2)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
   8216c:	e0800617 	ldw	r2,24(fp)
   82170:	1007883a 	mov	r3,r2
   82174:	e0bffa17 	ldw	r2,-24(fp)
   82178:	10c00685 	stb	r3,26(r2)
  desc->write_burst              = write_burst;
   8217c:	e0800717 	ldw	r2,28(fp)
   82180:	1007883a 	mov	r3,r2
   82184:	e0bffa17 	ldw	r2,-24(fp)
   82188:	10c006c5 	stb	r3,27(r2)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
   8218c:	e0800317 	ldw	r2,12(fp)
   82190:	10000226 	beq	r2,zero,8219c <alt_avalon_sgdma_construct_descriptor_burst+0x32c>
   82194:	00bfe044 	movi	r2,-127
   82198:	00000106 	br	821a0 <alt_avalon_sgdma_construct_descriptor_burst+0x330>
   8219c:	00bfe004 	movi	r2,-128
   821a0:	e0c00417 	ldw	r3,16(fp)
   821a4:	18000226 	beq	r3,zero,821b0 <alt_avalon_sgdma_construct_descriptor_burst+0x340>
   821a8:	00c00084 	movi	r3,2
   821ac:	00000106 	br	821b4 <alt_avalon_sgdma_construct_descriptor_burst+0x344>
   821b0:	0007883a 	mov	r3,zero
   821b4:	10c4b03a 	or	r2,r2,r3
   821b8:	1007883a 	mov	r3,r2
   821bc:	e0800517 	ldw	r2,20(fp)
   821c0:	10000226 	beq	r2,zero,821cc <alt_avalon_sgdma_construct_descriptor_burst+0x35c>
   821c4:	00800104 	movi	r2,4
   821c8:	00000106 	br	821d0 <alt_avalon_sgdma_construct_descriptor_burst+0x360>
   821cc:	0005883a 	mov	r2,zero
   821d0:	1884b03a 	or	r2,r3,r2
   821d4:	1007883a 	mov	r3,r2
   821d8:	e0bfff03 	ldbu	r2,-4(fp)
   821dc:	10000426 	beq	r2,zero,821f0 <alt_avalon_sgdma_construct_descriptor_burst+0x380>
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_GENERATE_EOP_MSK : 0x0)        |
    (read_fixed ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_READ_FIXED_ADDRESS_MSK : 0x0)  |
    (write_fixed_or_sop ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_WRITE_FIXED_ADDRESS_MSK : 0x0) |
    (atlantic_channel ? ( (atlantic_channel & 0x0F) << 3) : 0)
   821e0:	e0bfff03 	ldbu	r2,-4(fp)
   821e4:	108003cc 	andi	r2,r2,15
   821e8:	100490fa 	slli	r2,r2,3
   821ec:	00000106 	br	821f4 <alt_avalon_sgdma_construct_descriptor_burst+0x384>
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
   821f0:	0005883a 	mov	r2,zero
   821f4:	1884b03a 	or	r2,r3,r2
   821f8:	1007883a 	mov	r3,r2
   821fc:	e0bffa17 	ldw	r2,-24(fp)
   82200:	10c007c5 	stb	r3,31(r2)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
   82204:	e13ffa17 	ldw	r4,-24(fp)
   82208:	01400804 	movi	r5,32
   8220c:	00825e00 	call	825e0 <alt_dcache_flush>
}
   82210:	e037883a 	mov	sp,fp
   82214:	dfc00117 	ldw	ra,4(sp)
   82218:	df000017 	ldw	fp,0(sp)
   8221c:	dec00204 	addi	sp,sp,8
   82220:	f800283a 	ret

00082224 <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
   82224:	defff904 	addi	sp,sp,-28
   82228:	dfc00615 	stw	ra,24(sp)
   8222c:	df000515 	stw	fp,20(sp)
   82230:	df000504 	addi	fp,sp,20
   82234:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev *dev = (alt_sgdma_dev *) context;
   82238:	e0bfff17 	ldw	r2,-4(fp)
   8223c:	e0bffb15 	stw	r2,-20(fp)
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
   82240:	e0bffb17 	ldw	r2,-20(fp)
   82244:	10800317 	ldw	r2,12(r2)
   82248:	10800404 	addi	r2,r2,16
   8224c:	e0fffb17 	ldw	r3,-20(fp)
   82250:	18c00317 	ldw	r3,12(r3)
   82254:	18c00404 	addi	r3,r3,16
   82258:	18c00037 	ldwio	r3,0(r3)
   8225c:	18e00034 	orhi	r3,r3,32768
   82260:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   82264:	e0bffb17 	ldw	r2,-20(fp)
   82268:	10800317 	ldw	r2,12(r2)
   8226c:	10800404 	addi	r2,r2,16
   82270:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
   82274:	e0bffb17 	ldw	r2,-20(fp)
   82278:	10800917 	ldw	r2,36(r2)
   8227c:	10001226 	beq	r2,zero,822c8 <alt_avalon_sgdma_irq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   82280:	0005303a 	rdctl	r2,status
   82284:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   82288:	e0fffd17 	ldw	r3,-12(fp)
   8228c:	00bfff84 	movi	r2,-2
   82290:	1884703a 	and	r2,r3,r2
   82294:	1001703a 	wrctl	status,r2
  
  return context;
   82298:	e0bffd17 	ldw	r2,-12(fp)
    cpu_sr = alt_irq_disable_all();
   8229c:	e0bffc15 	stw	r2,-16(fp)
    (dev->callback)(dev->callback_context);
   822a0:	e0bffb17 	ldw	r2,-20(fp)
   822a4:	10800917 	ldw	r2,36(r2)
   822a8:	e0fffb17 	ldw	r3,-20(fp)
   822ac:	18c00a17 	ldw	r3,40(r3)
   822b0:	1809883a 	mov	r4,r3
   822b4:	103ee83a 	callr	r2
   822b8:	e0bffc17 	ldw	r2,-16(fp)
   822bc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   822c0:	e0bffe17 	ldw	r2,-8(fp)
   822c4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
   822c8:	e037883a 	mov	sp,fp
   822cc:	dfc00117 	ldw	ra,4(sp)
   822d0:	df000017 	ldw	fp,0(sp)
   822d4:	dec00204 	addi	sp,sp,8
   822d8:	f800283a 	ret

000822dc <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
   822dc:	defffa04 	addi	sp,sp,-24
   822e0:	dfc00515 	stw	ra,20(sp)
   822e4:	df000415 	stw	fp,16(sp)
   822e8:	df000404 	addi	fp,sp,16
   822ec:	e13ffd15 	stw	r4,-12(fp)
   822f0:	e17ffe15 	stw	r5,-8(fp)
   822f4:	e1bfff15 	stw	r6,-4(fp)

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   822f8:	e0bffd17 	ldw	r2,-12(fp)
   822fc:	10800317 	ldw	r2,12(r2)
   82300:	10800404 	addi	r2,r2,16
   82304:	00c00074 	movhi	r3,1
   82308:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   8230c:	e0bffd17 	ldw	r2,-12(fp)
   82310:	10800317 	ldw	r2,12(r2)
   82314:	10800404 	addi	r2,r2,16
   82318:	00c00074 	movhi	r3,1
   8231c:	10c00035 	stwio	r3,0(r2)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
   82320:	e0bffd17 	ldw	r2,-12(fp)
   82324:	10800317 	ldw	r2,12(r2)
   82328:	10800404 	addi	r2,r2,16
   8232c:	0007883a 	mov	r3,zero
   82330:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   82334:	e0bffd17 	ldw	r2,-12(fp)
   82338:	10800317 	ldw	r2,12(r2)
   8233c:	00c03fc4 	movi	r3,255
   82340:	10c00035 	stwio	r3,0(r2)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
   82344:	e13ffd17 	ldw	r4,-12(fp)
   82348:	d1600004 	addi	r5,gp,-32768
   8234c:	00827140 	call	82714 <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
   82350:	d8000015 	stw	zero,0(sp)
   82354:	e13ffe17 	ldw	r4,-8(fp)
   82358:	e17fff17 	ldw	r5,-4(fp)
   8235c:	01800234 	movhi	r6,8
   82360:	31888904 	addi	r6,r6,8740
   82364:	e1fffd17 	ldw	r7,-12(fp)
   82368:	00829300 	call	82930 <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
   8236c:	e037883a 	mov	sp,fp
   82370:	dfc00117 	ldw	ra,4(sp)
   82374:	df000017 	ldw	fp,0(sp)
   82378:	dec00204 	addi	sp,sp,8
   8237c:	f800283a 	ret

00082380 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   82380:	defff504 	addi	sp,sp,-44
   82384:	df000a15 	stw	fp,40(sp)
   82388:	df000a04 	addi	fp,sp,40
   8238c:	e13ffc15 	stw	r4,-16(fp)
   82390:	e17ffd15 	stw	r5,-12(fp)
   82394:	e1bffe15 	stw	r6,-8(fp)
   82398:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   8239c:	e03ff615 	stw	zero,-40(fp)
   823a0:	00800274 	movhi	r2,9
   823a4:	10a5c404 	addi	r2,r2,-26864
   823a8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   823ac:	10003f26 	beq	r2,zero,824ac <alt_alarm_start+0x12c>
  {
    if (alarm)
   823b0:	e0bffc17 	ldw	r2,-16(fp)
   823b4:	10003b26 	beq	r2,zero,824a4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   823b8:	e0bffc17 	ldw	r2,-16(fp)
   823bc:	e0fffe17 	ldw	r3,-8(fp)
   823c0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   823c4:	e0bffc17 	ldw	r2,-16(fp)
   823c8:	e0ffff17 	ldw	r3,-4(fp)
   823cc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   823d0:	0005303a 	rdctl	r2,status
   823d4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   823d8:	e0fff817 	ldw	r3,-32(fp)
   823dc:	00bfff84 	movi	r2,-2
   823e0:	1884703a 	and	r2,r3,r2
   823e4:	1001703a 	wrctl	status,r2
  
  return context;
   823e8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   823ec:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   823f0:	00800274 	movhi	r2,9
   823f4:	10a5c504 	addi	r2,r2,-26860
   823f8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   823fc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   82400:	e0fffd17 	ldw	r3,-12(fp)
   82404:	e0bff617 	ldw	r2,-40(fp)
   82408:	1885883a 	add	r2,r3,r2
   8240c:	10c00044 	addi	r3,r2,1
   82410:	e0bffc17 	ldw	r2,-16(fp)
   82414:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   82418:	e0bffc17 	ldw	r2,-16(fp)
   8241c:	10c00217 	ldw	r3,8(r2)
   82420:	e0bff617 	ldw	r2,-40(fp)
   82424:	1880042e 	bgeu	r3,r2,82438 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   82428:	e0bffc17 	ldw	r2,-16(fp)
   8242c:	00c00044 	movi	r3,1
   82430:	10c00405 	stb	r3,16(r2)
   82434:	00000206 	br	82440 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   82438:	e0bffc17 	ldw	r2,-16(fp)
   8243c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   82440:	e0fffc17 	ldw	r3,-16(fp)
   82444:	00800234 	movhi	r2,8
   82448:	109f0004 	addi	r2,r2,31744
   8244c:	e0bff915 	stw	r2,-28(fp)
   82450:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   82454:	e0bffa17 	ldw	r2,-24(fp)
   82458:	e0fff917 	ldw	r3,-28(fp)
   8245c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   82460:	e0bff917 	ldw	r2,-28(fp)
   82464:	10c00017 	ldw	r3,0(r2)
   82468:	e0bffa17 	ldw	r2,-24(fp)
   8246c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   82470:	e0bff917 	ldw	r2,-28(fp)
   82474:	10800017 	ldw	r2,0(r2)
   82478:	e0fffa17 	ldw	r3,-24(fp)
   8247c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   82480:	e0bff917 	ldw	r2,-28(fp)
   82484:	e0fffa17 	ldw	r3,-24(fp)
   82488:	10c00015 	stw	r3,0(r2)
   8248c:	e0bff717 	ldw	r2,-36(fp)
   82490:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   82494:	e0bffb17 	ldw	r2,-20(fp)
   82498:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   8249c:	0005883a 	mov	r2,zero
   824a0:	00000306 	br	824b0 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   824a4:	00bffa84 	movi	r2,-22
   824a8:	00000106 	br	824b0 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   824ac:	00bfde84 	movi	r2,-134
  }
}
   824b0:	e037883a 	mov	sp,fp
   824b4:	df000017 	ldw	fp,0(sp)
   824b8:	dec00104 	addi	sp,sp,4
   824bc:	f800283a 	ret

000824c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   824c0:	defffe04 	addi	sp,sp,-8
   824c4:	dfc00115 	stw	ra,4(sp)
   824c8:	df000015 	stw	fp,0(sp)
   824cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   824d0:	00800234 	movhi	r2,8
   824d4:	109efe04 	addi	r2,r2,31736
   824d8:	10800017 	ldw	r2,0(r2)
   824dc:	10000526 	beq	r2,zero,824f4 <alt_get_errno+0x34>
   824e0:	00800234 	movhi	r2,8
   824e4:	109efe04 	addi	r2,r2,31736
   824e8:	10800017 	ldw	r2,0(r2)
   824ec:	103ee83a 	callr	r2
   824f0:	00000206 	br	824fc <alt_get_errno+0x3c>
   824f4:	00800274 	movhi	r2,9
   824f8:	10a5c704 	addi	r2,r2,-26852
}
   824fc:	e037883a 	mov	sp,fp
   82500:	dfc00117 	ldw	ra,4(sp)
   82504:	df000017 	ldw	fp,0(sp)
   82508:	dec00204 	addi	sp,sp,8
   8250c:	f800283a 	ret

00082510 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   82510:	defffb04 	addi	sp,sp,-20
   82514:	dfc00415 	stw	ra,16(sp)
   82518:	df000315 	stw	fp,12(sp)
   8251c:	df000304 	addi	fp,sp,12
   82520:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   82524:	e0bfff17 	ldw	r2,-4(fp)
   82528:	10000616 	blt	r2,zero,82544 <close+0x34>
   8252c:	e0bfff17 	ldw	r2,-4(fp)
   82530:	10c00324 	muli	r3,r2,12
   82534:	00800234 	movhi	r2,8
   82538:	109c8c04 	addi	r2,r2,29232
   8253c:	1885883a 	add	r2,r3,r2
   82540:	00000106 	br	82548 <close+0x38>
   82544:	0005883a 	mov	r2,zero
   82548:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   8254c:	e0bffd17 	ldw	r2,-12(fp)
   82550:	10001926 	beq	r2,zero,825b8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   82554:	e0bffd17 	ldw	r2,-12(fp)
   82558:	10800017 	ldw	r2,0(r2)
   8255c:	10800417 	ldw	r2,16(r2)
   82560:	10000626 	beq	r2,zero,8257c <close+0x6c>
   82564:	e0bffd17 	ldw	r2,-12(fp)
   82568:	10800017 	ldw	r2,0(r2)
   8256c:	10800417 	ldw	r2,16(r2)
   82570:	e13ffd17 	ldw	r4,-12(fp)
   82574:	103ee83a 	callr	r2
   82578:	00000106 	br	82580 <close+0x70>
   8257c:	0005883a 	mov	r2,zero
   82580:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   82584:	e13fff17 	ldw	r4,-4(fp)
   82588:	0082fac0 	call	82fac <alt_release_fd>
    if (rval < 0)
   8258c:	e0bffe17 	ldw	r2,-8(fp)
   82590:	1000070e 	bge	r2,zero,825b0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   82594:	00824c00 	call	824c0 <alt_get_errno>
   82598:	1007883a 	mov	r3,r2
   8259c:	e0bffe17 	ldw	r2,-8(fp)
   825a0:	0085c83a 	sub	r2,zero,r2
   825a4:	18800015 	stw	r2,0(r3)
      return -1;
   825a8:	00bfffc4 	movi	r2,-1
   825ac:	00000706 	br	825cc <close+0xbc>
    }
    return 0;
   825b0:	0005883a 	mov	r2,zero
   825b4:	00000506 	br	825cc <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   825b8:	00824c00 	call	824c0 <alt_get_errno>
   825bc:	1007883a 	mov	r3,r2
   825c0:	00801444 	movi	r2,81
   825c4:	18800015 	stw	r2,0(r3)
    return -1;
   825c8:	00bfffc4 	movi	r2,-1
  }
}
   825cc:	e037883a 	mov	sp,fp
   825d0:	dfc00117 	ldw	ra,4(sp)
   825d4:	df000017 	ldw	fp,0(sp)
   825d8:	dec00204 	addi	sp,sp,8
   825dc:	f800283a 	ret

000825e0 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
   825e0:	defffb04 	addi	sp,sp,-20
   825e4:	df000415 	stw	fp,16(sp)
   825e8:	df000404 	addi	fp,sp,16
   825ec:	e13ffe15 	stw	r4,-8(fp)
   825f0:	e17fff15 	stw	r5,-4(fp)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
   825f4:	e0fffe17 	ldw	r3,-8(fp)
   825f8:	e0bfff17 	ldw	r2,-4(fp)
   825fc:	1885883a 	add	r2,r3,r2
   82600:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   82604:	e0bffe17 	ldw	r2,-8(fp)
   82608:	e0bffc15 	stw	r2,-16(fp)
   8260c:	00000506 	br	82624 <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
   82610:	e0bffc17 	ldw	r2,-16(fp)
   82614:	1000001b 	flushda	0(r2)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   82618:	e0bffc17 	ldw	r2,-16(fp)
   8261c:	10800804 	addi	r2,r2,32
   82620:	e0bffc15 	stw	r2,-16(fp)
   82624:	e0fffc17 	ldw	r3,-16(fp)
   82628:	e0bffd17 	ldw	r2,-12(fp)
   8262c:	18bff836 	bltu	r3,r2,82610 <rx_descriptor_end+0xfff825b0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
   82630:	e0bffe17 	ldw	r2,-8(fp)
   82634:	108007cc 	andi	r2,r2,31
   82638:	10000226 	beq	r2,zero,82644 <alt_dcache_flush+0x64>
  {
    ALT_FLUSH_DATA(i);
   8263c:	e0bffc17 	ldw	r2,-16(fp)
   82640:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   82644:	e037883a 	mov	sp,fp
   82648:	df000017 	ldw	fp,0(sp)
   8264c:	dec00104 	addi	sp,sp,4
   82650:	f800283a 	ret

00082654 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   82654:	defffe04 	addi	sp,sp,-8
   82658:	df000115 	stw	fp,4(sp)
   8265c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   82660:	e03fff15 	stw	zero,-4(fp)
   82664:	00000506 	br	8267c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   82668:	e0bfff17 	ldw	r2,-4(fp)
   8266c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   82670:	e0bfff17 	ldw	r2,-4(fp)
   82674:	10800804 	addi	r2,r2,32
   82678:	e0bfff15 	stw	r2,-4(fp)
   8267c:	e0bfff17 	ldw	r2,-4(fp)
   82680:	10820030 	cmpltui	r2,r2,2048
   82684:	103ff81e 	bne	r2,zero,82668 <rx_descriptor_end+0xfff82608>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   82688:	e037883a 	mov	sp,fp
   8268c:	df000017 	ldw	fp,0(sp)
   82690:	dec00104 	addi	sp,sp,4
   82694:	f800283a 	ret

00082698 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   82698:	defffc04 	addi	sp,sp,-16
   8269c:	df000315 	stw	fp,12(sp)
   826a0:	df000304 	addi	fp,sp,12
   826a4:	e13ffd15 	stw	r4,-12(fp)
   826a8:	e17ffe15 	stw	r5,-8(fp)
   826ac:	e1bfff15 	stw	r6,-4(fp)
  return len;
   826b0:	e0bfff17 	ldw	r2,-4(fp)
}
   826b4:	e037883a 	mov	sp,fp
   826b8:	df000017 	ldw	fp,0(sp)
   826bc:	dec00104 	addi	sp,sp,4
   826c0:	f800283a 	ret

000826c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   826c4:	defffe04 	addi	sp,sp,-8
   826c8:	dfc00115 	stw	ra,4(sp)
   826cc:	df000015 	stw	fp,0(sp)
   826d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   826d4:	00800234 	movhi	r2,8
   826d8:	109efe04 	addi	r2,r2,31736
   826dc:	10800017 	ldw	r2,0(r2)
   826e0:	10000526 	beq	r2,zero,826f8 <alt_get_errno+0x34>
   826e4:	00800234 	movhi	r2,8
   826e8:	109efe04 	addi	r2,r2,31736
   826ec:	10800017 	ldw	r2,0(r2)
   826f0:	103ee83a 	callr	r2
   826f4:	00000206 	br	82700 <alt_get_errno+0x3c>
   826f8:	00800274 	movhi	r2,9
   826fc:	10a5c704 	addi	r2,r2,-26852
}
   82700:	e037883a 	mov	sp,fp
   82704:	dfc00117 	ldw	ra,4(sp)
   82708:	df000017 	ldw	fp,0(sp)
   8270c:	dec00204 	addi	sp,sp,8
   82710:	f800283a 	ret

00082714 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   82714:	defffa04 	addi	sp,sp,-24
   82718:	dfc00515 	stw	ra,20(sp)
   8271c:	df000415 	stw	fp,16(sp)
   82720:	df000404 	addi	fp,sp,16
   82724:	e13ffe15 	stw	r4,-8(fp)
   82728:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   8272c:	e0bffe17 	ldw	r2,-8(fp)
   82730:	10000326 	beq	r2,zero,82740 <alt_dev_llist_insert+0x2c>
   82734:	e0bffe17 	ldw	r2,-8(fp)
   82738:	10800217 	ldw	r2,8(r2)
   8273c:	1000061e 	bne	r2,zero,82758 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   82740:	00826c40 	call	826c4 <alt_get_errno>
   82744:	1007883a 	mov	r3,r2
   82748:	00800584 	movi	r2,22
   8274c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   82750:	00bffa84 	movi	r2,-22
   82754:	00001306 	br	827a4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   82758:	e0bffe17 	ldw	r2,-8(fp)
   8275c:	e0ffff17 	ldw	r3,-4(fp)
   82760:	e0fffc15 	stw	r3,-16(fp)
   82764:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   82768:	e0bffd17 	ldw	r2,-12(fp)
   8276c:	e0fffc17 	ldw	r3,-16(fp)
   82770:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   82774:	e0bffc17 	ldw	r2,-16(fp)
   82778:	10c00017 	ldw	r3,0(r2)
   8277c:	e0bffd17 	ldw	r2,-12(fp)
   82780:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   82784:	e0bffc17 	ldw	r2,-16(fp)
   82788:	10800017 	ldw	r2,0(r2)
   8278c:	e0fffd17 	ldw	r3,-12(fp)
   82790:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   82794:	e0bffc17 	ldw	r2,-16(fp)
   82798:	e0fffd17 	ldw	r3,-12(fp)
   8279c:	10c00015 	stw	r3,0(r2)

  return 0;  
   827a0:	0005883a 	mov	r2,zero
}
   827a4:	e037883a 	mov	sp,fp
   827a8:	dfc00117 	ldw	ra,4(sp)
   827ac:	df000017 	ldw	fp,0(sp)
   827b0:	dec00204 	addi	sp,sp,8
   827b4:	f800283a 	ret

000827b8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   827b8:	defffd04 	addi	sp,sp,-12
   827bc:	dfc00215 	stw	ra,8(sp)
   827c0:	df000115 	stw	fp,4(sp)
   827c4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   827c8:	00800234 	movhi	r2,8
   827cc:	1097e104 	addi	r2,r2,24452
   827d0:	e0bfff15 	stw	r2,-4(fp)
   827d4:	00000606 	br	827f0 <_do_ctors+0x38>
        (*ctor) (); 
   827d8:	e0bfff17 	ldw	r2,-4(fp)
   827dc:	10800017 	ldw	r2,0(r2)
   827e0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   827e4:	e0bfff17 	ldw	r2,-4(fp)
   827e8:	10bfff04 	addi	r2,r2,-4
   827ec:	e0bfff15 	stw	r2,-4(fp)
   827f0:	e0ffff17 	ldw	r3,-4(fp)
   827f4:	00800234 	movhi	r2,8
   827f8:	1097e204 	addi	r2,r2,24456
   827fc:	18bff62e 	bgeu	r3,r2,827d8 <rx_descriptor_end+0xfff82778>
        (*ctor) (); 
}
   82800:	e037883a 	mov	sp,fp
   82804:	dfc00117 	ldw	ra,4(sp)
   82808:	df000017 	ldw	fp,0(sp)
   8280c:	dec00204 	addi	sp,sp,8
   82810:	f800283a 	ret

00082814 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   82814:	defffd04 	addi	sp,sp,-12
   82818:	dfc00215 	stw	ra,8(sp)
   8281c:	df000115 	stw	fp,4(sp)
   82820:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   82824:	00800234 	movhi	r2,8
   82828:	1097e104 	addi	r2,r2,24452
   8282c:	e0bfff15 	stw	r2,-4(fp)
   82830:	00000606 	br	8284c <_do_dtors+0x38>
        (*dtor) (); 
   82834:	e0bfff17 	ldw	r2,-4(fp)
   82838:	10800017 	ldw	r2,0(r2)
   8283c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   82840:	e0bfff17 	ldw	r2,-4(fp)
   82844:	10bfff04 	addi	r2,r2,-4
   82848:	e0bfff15 	stw	r2,-4(fp)
   8284c:	e0ffff17 	ldw	r3,-4(fp)
   82850:	00800234 	movhi	r2,8
   82854:	1097e204 	addi	r2,r2,24456
   82858:	18bff62e 	bgeu	r3,r2,82834 <rx_descriptor_end+0xfff827d4>
        (*dtor) (); 
}
   8285c:	e037883a 	mov	sp,fp
   82860:	dfc00117 	ldw	ra,4(sp)
   82864:	df000017 	ldw	fp,0(sp)
   82868:	dec00204 	addi	sp,sp,8
   8286c:	f800283a 	ret

00082870 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   82870:	defffa04 	addi	sp,sp,-24
   82874:	dfc00515 	stw	ra,20(sp)
   82878:	df000415 	stw	fp,16(sp)
   8287c:	df000404 	addi	fp,sp,16
   82880:	e13ffe15 	stw	r4,-8(fp)
   82884:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   82888:	e0bfff17 	ldw	r2,-4(fp)
   8288c:	10800017 	ldw	r2,0(r2)
   82890:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   82894:	e13ffe17 	ldw	r4,-8(fp)
   82898:	00838200 	call	83820 <strlen>
   8289c:	10800044 	addi	r2,r2,1
   828a0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   828a4:	00000d06 	br	828dc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   828a8:	e0bffc17 	ldw	r2,-16(fp)
   828ac:	10c00217 	ldw	r3,8(r2)
   828b0:	e0bffd17 	ldw	r2,-12(fp)
   828b4:	1809883a 	mov	r4,r3
   828b8:	e17ffe17 	ldw	r5,-8(fp)
   828bc:	100d883a 	mov	r6,r2
   828c0:	00835040 	call	83504 <memcmp>
   828c4:	1000021e 	bne	r2,zero,828d0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   828c8:	e0bffc17 	ldw	r2,-16(fp)
   828cc:	00000706 	br	828ec <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   828d0:	e0bffc17 	ldw	r2,-16(fp)
   828d4:	10800017 	ldw	r2,0(r2)
   828d8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   828dc:	e0fffc17 	ldw	r3,-16(fp)
   828e0:	e0bfff17 	ldw	r2,-4(fp)
   828e4:	18bff01e 	bne	r3,r2,828a8 <rx_descriptor_end+0xfff82848>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   828e8:	0005883a 	mov	r2,zero
}
   828ec:	e037883a 	mov	sp,fp
   828f0:	dfc00117 	ldw	ra,4(sp)
   828f4:	df000017 	ldw	fp,0(sp)
   828f8:	dec00204 	addi	sp,sp,8
   828fc:	f800283a 	ret

00082900 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   82900:	defffe04 	addi	sp,sp,-8
   82904:	dfc00115 	stw	ra,4(sp)
   82908:	df000015 	stw	fp,0(sp)
   8290c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   82910:	0009883a 	mov	r4,zero
   82914:	01440004 	movi	r5,4096
   82918:	00833900 	call	83390 <alt_icache_flush>
#endif
}
   8291c:	e037883a 	mov	sp,fp
   82920:	dfc00117 	ldw	ra,4(sp)
   82924:	df000017 	ldw	fp,0(sp)
   82928:	dec00204 	addi	sp,sp,8
   8292c:	f800283a 	ret

00082930 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   82930:	defff904 	addi	sp,sp,-28
   82934:	dfc00615 	stw	ra,24(sp)
   82938:	df000515 	stw	fp,20(sp)
   8293c:	df000504 	addi	fp,sp,20
   82940:	e13ffc15 	stw	r4,-16(fp)
   82944:	e17ffd15 	stw	r5,-12(fp)
   82948:	e1bffe15 	stw	r6,-8(fp)
   8294c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   82950:	e0800217 	ldw	r2,8(fp)
   82954:	d8800015 	stw	r2,0(sp)
   82958:	e13ffc17 	ldw	r4,-16(fp)
   8295c:	e17ffd17 	ldw	r5,-12(fp)
   82960:	e1bffe17 	ldw	r6,-8(fp)
   82964:	e1ffff17 	ldw	r7,-4(fp)
   82968:	0082b100 	call	82b10 <alt_iic_isr_register>
}  
   8296c:	e037883a 	mov	sp,fp
   82970:	dfc00117 	ldw	ra,4(sp)
   82974:	df000017 	ldw	fp,0(sp)
   82978:	dec00204 	addi	sp,sp,8
   8297c:	f800283a 	ret

00082980 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   82980:	defff904 	addi	sp,sp,-28
   82984:	df000615 	stw	fp,24(sp)
   82988:	df000604 	addi	fp,sp,24
   8298c:	e13ffe15 	stw	r4,-8(fp)
   82990:	e17fff15 	stw	r5,-4(fp)
   82994:	e0bfff17 	ldw	r2,-4(fp)
   82998:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8299c:	0005303a 	rdctl	r2,status
   829a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   829a4:	e0fffb17 	ldw	r3,-20(fp)
   829a8:	00bfff84 	movi	r2,-2
   829ac:	1884703a 	and	r2,r3,r2
   829b0:	1001703a 	wrctl	status,r2
  
  return context;
   829b4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   829b8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   829bc:	e0bffa17 	ldw	r2,-24(fp)
   829c0:	00c00044 	movi	r3,1
   829c4:	1884983a 	sll	r2,r3,r2
   829c8:	1007883a 	mov	r3,r2
   829cc:	00800274 	movhi	r2,9
   829d0:	10a5c304 	addi	r2,r2,-26868
   829d4:	10800017 	ldw	r2,0(r2)
   829d8:	1886b03a 	or	r3,r3,r2
   829dc:	00800274 	movhi	r2,9
   829e0:	10a5c304 	addi	r2,r2,-26868
   829e4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   829e8:	00800274 	movhi	r2,9
   829ec:	10a5c304 	addi	r2,r2,-26868
   829f0:	10800017 	ldw	r2,0(r2)
   829f4:	100170fa 	wrctl	ienable,r2
   829f8:	e0bffc17 	ldw	r2,-16(fp)
   829fc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   82a00:	e0bffd17 	ldw	r2,-12(fp)
   82a04:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   82a08:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   82a0c:	0001883a 	nop
}
   82a10:	e037883a 	mov	sp,fp
   82a14:	df000017 	ldw	fp,0(sp)
   82a18:	dec00104 	addi	sp,sp,4
   82a1c:	f800283a 	ret

00082a20 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   82a20:	defff904 	addi	sp,sp,-28
   82a24:	df000615 	stw	fp,24(sp)
   82a28:	df000604 	addi	fp,sp,24
   82a2c:	e13ffe15 	stw	r4,-8(fp)
   82a30:	e17fff15 	stw	r5,-4(fp)
   82a34:	e0bfff17 	ldw	r2,-4(fp)
   82a38:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   82a3c:	0005303a 	rdctl	r2,status
   82a40:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   82a44:	e0fffb17 	ldw	r3,-20(fp)
   82a48:	00bfff84 	movi	r2,-2
   82a4c:	1884703a 	and	r2,r3,r2
   82a50:	1001703a 	wrctl	status,r2
  
  return context;
   82a54:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   82a58:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   82a5c:	e0bffa17 	ldw	r2,-24(fp)
   82a60:	00c00044 	movi	r3,1
   82a64:	1884983a 	sll	r2,r3,r2
   82a68:	0084303a 	nor	r2,zero,r2
   82a6c:	1007883a 	mov	r3,r2
   82a70:	00800274 	movhi	r2,9
   82a74:	10a5c304 	addi	r2,r2,-26868
   82a78:	10800017 	ldw	r2,0(r2)
   82a7c:	1886703a 	and	r3,r3,r2
   82a80:	00800274 	movhi	r2,9
   82a84:	10a5c304 	addi	r2,r2,-26868
   82a88:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   82a8c:	00800274 	movhi	r2,9
   82a90:	10a5c304 	addi	r2,r2,-26868
   82a94:	10800017 	ldw	r2,0(r2)
   82a98:	100170fa 	wrctl	ienable,r2
   82a9c:	e0bffc17 	ldw	r2,-16(fp)
   82aa0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   82aa4:	e0bffd17 	ldw	r2,-12(fp)
   82aa8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   82aac:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   82ab0:	0001883a 	nop
}
   82ab4:	e037883a 	mov	sp,fp
   82ab8:	df000017 	ldw	fp,0(sp)
   82abc:	dec00104 	addi	sp,sp,4
   82ac0:	f800283a 	ret

00082ac4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   82ac4:	defffc04 	addi	sp,sp,-16
   82ac8:	df000315 	stw	fp,12(sp)
   82acc:	df000304 	addi	fp,sp,12
   82ad0:	e13ffe15 	stw	r4,-8(fp)
   82ad4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   82ad8:	000530fa 	rdctl	r2,ienable
   82adc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   82ae0:	e0bfff17 	ldw	r2,-4(fp)
   82ae4:	00c00044 	movi	r3,1
   82ae8:	1884983a 	sll	r2,r3,r2
   82aec:	1007883a 	mov	r3,r2
   82af0:	e0bffd17 	ldw	r2,-12(fp)
   82af4:	1884703a 	and	r2,r3,r2
   82af8:	1004c03a 	cmpne	r2,r2,zero
   82afc:	10803fcc 	andi	r2,r2,255
}
   82b00:	e037883a 	mov	sp,fp
   82b04:	df000017 	ldw	fp,0(sp)
   82b08:	dec00104 	addi	sp,sp,4
   82b0c:	f800283a 	ret

00082b10 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   82b10:	defff504 	addi	sp,sp,-44
   82b14:	dfc00a15 	stw	ra,40(sp)
   82b18:	df000915 	stw	fp,36(sp)
   82b1c:	df000904 	addi	fp,sp,36
   82b20:	e13ffc15 	stw	r4,-16(fp)
   82b24:	e17ffd15 	stw	r5,-12(fp)
   82b28:	e1bffe15 	stw	r6,-8(fp)
   82b2c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   82b30:	00bffa84 	movi	r2,-22
   82b34:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   82b38:	e0bffd17 	ldw	r2,-12(fp)
   82b3c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   82b40:	e0bff817 	ldw	r2,-32(fp)
   82b44:	10800808 	cmpgei	r2,r2,32
   82b48:	1000271e 	bne	r2,zero,82be8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   82b4c:	0005303a 	rdctl	r2,status
   82b50:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   82b54:	e0fffa17 	ldw	r3,-24(fp)
   82b58:	00bfff84 	movi	r2,-2
   82b5c:	1884703a 	and	r2,r3,r2
   82b60:	1001703a 	wrctl	status,r2
  
  return context;
   82b64:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   82b68:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   82b6c:	00800274 	movhi	r2,9
   82b70:	10a6d504 	addi	r2,r2,-25772
   82b74:	e0fff817 	ldw	r3,-32(fp)
   82b78:	180690fa 	slli	r3,r3,3
   82b7c:	10c5883a 	add	r2,r2,r3
   82b80:	e0fffe17 	ldw	r3,-8(fp)
   82b84:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   82b88:	00800274 	movhi	r2,9
   82b8c:	10a6d504 	addi	r2,r2,-25772
   82b90:	e0fff817 	ldw	r3,-32(fp)
   82b94:	180690fa 	slli	r3,r3,3
   82b98:	10c5883a 	add	r2,r2,r3
   82b9c:	10800104 	addi	r2,r2,4
   82ba0:	e0ffff17 	ldw	r3,-4(fp)
   82ba4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   82ba8:	e0bffe17 	ldw	r2,-8(fp)
   82bac:	10000526 	beq	r2,zero,82bc4 <alt_iic_isr_register+0xb4>
   82bb0:	e0bff817 	ldw	r2,-32(fp)
   82bb4:	e13ffc17 	ldw	r4,-16(fp)
   82bb8:	100b883a 	mov	r5,r2
   82bbc:	00829800 	call	82980 <alt_ic_irq_enable>
   82bc0:	00000406 	br	82bd4 <alt_iic_isr_register+0xc4>
   82bc4:	e0bff817 	ldw	r2,-32(fp)
   82bc8:	e13ffc17 	ldw	r4,-16(fp)
   82bcc:	100b883a 	mov	r5,r2
   82bd0:	0082a200 	call	82a20 <alt_ic_irq_disable>
   82bd4:	e0bff715 	stw	r2,-36(fp)
   82bd8:	e0bff917 	ldw	r2,-28(fp)
   82bdc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   82be0:	e0bffb17 	ldw	r2,-20(fp)
   82be4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   82be8:	e0bff717 	ldw	r2,-36(fp)
}
   82bec:	e037883a 	mov	sp,fp
   82bf0:	dfc00117 	ldw	ra,4(sp)
   82bf4:	df000017 	ldw	fp,0(sp)
   82bf8:	dec00204 	addi	sp,sp,8
   82bfc:	f800283a 	ret

00082c00 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   82c00:	defff904 	addi	sp,sp,-28
   82c04:	dfc00615 	stw	ra,24(sp)
   82c08:	df000515 	stw	fp,20(sp)
   82c0c:	df000504 	addi	fp,sp,20
   82c10:	e13ffc15 	stw	r4,-16(fp)
   82c14:	e17ffd15 	stw	r5,-12(fp)
   82c18:	e1bffe15 	stw	r6,-8(fp)
   82c1c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   82c20:	e13ffd17 	ldw	r4,-12(fp)
   82c24:	e17ffe17 	ldw	r5,-8(fp)
   82c28:	e1bfff17 	ldw	r6,-4(fp)
   82c2c:	0082e540 	call	82e54 <open>
   82c30:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   82c34:	e0bffb17 	ldw	r2,-20(fp)
   82c38:	10001c16 	blt	r2,zero,82cac <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   82c3c:	00800234 	movhi	r2,8
   82c40:	109c8c04 	addi	r2,r2,29232
   82c44:	e0fffb17 	ldw	r3,-20(fp)
   82c48:	18c00324 	muli	r3,r3,12
   82c4c:	10c5883a 	add	r2,r2,r3
   82c50:	10c00017 	ldw	r3,0(r2)
   82c54:	e0bffc17 	ldw	r2,-16(fp)
   82c58:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   82c5c:	00800234 	movhi	r2,8
   82c60:	109c8c04 	addi	r2,r2,29232
   82c64:	e0fffb17 	ldw	r3,-20(fp)
   82c68:	18c00324 	muli	r3,r3,12
   82c6c:	10c5883a 	add	r2,r2,r3
   82c70:	10800104 	addi	r2,r2,4
   82c74:	10c00017 	ldw	r3,0(r2)
   82c78:	e0bffc17 	ldw	r2,-16(fp)
   82c7c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   82c80:	00800234 	movhi	r2,8
   82c84:	109c8c04 	addi	r2,r2,29232
   82c88:	e0fffb17 	ldw	r3,-20(fp)
   82c8c:	18c00324 	muli	r3,r3,12
   82c90:	10c5883a 	add	r2,r2,r3
   82c94:	10800204 	addi	r2,r2,8
   82c98:	10c00017 	ldw	r3,0(r2)
   82c9c:	e0bffc17 	ldw	r2,-16(fp)
   82ca0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   82ca4:	e13ffb17 	ldw	r4,-20(fp)
   82ca8:	0082fac0 	call	82fac <alt_release_fd>
  }
} 
   82cac:	e037883a 	mov	sp,fp
   82cb0:	dfc00117 	ldw	ra,4(sp)
   82cb4:	df000017 	ldw	fp,0(sp)
   82cb8:	dec00204 	addi	sp,sp,8
   82cbc:	f800283a 	ret

00082cc0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   82cc0:	defffb04 	addi	sp,sp,-20
   82cc4:	dfc00415 	stw	ra,16(sp)
   82cc8:	df000315 	stw	fp,12(sp)
   82ccc:	df000304 	addi	fp,sp,12
   82cd0:	e13ffd15 	stw	r4,-12(fp)
   82cd4:	e17ffe15 	stw	r5,-8(fp)
   82cd8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   82cdc:	01000234 	movhi	r4,8
   82ce0:	211c8f04 	addi	r4,r4,29244
   82ce4:	e17ffd17 	ldw	r5,-12(fp)
   82ce8:	01800044 	movi	r6,1
   82cec:	01c07fc4 	movi	r7,511
   82cf0:	0082c000 	call	82c00 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   82cf4:	01000234 	movhi	r4,8
   82cf8:	211c8c04 	addi	r4,r4,29232
   82cfc:	e17ffe17 	ldw	r5,-8(fp)
   82d00:	000d883a 	mov	r6,zero
   82d04:	01c07fc4 	movi	r7,511
   82d08:	0082c000 	call	82c00 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   82d0c:	01000234 	movhi	r4,8
   82d10:	211c9204 	addi	r4,r4,29256
   82d14:	e17fff17 	ldw	r5,-4(fp)
   82d18:	01800044 	movi	r6,1
   82d1c:	01c07fc4 	movi	r7,511
   82d20:	0082c000 	call	82c00 <alt_open_fd>
}  
   82d24:	e037883a 	mov	sp,fp
   82d28:	dfc00117 	ldw	ra,4(sp)
   82d2c:	df000017 	ldw	fp,0(sp)
   82d30:	dec00204 	addi	sp,sp,8
   82d34:	f800283a 	ret

00082d38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   82d38:	defffe04 	addi	sp,sp,-8
   82d3c:	dfc00115 	stw	ra,4(sp)
   82d40:	df000015 	stw	fp,0(sp)
   82d44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   82d48:	00800234 	movhi	r2,8
   82d4c:	109efe04 	addi	r2,r2,31736
   82d50:	10800017 	ldw	r2,0(r2)
   82d54:	10000526 	beq	r2,zero,82d6c <alt_get_errno+0x34>
   82d58:	00800234 	movhi	r2,8
   82d5c:	109efe04 	addi	r2,r2,31736
   82d60:	10800017 	ldw	r2,0(r2)
   82d64:	103ee83a 	callr	r2
   82d68:	00000206 	br	82d74 <alt_get_errno+0x3c>
   82d6c:	00800274 	movhi	r2,9
   82d70:	10a5c704 	addi	r2,r2,-26852
}
   82d74:	e037883a 	mov	sp,fp
   82d78:	dfc00117 	ldw	ra,4(sp)
   82d7c:	df000017 	ldw	fp,0(sp)
   82d80:	dec00204 	addi	sp,sp,8
   82d84:	f800283a 	ret

00082d88 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   82d88:	defffd04 	addi	sp,sp,-12
   82d8c:	df000215 	stw	fp,8(sp)
   82d90:	df000204 	addi	fp,sp,8
   82d94:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   82d98:	e0bfff17 	ldw	r2,-4(fp)
   82d9c:	10800217 	ldw	r2,8(r2)
   82da0:	10d00034 	orhi	r3,r2,16384
   82da4:	e0bfff17 	ldw	r2,-4(fp)
   82da8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   82dac:	e03ffe15 	stw	zero,-8(fp)
   82db0:	00001d06 	br	82e28 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   82db4:	00800234 	movhi	r2,8
   82db8:	109c8c04 	addi	r2,r2,29232
   82dbc:	e0fffe17 	ldw	r3,-8(fp)
   82dc0:	18c00324 	muli	r3,r3,12
   82dc4:	10c5883a 	add	r2,r2,r3
   82dc8:	10c00017 	ldw	r3,0(r2)
   82dcc:	e0bfff17 	ldw	r2,-4(fp)
   82dd0:	10800017 	ldw	r2,0(r2)
   82dd4:	1880111e 	bne	r3,r2,82e1c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   82dd8:	00800234 	movhi	r2,8
   82ddc:	109c8c04 	addi	r2,r2,29232
   82de0:	e0fffe17 	ldw	r3,-8(fp)
   82de4:	18c00324 	muli	r3,r3,12
   82de8:	10c5883a 	add	r2,r2,r3
   82dec:	10800204 	addi	r2,r2,8
   82df0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   82df4:	1000090e 	bge	r2,zero,82e1c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   82df8:	e0bffe17 	ldw	r2,-8(fp)
   82dfc:	10c00324 	muli	r3,r2,12
   82e00:	00800234 	movhi	r2,8
   82e04:	109c8c04 	addi	r2,r2,29232
   82e08:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   82e0c:	e0bfff17 	ldw	r2,-4(fp)
   82e10:	18800226 	beq	r3,r2,82e1c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   82e14:	00bffcc4 	movi	r2,-13
   82e18:	00000a06 	br	82e44 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   82e1c:	e0bffe17 	ldw	r2,-8(fp)
   82e20:	10800044 	addi	r2,r2,1
   82e24:	e0bffe15 	stw	r2,-8(fp)
   82e28:	00800234 	movhi	r2,8
   82e2c:	109efd04 	addi	r2,r2,31732
   82e30:	10800017 	ldw	r2,0(r2)
   82e34:	1007883a 	mov	r3,r2
   82e38:	e0bffe17 	ldw	r2,-8(fp)
   82e3c:	18bfdd2e 	bgeu	r3,r2,82db4 <rx_descriptor_end+0xfff82d54>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   82e40:	0005883a 	mov	r2,zero
}
   82e44:	e037883a 	mov	sp,fp
   82e48:	df000017 	ldw	fp,0(sp)
   82e4c:	dec00104 	addi	sp,sp,4
   82e50:	f800283a 	ret

00082e54 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   82e54:	defff604 	addi	sp,sp,-40
   82e58:	dfc00915 	stw	ra,36(sp)
   82e5c:	df000815 	stw	fp,32(sp)
   82e60:	df000804 	addi	fp,sp,32
   82e64:	e13ffd15 	stw	r4,-12(fp)
   82e68:	e17ffe15 	stw	r5,-8(fp)
   82e6c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   82e70:	00bfffc4 	movi	r2,-1
   82e74:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   82e78:	00bffb44 	movi	r2,-19
   82e7c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   82e80:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   82e84:	e13ffd17 	ldw	r4,-12(fp)
   82e88:	01400234 	movhi	r5,8
   82e8c:	295efb04 	addi	r5,r5,31724
   82e90:	00828700 	call	82870 <alt_find_dev>
   82e94:	e0bff815 	stw	r2,-32(fp)
   82e98:	e0bff817 	ldw	r2,-32(fp)
   82e9c:	1000051e 	bne	r2,zero,82eb4 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   82ea0:	e13ffd17 	ldw	r4,-12(fp)
   82ea4:	00831c80 	call	831c8 <alt_find_file>
   82ea8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   82eac:	00800044 	movi	r2,1
   82eb0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   82eb4:	e0bff817 	ldw	r2,-32(fp)
   82eb8:	10002926 	beq	r2,zero,82f60 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   82ebc:	e13ff817 	ldw	r4,-32(fp)
   82ec0:	00832dc0 	call	832dc <alt_get_fd>
   82ec4:	e0bff915 	stw	r2,-28(fp)
   82ec8:	e0bff917 	ldw	r2,-28(fp)
   82ecc:	1000030e 	bge	r2,zero,82edc <open+0x88>
    {
      status = index;
   82ed0:	e0bff917 	ldw	r2,-28(fp)
   82ed4:	e0bffa15 	stw	r2,-24(fp)
   82ed8:	00002306 	br	82f68 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   82edc:	e0bff917 	ldw	r2,-28(fp)
   82ee0:	10c00324 	muli	r3,r2,12
   82ee4:	00800234 	movhi	r2,8
   82ee8:	109c8c04 	addi	r2,r2,29232
   82eec:	1885883a 	add	r2,r3,r2
   82ef0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   82ef4:	e0fffe17 	ldw	r3,-8(fp)
   82ef8:	00900034 	movhi	r2,16384
   82efc:	10bfffc4 	addi	r2,r2,-1
   82f00:	1886703a 	and	r3,r3,r2
   82f04:	e0bffc17 	ldw	r2,-16(fp)
   82f08:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   82f0c:	e0bffb17 	ldw	r2,-20(fp)
   82f10:	1000051e 	bne	r2,zero,82f28 <open+0xd4>
   82f14:	e13ffc17 	ldw	r4,-16(fp)
   82f18:	0082d880 	call	82d88 <alt_file_locked>
   82f1c:	e0bffa15 	stw	r2,-24(fp)
   82f20:	e0bffa17 	ldw	r2,-24(fp)
   82f24:	10001016 	blt	r2,zero,82f68 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   82f28:	e0bff817 	ldw	r2,-32(fp)
   82f2c:	10800317 	ldw	r2,12(r2)
   82f30:	10000826 	beq	r2,zero,82f54 <open+0x100>
   82f34:	e0bff817 	ldw	r2,-32(fp)
   82f38:	10800317 	ldw	r2,12(r2)
   82f3c:	e13ffc17 	ldw	r4,-16(fp)
   82f40:	e17ffd17 	ldw	r5,-12(fp)
   82f44:	e1bffe17 	ldw	r6,-8(fp)
   82f48:	e1ffff17 	ldw	r7,-4(fp)
   82f4c:	103ee83a 	callr	r2
   82f50:	00000106 	br	82f58 <open+0x104>
   82f54:	0005883a 	mov	r2,zero
   82f58:	e0bffa15 	stw	r2,-24(fp)
   82f5c:	00000206 	br	82f68 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   82f60:	00bffb44 	movi	r2,-19
   82f64:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   82f68:	e0bffa17 	ldw	r2,-24(fp)
   82f6c:	1000090e 	bge	r2,zero,82f94 <open+0x140>
  {
    alt_release_fd (index);  
   82f70:	e13ff917 	ldw	r4,-28(fp)
   82f74:	0082fac0 	call	82fac <alt_release_fd>
    ALT_ERRNO = -status;
   82f78:	0082d380 	call	82d38 <alt_get_errno>
   82f7c:	1007883a 	mov	r3,r2
   82f80:	e0bffa17 	ldw	r2,-24(fp)
   82f84:	0085c83a 	sub	r2,zero,r2
   82f88:	18800015 	stw	r2,0(r3)
    return -1;
   82f8c:	00bfffc4 	movi	r2,-1
   82f90:	00000106 	br	82f98 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   82f94:	e0bff917 	ldw	r2,-28(fp)
}
   82f98:	e037883a 	mov	sp,fp
   82f9c:	dfc00117 	ldw	ra,4(sp)
   82fa0:	df000017 	ldw	fp,0(sp)
   82fa4:	dec00204 	addi	sp,sp,8
   82fa8:	f800283a 	ret

00082fac <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   82fac:	defffe04 	addi	sp,sp,-8
   82fb0:	df000115 	stw	fp,4(sp)
   82fb4:	df000104 	addi	fp,sp,4
   82fb8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   82fbc:	e0bfff17 	ldw	r2,-4(fp)
   82fc0:	108000d0 	cmplti	r2,r2,3
   82fc4:	10000d1e 	bne	r2,zero,82ffc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   82fc8:	00800234 	movhi	r2,8
   82fcc:	109c8c04 	addi	r2,r2,29232
   82fd0:	e0ffff17 	ldw	r3,-4(fp)
   82fd4:	18c00324 	muli	r3,r3,12
   82fd8:	10c5883a 	add	r2,r2,r3
   82fdc:	10800204 	addi	r2,r2,8
   82fe0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   82fe4:	00800234 	movhi	r2,8
   82fe8:	109c8c04 	addi	r2,r2,29232
   82fec:	e0ffff17 	ldw	r3,-4(fp)
   82ff0:	18c00324 	muli	r3,r3,12
   82ff4:	10c5883a 	add	r2,r2,r3
   82ff8:	10000015 	stw	zero,0(r2)
  }
}
   82ffc:	e037883a 	mov	sp,fp
   83000:	df000017 	ldw	fp,0(sp)
   83004:	dec00104 	addi	sp,sp,4
   83008:	f800283a 	ret

0008300c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   8300c:	defffa04 	addi	sp,sp,-24
   83010:	df000515 	stw	fp,20(sp)
   83014:	df000504 	addi	fp,sp,20
   83018:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8301c:	0005303a 	rdctl	r2,status
   83020:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   83024:	e0fffc17 	ldw	r3,-16(fp)
   83028:	00bfff84 	movi	r2,-2
   8302c:	1884703a 	and	r2,r3,r2
   83030:	1001703a 	wrctl	status,r2
  
  return context;
   83034:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   83038:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   8303c:	e0bfff17 	ldw	r2,-4(fp)
   83040:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   83044:	e0bffd17 	ldw	r2,-12(fp)
   83048:	10800017 	ldw	r2,0(r2)
   8304c:	e0fffd17 	ldw	r3,-12(fp)
   83050:	18c00117 	ldw	r3,4(r3)
   83054:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   83058:	e0bffd17 	ldw	r2,-12(fp)
   8305c:	10800117 	ldw	r2,4(r2)
   83060:	e0fffd17 	ldw	r3,-12(fp)
   83064:	18c00017 	ldw	r3,0(r3)
   83068:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   8306c:	e0bffd17 	ldw	r2,-12(fp)
   83070:	e0fffd17 	ldw	r3,-12(fp)
   83074:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   83078:	e0bffd17 	ldw	r2,-12(fp)
   8307c:	e0fffd17 	ldw	r3,-12(fp)
   83080:	10c00015 	stw	r3,0(r2)
   83084:	e0bffb17 	ldw	r2,-20(fp)
   83088:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8308c:	e0bffe17 	ldw	r2,-8(fp)
   83090:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   83094:	e037883a 	mov	sp,fp
   83098:	df000017 	ldw	fp,0(sp)
   8309c:	dec00104 	addi	sp,sp,4
   830a0:	f800283a 	ret

000830a4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   830a4:	defffb04 	addi	sp,sp,-20
   830a8:	dfc00415 	stw	ra,16(sp)
   830ac:	df000315 	stw	fp,12(sp)
   830b0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   830b4:	d0a00917 	ldw	r2,-32732(gp)
   830b8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   830bc:	d0a6ce17 	ldw	r2,-25800(gp)
   830c0:	10800044 	addi	r2,r2,1
   830c4:	d0a6ce15 	stw	r2,-25800(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   830c8:	00002e06 	br	83184 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   830cc:	e0bffd17 	ldw	r2,-12(fp)
   830d0:	10800017 	ldw	r2,0(r2)
   830d4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   830d8:	e0bffd17 	ldw	r2,-12(fp)
   830dc:	10800403 	ldbu	r2,16(r2)
   830e0:	10803fcc 	andi	r2,r2,255
   830e4:	10000426 	beq	r2,zero,830f8 <alt_tick+0x54>
   830e8:	d0a6ce17 	ldw	r2,-25800(gp)
   830ec:	1000021e 	bne	r2,zero,830f8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   830f0:	e0bffd17 	ldw	r2,-12(fp)
   830f4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   830f8:	e0bffd17 	ldw	r2,-12(fp)
   830fc:	10800217 	ldw	r2,8(r2)
   83100:	d0e6ce17 	ldw	r3,-25800(gp)
   83104:	18801d36 	bltu	r3,r2,8317c <alt_tick+0xd8>
   83108:	e0bffd17 	ldw	r2,-12(fp)
   8310c:	10800403 	ldbu	r2,16(r2)
   83110:	10803fcc 	andi	r2,r2,255
   83114:	1000191e 	bne	r2,zero,8317c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   83118:	e0bffd17 	ldw	r2,-12(fp)
   8311c:	10800317 	ldw	r2,12(r2)
   83120:	e0fffd17 	ldw	r3,-12(fp)
   83124:	18c00517 	ldw	r3,20(r3)
   83128:	1809883a 	mov	r4,r3
   8312c:	103ee83a 	callr	r2
   83130:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   83134:	e0bfff17 	ldw	r2,-4(fp)
   83138:	1000031e 	bne	r2,zero,83148 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   8313c:	e13ffd17 	ldw	r4,-12(fp)
   83140:	008300c0 	call	8300c <alt_alarm_stop>
   83144:	00000d06 	br	8317c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   83148:	e0bffd17 	ldw	r2,-12(fp)
   8314c:	10c00217 	ldw	r3,8(r2)
   83150:	e0bfff17 	ldw	r2,-4(fp)
   83154:	1887883a 	add	r3,r3,r2
   83158:	e0bffd17 	ldw	r2,-12(fp)
   8315c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   83160:	e0bffd17 	ldw	r2,-12(fp)
   83164:	10c00217 	ldw	r3,8(r2)
   83168:	d0a6ce17 	ldw	r2,-25800(gp)
   8316c:	1880032e 	bgeu	r3,r2,8317c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   83170:	e0bffd17 	ldw	r2,-12(fp)
   83174:	00c00044 	movi	r3,1
   83178:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   8317c:	e0bffe17 	ldw	r2,-8(fp)
   83180:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   83184:	e0fffd17 	ldw	r3,-12(fp)
   83188:	d0a00904 	addi	r2,gp,-32732
   8318c:	18bfcf1e 	bne	r3,r2,830cc <rx_descriptor_end+0xfff8306c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   83190:	0001883a 	nop
}
   83194:	e037883a 	mov	sp,fp
   83198:	dfc00117 	ldw	ra,4(sp)
   8319c:	df000017 	ldw	fp,0(sp)
   831a0:	dec00204 	addi	sp,sp,8
   831a4:	f800283a 	ret

000831a8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   831a8:	deffff04 	addi	sp,sp,-4
   831ac:	df000015 	stw	fp,0(sp)
   831b0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   831b4:	000170fa 	wrctl	ienable,zero
}
   831b8:	e037883a 	mov	sp,fp
   831bc:	df000017 	ldw	fp,0(sp)
   831c0:	dec00104 	addi	sp,sp,4
   831c4:	f800283a 	ret

000831c8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   831c8:	defffb04 	addi	sp,sp,-20
   831cc:	dfc00415 	stw	ra,16(sp)
   831d0:	df000315 	stw	fp,12(sp)
   831d4:	df000304 	addi	fp,sp,12
   831d8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   831dc:	00800234 	movhi	r2,8
   831e0:	109ef904 	addi	r2,r2,31716
   831e4:	10800017 	ldw	r2,0(r2)
   831e8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   831ec:	00003106 	br	832b4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   831f0:	e0bffd17 	ldw	r2,-12(fp)
   831f4:	10800217 	ldw	r2,8(r2)
   831f8:	1009883a 	mov	r4,r2
   831fc:	00838200 	call	83820 <strlen>
   83200:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   83204:	e0bffd17 	ldw	r2,-12(fp)
   83208:	10c00217 	ldw	r3,8(r2)
   8320c:	e0bffe17 	ldw	r2,-8(fp)
   83210:	10bfffc4 	addi	r2,r2,-1
   83214:	1885883a 	add	r2,r3,r2
   83218:	10800003 	ldbu	r2,0(r2)
   8321c:	10803fcc 	andi	r2,r2,255
   83220:	1080201c 	xori	r2,r2,128
   83224:	10bfe004 	addi	r2,r2,-128
   83228:	10800bd8 	cmpnei	r2,r2,47
   8322c:	1000031e 	bne	r2,zero,8323c <alt_find_file+0x74>
    {
      len -= 1;
   83230:	e0bffe17 	ldw	r2,-8(fp)
   83234:	10bfffc4 	addi	r2,r2,-1
   83238:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   8323c:	e0bffe17 	ldw	r2,-8(fp)
   83240:	e0ffff17 	ldw	r3,-4(fp)
   83244:	1885883a 	add	r2,r3,r2
   83248:	10800003 	ldbu	r2,0(r2)
   8324c:	10803fcc 	andi	r2,r2,255
   83250:	1080201c 	xori	r2,r2,128
   83254:	10bfe004 	addi	r2,r2,-128
   83258:	10800be0 	cmpeqi	r2,r2,47
   8325c:	1000081e 	bne	r2,zero,83280 <alt_find_file+0xb8>
   83260:	e0bffe17 	ldw	r2,-8(fp)
   83264:	e0ffff17 	ldw	r3,-4(fp)
   83268:	1885883a 	add	r2,r3,r2
   8326c:	10800003 	ldbu	r2,0(r2)
   83270:	10803fcc 	andi	r2,r2,255
   83274:	1080201c 	xori	r2,r2,128
   83278:	10bfe004 	addi	r2,r2,-128
   8327c:	10000a1e 	bne	r2,zero,832a8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   83280:	e0bffd17 	ldw	r2,-12(fp)
   83284:	10c00217 	ldw	r3,8(r2)
   83288:	e0bffe17 	ldw	r2,-8(fp)
   8328c:	1809883a 	mov	r4,r3
   83290:	e17fff17 	ldw	r5,-4(fp)
   83294:	100d883a 	mov	r6,r2
   83298:	00835040 	call	83504 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   8329c:	1000021e 	bne	r2,zero,832a8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   832a0:	e0bffd17 	ldw	r2,-12(fp)
   832a4:	00000806 	br	832c8 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   832a8:	e0bffd17 	ldw	r2,-12(fp)
   832ac:	10800017 	ldw	r2,0(r2)
   832b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   832b4:	e0fffd17 	ldw	r3,-12(fp)
   832b8:	00800234 	movhi	r2,8
   832bc:	109ef904 	addi	r2,r2,31716
   832c0:	18bfcb1e 	bne	r3,r2,831f0 <rx_descriptor_end+0xfff83190>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   832c4:	0005883a 	mov	r2,zero
}
   832c8:	e037883a 	mov	sp,fp
   832cc:	dfc00117 	ldw	ra,4(sp)
   832d0:	df000017 	ldw	fp,0(sp)
   832d4:	dec00204 	addi	sp,sp,8
   832d8:	f800283a 	ret

000832dc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   832dc:	defffc04 	addi	sp,sp,-16
   832e0:	df000315 	stw	fp,12(sp)
   832e4:	df000304 	addi	fp,sp,12
   832e8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   832ec:	00bffa04 	movi	r2,-24
   832f0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   832f4:	e03ffd15 	stw	zero,-12(fp)
   832f8:	00001d06 	br	83370 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   832fc:	00800234 	movhi	r2,8
   83300:	109c8c04 	addi	r2,r2,29232
   83304:	e0fffd17 	ldw	r3,-12(fp)
   83308:	18c00324 	muli	r3,r3,12
   8330c:	10c5883a 	add	r2,r2,r3
   83310:	10800017 	ldw	r2,0(r2)
   83314:	1000131e 	bne	r2,zero,83364 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   83318:	00800234 	movhi	r2,8
   8331c:	109c8c04 	addi	r2,r2,29232
   83320:	e0fffd17 	ldw	r3,-12(fp)
   83324:	18c00324 	muli	r3,r3,12
   83328:	10c5883a 	add	r2,r2,r3
   8332c:	e0ffff17 	ldw	r3,-4(fp)
   83330:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   83334:	00800234 	movhi	r2,8
   83338:	109efd04 	addi	r2,r2,31732
   8333c:	10c00017 	ldw	r3,0(r2)
   83340:	e0bffd17 	ldw	r2,-12(fp)
   83344:	1880040e 	bge	r3,r2,83358 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   83348:	00800234 	movhi	r2,8
   8334c:	109efd04 	addi	r2,r2,31732
   83350:	e0fffd17 	ldw	r3,-12(fp)
   83354:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   83358:	e0bffd17 	ldw	r2,-12(fp)
   8335c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   83360:	00000606 	br	8337c <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   83364:	e0bffd17 	ldw	r2,-12(fp)
   83368:	10800044 	addi	r2,r2,1
   8336c:	e0bffd15 	stw	r2,-12(fp)
   83370:	e0bffd17 	ldw	r2,-12(fp)
   83374:	10800810 	cmplti	r2,r2,32
   83378:	103fe01e 	bne	r2,zero,832fc <rx_descriptor_end+0xfff8329c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   8337c:	e0bffe17 	ldw	r2,-8(fp)
}
   83380:	e037883a 	mov	sp,fp
   83384:	df000017 	ldw	fp,0(sp)
   83388:	dec00104 	addi	sp,sp,4
   8338c:	f800283a 	ret

00083390 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   83390:	defffb04 	addi	sp,sp,-20
   83394:	df000415 	stw	fp,16(sp)
   83398:	df000404 	addi	fp,sp,16
   8339c:	e13ffe15 	stw	r4,-8(fp)
   833a0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   833a4:	e0bfff17 	ldw	r2,-4(fp)
   833a8:	10840070 	cmpltui	r2,r2,4097
   833ac:	1000021e 	bne	r2,zero,833b8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   833b0:	00840004 	movi	r2,4096
   833b4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   833b8:	e0fffe17 	ldw	r3,-8(fp)
   833bc:	e0bfff17 	ldw	r2,-4(fp)
   833c0:	1885883a 	add	r2,r3,r2
   833c4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   833c8:	e0bffe17 	ldw	r2,-8(fp)
   833cc:	e0bffc15 	stw	r2,-16(fp)
   833d0:	00000506 	br	833e8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   833d4:	e0bffc17 	ldw	r2,-16(fp)
   833d8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   833dc:	e0bffc17 	ldw	r2,-16(fp)
   833e0:	10800804 	addi	r2,r2,32
   833e4:	e0bffc15 	stw	r2,-16(fp)
   833e8:	e0fffc17 	ldw	r3,-16(fp)
   833ec:	e0bffd17 	ldw	r2,-12(fp)
   833f0:	18bff836 	bltu	r3,r2,833d4 <rx_descriptor_end+0xfff83374>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   833f4:	e0bffe17 	ldw	r2,-8(fp)
   833f8:	108007cc 	andi	r2,r2,31
   833fc:	10000226 	beq	r2,zero,83408 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   83400:	e0bffc17 	ldw	r2,-16(fp)
   83404:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   83408:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   8340c:	e037883a 	mov	sp,fp
   83410:	df000017 	ldw	fp,0(sp)
   83414:	dec00104 	addi	sp,sp,4
   83418:	f800283a 	ret

0008341c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   8341c:	defffe04 	addi	sp,sp,-8
   83420:	df000115 	stw	fp,4(sp)
   83424:	df000104 	addi	fp,sp,4
   83428:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   8342c:	e0bfff17 	ldw	r2,-4(fp)
   83430:	10bffe84 	addi	r2,r2,-6
   83434:	10c00428 	cmpgeui	r3,r2,16
   83438:	18001a1e 	bne	r3,zero,834a4 <alt_exception_cause_generated_bad_addr+0x88>
   8343c:	100690ba 	slli	r3,r2,2
   83440:	00800234 	movhi	r2,8
   83444:	108d1504 	addi	r2,r2,13396
   83448:	1885883a 	add	r2,r3,r2
   8344c:	10800017 	ldw	r2,0(r2)
   83450:	1000683a 	jmp	r2
   83454:	00083494 	movui	zero,8402
   83458:	00083494 	movui	zero,8402
   8345c:	000834a4 	muli	zero,zero,8402
   83460:	000834a4 	muli	zero,zero,8402
   83464:	000834a4 	muli	zero,zero,8402
   83468:	00083494 	movui	zero,8402
   8346c:	0008349c 	xori	zero,zero,8402
   83470:	000834a4 	muli	zero,zero,8402
   83474:	00083494 	movui	zero,8402
   83478:	00083494 	movui	zero,8402
   8347c:	000834a4 	muli	zero,zero,8402
   83480:	00083494 	movui	zero,8402
   83484:	0008349c 	xori	zero,zero,8402
   83488:	000834a4 	muli	zero,zero,8402
   8348c:	000834a4 	muli	zero,zero,8402
   83490:	00083494 	movui	zero,8402
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   83494:	00800044 	movi	r2,1
   83498:	00000306 	br	834a8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   8349c:	0005883a 	mov	r2,zero
   834a0:	00000106 	br	834a8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   834a4:	0005883a 	mov	r2,zero
  }
}
   834a8:	e037883a 	mov	sp,fp
   834ac:	df000017 	ldw	fp,0(sp)
   834b0:	dec00104 	addi	sp,sp,4
   834b4:	f800283a 	ret

000834b8 <atexit>:
   834b8:	200b883a 	mov	r5,r4
   834bc:	000d883a 	mov	r6,zero
   834c0:	0009883a 	mov	r4,zero
   834c4:	000f883a 	mov	r7,zero
   834c8:	0083b581 	jmpi	83b58 <__register_exitproc>

000834cc <exit>:
   834cc:	defffe04 	addi	sp,sp,-8
   834d0:	000b883a 	mov	r5,zero
   834d4:	dc000015 	stw	r16,0(sp)
   834d8:	dfc00115 	stw	ra,4(sp)
   834dc:	2021883a 	mov	r16,r4
   834e0:	0083c6c0 	call	83c6c <__call_exitprocs>
   834e4:	00800234 	movhi	r2,8
   834e8:	109f0204 	addi	r2,r2,31752
   834ec:	11000017 	ldw	r4,0(r2)
   834f0:	20800f17 	ldw	r2,60(r4)
   834f4:	10000126 	beq	r2,zero,834fc <exit+0x30>
   834f8:	103ee83a 	callr	r2
   834fc:	8009883a 	mov	r4,r16
   83500:	00858b80 	call	858b8 <_exit>

00083504 <memcmp>:
   83504:	01c000c4 	movi	r7,3
   83508:	3980192e 	bgeu	r7,r6,83570 <memcmp+0x6c>
   8350c:	2144b03a 	or	r2,r4,r5
   83510:	11c4703a 	and	r2,r2,r7
   83514:	10000f26 	beq	r2,zero,83554 <memcmp+0x50>
   83518:	20800003 	ldbu	r2,0(r4)
   8351c:	28c00003 	ldbu	r3,0(r5)
   83520:	10c0151e 	bne	r2,r3,83578 <memcmp+0x74>
   83524:	31bfff84 	addi	r6,r6,-2
   83528:	01ffffc4 	movi	r7,-1
   8352c:	00000406 	br	83540 <memcmp+0x3c>
   83530:	20800003 	ldbu	r2,0(r4)
   83534:	28c00003 	ldbu	r3,0(r5)
   83538:	31bfffc4 	addi	r6,r6,-1
   8353c:	10c00e1e 	bne	r2,r3,83578 <memcmp+0x74>
   83540:	21000044 	addi	r4,r4,1
   83544:	29400044 	addi	r5,r5,1
   83548:	31fff91e 	bne	r6,r7,83530 <rx_descriptor_end+0xfff834d0>
   8354c:	0005883a 	mov	r2,zero
   83550:	f800283a 	ret
   83554:	20c00017 	ldw	r3,0(r4)
   83558:	28800017 	ldw	r2,0(r5)
   8355c:	1880041e 	bne	r3,r2,83570 <memcmp+0x6c>
   83560:	31bfff04 	addi	r6,r6,-4
   83564:	21000104 	addi	r4,r4,4
   83568:	29400104 	addi	r5,r5,4
   8356c:	39bff936 	bltu	r7,r6,83554 <rx_descriptor_end+0xfff834f4>
   83570:	303fe91e 	bne	r6,zero,83518 <rx_descriptor_end+0xfff834b8>
   83574:	003ff506 	br	8354c <rx_descriptor_end+0xfff834ec>
   83578:	10c5c83a 	sub	r2,r2,r3
   8357c:	f800283a 	ret

00083580 <memcpy>:
   83580:	deffff04 	addi	sp,sp,-4
   83584:	dc000015 	stw	r16,0(sp)
   83588:	00c003c4 	movi	r3,15
   8358c:	2005883a 	mov	r2,r4
   83590:	1980432e 	bgeu	r3,r6,836a0 <memcpy+0x120>
   83594:	2146b03a 	or	r3,r4,r5
   83598:	18c000cc 	andi	r3,r3,3
   8359c:	1800421e 	bne	r3,zero,836a8 <memcpy+0x128>
   835a0:	343ffc04 	addi	r16,r6,-16
   835a4:	8020d13a 	srli	r16,r16,4
   835a8:	28c00104 	addi	r3,r5,4
   835ac:	23400104 	addi	r13,r4,4
   835b0:	801e913a 	slli	r15,r16,4
   835b4:	2b000204 	addi	r12,r5,8
   835b8:	22c00204 	addi	r11,r4,8
   835bc:	7bc00504 	addi	r15,r15,20
   835c0:	2a800304 	addi	r10,r5,12
   835c4:	22400304 	addi	r9,r4,12
   835c8:	2bdf883a 	add	r15,r5,r15
   835cc:	2811883a 	mov	r8,r5
   835d0:	200f883a 	mov	r7,r4
   835d4:	41000017 	ldw	r4,0(r8)
   835d8:	39c00404 	addi	r7,r7,16
   835dc:	18c00404 	addi	r3,r3,16
   835e0:	393ffc15 	stw	r4,-16(r7)
   835e4:	1bbffc17 	ldw	r14,-16(r3)
   835e8:	6b400404 	addi	r13,r13,16
   835ec:	5ac00404 	addi	r11,r11,16
   835f0:	6bbffc15 	stw	r14,-16(r13)
   835f4:	63800017 	ldw	r14,0(r12)
   835f8:	4a400404 	addi	r9,r9,16
   835fc:	42000404 	addi	r8,r8,16
   83600:	5bbffc15 	stw	r14,-16(r11)
   83604:	53800017 	ldw	r14,0(r10)
   83608:	63000404 	addi	r12,r12,16
   8360c:	52800404 	addi	r10,r10,16
   83610:	4bbffc15 	stw	r14,-16(r9)
   83614:	1bffef1e 	bne	r3,r15,835d4 <rx_descriptor_end+0xfff83574>
   83618:	81c00044 	addi	r7,r16,1
   8361c:	380e913a 	slli	r7,r7,4
   83620:	310003cc 	andi	r4,r6,15
   83624:	02c000c4 	movi	r11,3
   83628:	11c7883a 	add	r3,r2,r7
   8362c:	29cb883a 	add	r5,r5,r7
   83630:	59001f2e 	bgeu	r11,r4,836b0 <memcpy+0x130>
   83634:	1813883a 	mov	r9,r3
   83638:	2811883a 	mov	r8,r5
   8363c:	200f883a 	mov	r7,r4
   83640:	42800017 	ldw	r10,0(r8)
   83644:	4a400104 	addi	r9,r9,4
   83648:	39ffff04 	addi	r7,r7,-4
   8364c:	4abfff15 	stw	r10,-4(r9)
   83650:	42000104 	addi	r8,r8,4
   83654:	59fffa36 	bltu	r11,r7,83640 <rx_descriptor_end+0xfff835e0>
   83658:	213fff04 	addi	r4,r4,-4
   8365c:	2008d0ba 	srli	r4,r4,2
   83660:	318000cc 	andi	r6,r6,3
   83664:	21000044 	addi	r4,r4,1
   83668:	2109883a 	add	r4,r4,r4
   8366c:	2109883a 	add	r4,r4,r4
   83670:	1907883a 	add	r3,r3,r4
   83674:	290b883a 	add	r5,r5,r4
   83678:	30000626 	beq	r6,zero,83694 <memcpy+0x114>
   8367c:	198d883a 	add	r6,r3,r6
   83680:	29c00003 	ldbu	r7,0(r5)
   83684:	18c00044 	addi	r3,r3,1
   83688:	29400044 	addi	r5,r5,1
   8368c:	19ffffc5 	stb	r7,-1(r3)
   83690:	19bffb1e 	bne	r3,r6,83680 <rx_descriptor_end+0xfff83620>
   83694:	dc000017 	ldw	r16,0(sp)
   83698:	dec00104 	addi	sp,sp,4
   8369c:	f800283a 	ret
   836a0:	2007883a 	mov	r3,r4
   836a4:	003ff406 	br	83678 <rx_descriptor_end+0xfff83618>
   836a8:	2007883a 	mov	r3,r4
   836ac:	003ff306 	br	8367c <rx_descriptor_end+0xfff8361c>
   836b0:	200d883a 	mov	r6,r4
   836b4:	003ff006 	br	83678 <rx_descriptor_end+0xfff83618>

000836b8 <_putc_r>:
   836b8:	defffc04 	addi	sp,sp,-16
   836bc:	dc000215 	stw	r16,8(sp)
   836c0:	dfc00315 	stw	ra,12(sp)
   836c4:	2021883a 	mov	r16,r4
   836c8:	20000226 	beq	r4,zero,836d4 <_putc_r+0x1c>
   836cc:	20800e17 	ldw	r2,56(r4)
   836d0:	10001b26 	beq	r2,zero,83740 <_putc_r+0x88>
   836d4:	30800217 	ldw	r2,8(r6)
   836d8:	10bfffc4 	addi	r2,r2,-1
   836dc:	30800215 	stw	r2,8(r6)
   836e0:	10000a16 	blt	r2,zero,8370c <_putc_r+0x54>
   836e4:	30800017 	ldw	r2,0(r6)
   836e8:	11400005 	stb	r5,0(r2)
   836ec:	30800017 	ldw	r2,0(r6)
   836f0:	10c00044 	addi	r3,r2,1
   836f4:	30c00015 	stw	r3,0(r6)
   836f8:	10800003 	ldbu	r2,0(r2)
   836fc:	dfc00317 	ldw	ra,12(sp)
   83700:	dc000217 	ldw	r16,8(sp)
   83704:	dec00404 	addi	sp,sp,16
   83708:	f800283a 	ret
   8370c:	30c00617 	ldw	r3,24(r6)
   83710:	10c00616 	blt	r2,r3,8372c <_putc_r+0x74>
   83714:	30800017 	ldw	r2,0(r6)
   83718:	00c00284 	movi	r3,10
   8371c:	11400005 	stb	r5,0(r2)
   83720:	30800017 	ldw	r2,0(r6)
   83724:	11400003 	ldbu	r5,0(r2)
   83728:	28fff11e 	bne	r5,r3,836f0 <rx_descriptor_end+0xfff83690>
   8372c:	8009883a 	mov	r4,r16
   83730:	dfc00317 	ldw	ra,12(sp)
   83734:	dc000217 	ldw	r16,8(sp)
   83738:	dec00404 	addi	sp,sp,16
   8373c:	00838b81 	jmpi	838b8 <__swbuf_r>
   83740:	d9400015 	stw	r5,0(sp)
   83744:	d9800115 	stw	r6,4(sp)
   83748:	00843a80 	call	843a8 <__sinit>
   8374c:	d9800117 	ldw	r6,4(sp)
   83750:	d9400017 	ldw	r5,0(sp)
   83754:	003fdf06 	br	836d4 <rx_descriptor_end+0xfff83674>

00083758 <putc>:
   83758:	defffc04 	addi	sp,sp,-16
   8375c:	dc400115 	stw	r17,4(sp)
   83760:	04400234 	movhi	r17,8
   83764:	8c5f0304 	addi	r17,r17,31756
   83768:	dc800215 	stw	r18,8(sp)
   8376c:	2025883a 	mov	r18,r4
   83770:	89000017 	ldw	r4,0(r17)
   83774:	dc000015 	stw	r16,0(sp)
   83778:	dfc00315 	stw	ra,12(sp)
   8377c:	2821883a 	mov	r16,r5
   83780:	20000226 	beq	r4,zero,8378c <putc+0x34>
   83784:	20c00e17 	ldw	r3,56(r4)
   83788:	18001a26 	beq	r3,zero,837f4 <putc+0x9c>
   8378c:	80800217 	ldw	r2,8(r16)
   83790:	10bfffc4 	addi	r2,r2,-1
   83794:	80800215 	stw	r2,8(r16)
   83798:	10000c16 	blt	r2,zero,837cc <putc+0x74>
   8379c:	80800017 	ldw	r2,0(r16)
   837a0:	14800005 	stb	r18,0(r2)
   837a4:	80800017 	ldw	r2,0(r16)
   837a8:	10c00044 	addi	r3,r2,1
   837ac:	80c00015 	stw	r3,0(r16)
   837b0:	10800003 	ldbu	r2,0(r2)
   837b4:	dfc00317 	ldw	ra,12(sp)
   837b8:	dc800217 	ldw	r18,8(sp)
   837bc:	dc400117 	ldw	r17,4(sp)
   837c0:	dc000017 	ldw	r16,0(sp)
   837c4:	dec00404 	addi	sp,sp,16
   837c8:	f800283a 	ret
   837cc:	80c00617 	ldw	r3,24(r16)
   837d0:	10c00a16 	blt	r2,r3,837fc <putc+0xa4>
   837d4:	80800017 	ldw	r2,0(r16)
   837d8:	00c00284 	movi	r3,10
   837dc:	14800005 	stb	r18,0(r2)
   837e0:	80800017 	ldw	r2,0(r16)
   837e4:	11400003 	ldbu	r5,0(r2)
   837e8:	28ffef1e 	bne	r5,r3,837a8 <rx_descriptor_end+0xfff83748>
   837ec:	89000017 	ldw	r4,0(r17)
   837f0:	00000406 	br	83804 <putc+0xac>
   837f4:	00843a80 	call	843a8 <__sinit>
   837f8:	003fe406 	br	8378c <rx_descriptor_end+0xfff8372c>
   837fc:	89000017 	ldw	r4,0(r17)
   83800:	900b883a 	mov	r5,r18
   83804:	800d883a 	mov	r6,r16
   83808:	dfc00317 	ldw	ra,12(sp)
   8380c:	dc800217 	ldw	r18,8(sp)
   83810:	dc400117 	ldw	r17,4(sp)
   83814:	dc000017 	ldw	r16,0(sp)
   83818:	dec00404 	addi	sp,sp,16
   8381c:	00838b81 	jmpi	838b8 <__swbuf_r>

00083820 <strlen>:
   83820:	208000cc 	andi	r2,r4,3
   83824:	10002026 	beq	r2,zero,838a8 <strlen+0x88>
   83828:	20800007 	ldb	r2,0(r4)
   8382c:	10002026 	beq	r2,zero,838b0 <strlen+0x90>
   83830:	2005883a 	mov	r2,r4
   83834:	00000206 	br	83840 <strlen+0x20>
   83838:	10c00007 	ldb	r3,0(r2)
   8383c:	18001826 	beq	r3,zero,838a0 <strlen+0x80>
   83840:	10800044 	addi	r2,r2,1
   83844:	10c000cc 	andi	r3,r2,3
   83848:	183ffb1e 	bne	r3,zero,83838 <rx_descriptor_end+0xfff837d8>
   8384c:	10c00017 	ldw	r3,0(r2)
   83850:	01ffbff4 	movhi	r7,65279
   83854:	39ffbfc4 	addi	r7,r7,-257
   83858:	00ca303a 	nor	r5,zero,r3
   8385c:	01a02074 	movhi	r6,32897
   83860:	19c7883a 	add	r3,r3,r7
   83864:	31a02004 	addi	r6,r6,-32640
   83868:	1946703a 	and	r3,r3,r5
   8386c:	1986703a 	and	r3,r3,r6
   83870:	1800091e 	bne	r3,zero,83898 <strlen+0x78>
   83874:	10800104 	addi	r2,r2,4
   83878:	10c00017 	ldw	r3,0(r2)
   8387c:	19cb883a 	add	r5,r3,r7
   83880:	00c6303a 	nor	r3,zero,r3
   83884:	28c6703a 	and	r3,r5,r3
   83888:	1986703a 	and	r3,r3,r6
   8388c:	183ff926 	beq	r3,zero,83874 <rx_descriptor_end+0xfff83814>
   83890:	00000106 	br	83898 <strlen+0x78>
   83894:	10800044 	addi	r2,r2,1
   83898:	10c00007 	ldb	r3,0(r2)
   8389c:	183ffd1e 	bne	r3,zero,83894 <rx_descriptor_end+0xfff83834>
   838a0:	1105c83a 	sub	r2,r2,r4
   838a4:	f800283a 	ret
   838a8:	2005883a 	mov	r2,r4
   838ac:	003fe706 	br	8384c <rx_descriptor_end+0xfff837ec>
   838b0:	0005883a 	mov	r2,zero
   838b4:	f800283a 	ret

000838b8 <__swbuf_r>:
   838b8:	defffc04 	addi	sp,sp,-16
   838bc:	dc800215 	stw	r18,8(sp)
   838c0:	dc400115 	stw	r17,4(sp)
   838c4:	dc000015 	stw	r16,0(sp)
   838c8:	dfc00315 	stw	ra,12(sp)
   838cc:	2025883a 	mov	r18,r4
   838d0:	2823883a 	mov	r17,r5
   838d4:	3021883a 	mov	r16,r6
   838d8:	20000226 	beq	r4,zero,838e4 <__swbuf_r+0x2c>
   838dc:	20800e17 	ldw	r2,56(r4)
   838e0:	10004126 	beq	r2,zero,839e8 <__swbuf_r+0x130>
   838e4:	80c00617 	ldw	r3,24(r16)
   838e8:	8180030b 	ldhu	r6,12(r16)
   838ec:	80c00215 	stw	r3,8(r16)
   838f0:	30c0020c 	andi	r3,r6,8
   838f4:	18003526 	beq	r3,zero,839cc <__swbuf_r+0x114>
   838f8:	80c00417 	ldw	r3,16(r16)
   838fc:	18003326 	beq	r3,zero,839cc <__swbuf_r+0x114>
   83900:	3088000c 	andi	r2,r6,8192
   83904:	8c403fcc 	andi	r17,r17,255
   83908:	10001726 	beq	r2,zero,83968 <__swbuf_r+0xb0>
   8390c:	80800017 	ldw	r2,0(r16)
   83910:	81000517 	ldw	r4,20(r16)
   83914:	10c7c83a 	sub	r3,r2,r3
   83918:	19001d0e 	bge	r3,r4,83990 <__swbuf_r+0xd8>
   8391c:	18c00044 	addi	r3,r3,1
   83920:	81400217 	ldw	r5,8(r16)
   83924:	11000044 	addi	r4,r2,1
   83928:	81000015 	stw	r4,0(r16)
   8392c:	297fffc4 	addi	r5,r5,-1
   83930:	81400215 	stw	r5,8(r16)
   83934:	14400005 	stb	r17,0(r2)
   83938:	80800517 	ldw	r2,20(r16)
   8393c:	10c01d26 	beq	r2,r3,839b4 <__swbuf_r+0xfc>
   83940:	8080030b 	ldhu	r2,12(r16)
   83944:	1080004c 	andi	r2,r2,1
   83948:	1000181e 	bne	r2,zero,839ac <__swbuf_r+0xf4>
   8394c:	8805883a 	mov	r2,r17
   83950:	dfc00317 	ldw	ra,12(sp)
   83954:	dc800217 	ldw	r18,8(sp)
   83958:	dc400117 	ldw	r17,4(sp)
   8395c:	dc000017 	ldw	r16,0(sp)
   83960:	dec00404 	addi	sp,sp,16
   83964:	f800283a 	ret
   83968:	81001917 	ldw	r4,100(r16)
   8396c:	00b7ffc4 	movi	r2,-8193
   83970:	31880014 	ori	r6,r6,8192
   83974:	2084703a 	and	r2,r4,r2
   83978:	80801915 	stw	r2,100(r16)
   8397c:	80800017 	ldw	r2,0(r16)
   83980:	81000517 	ldw	r4,20(r16)
   83984:	8180030d 	sth	r6,12(r16)
   83988:	10c7c83a 	sub	r3,r2,r3
   8398c:	193fe316 	blt	r3,r4,8391c <rx_descriptor_end+0xfff838bc>
   83990:	9009883a 	mov	r4,r18
   83994:	800b883a 	mov	r5,r16
   83998:	0083e000 	call	83e00 <_fflush_r>
   8399c:	1000091e 	bne	r2,zero,839c4 <__swbuf_r+0x10c>
   839a0:	80800017 	ldw	r2,0(r16)
   839a4:	00c00044 	movi	r3,1
   839a8:	003fdd06 	br	83920 <rx_descriptor_end+0xfff838c0>
   839ac:	00800284 	movi	r2,10
   839b0:	88bfe61e 	bne	r17,r2,8394c <rx_descriptor_end+0xfff838ec>
   839b4:	9009883a 	mov	r4,r18
   839b8:	800b883a 	mov	r5,r16
   839bc:	0083e000 	call	83e00 <_fflush_r>
   839c0:	103fe226 	beq	r2,zero,8394c <rx_descriptor_end+0xfff838ec>
   839c4:	00bfffc4 	movi	r2,-1
   839c8:	003fe106 	br	83950 <rx_descriptor_end+0xfff838f0>
   839cc:	9009883a 	mov	r4,r18
   839d0:	800b883a 	mov	r5,r16
   839d4:	0083a280 	call	83a28 <__swsetup_r>
   839d8:	1000051e 	bne	r2,zero,839f0 <__swbuf_r+0x138>
   839dc:	8180030b 	ldhu	r6,12(r16)
   839e0:	80c00417 	ldw	r3,16(r16)
   839e4:	003fc606 	br	83900 <rx_descriptor_end+0xfff838a0>
   839e8:	00843a80 	call	843a8 <__sinit>
   839ec:	003fbd06 	br	838e4 <rx_descriptor_end+0xfff83884>
   839f0:	80c0030b 	ldhu	r3,12(r16)
   839f4:	00bfffc4 	movi	r2,-1
   839f8:	18c01014 	ori	r3,r3,64
   839fc:	80c0030d 	sth	r3,12(r16)
   83a00:	00c00244 	movi	r3,9
   83a04:	90c00015 	stw	r3,0(r18)
   83a08:	003fd106 	br	83950 <rx_descriptor_end+0xfff838f0>

00083a0c <__swbuf>:
   83a0c:	00c00234 	movhi	r3,8
   83a10:	18df0304 	addi	r3,r3,31756
   83a14:	2005883a 	mov	r2,r4
   83a18:	19000017 	ldw	r4,0(r3)
   83a1c:	280d883a 	mov	r6,r5
   83a20:	100b883a 	mov	r5,r2
   83a24:	00838b81 	jmpi	838b8 <__swbuf_r>

00083a28 <__swsetup_r>:
   83a28:	00800234 	movhi	r2,8
   83a2c:	defffd04 	addi	sp,sp,-12
   83a30:	109f0304 	addi	r2,r2,31756
   83a34:	dc400115 	stw	r17,4(sp)
   83a38:	2023883a 	mov	r17,r4
   83a3c:	11000017 	ldw	r4,0(r2)
   83a40:	dc000015 	stw	r16,0(sp)
   83a44:	dfc00215 	stw	ra,8(sp)
   83a48:	2821883a 	mov	r16,r5
   83a4c:	20000226 	beq	r4,zero,83a58 <__swsetup_r+0x30>
   83a50:	20c00e17 	ldw	r3,56(r4)
   83a54:	18002e26 	beq	r3,zero,83b10 <__swsetup_r+0xe8>
   83a58:	8080030b 	ldhu	r2,12(r16)
   83a5c:	10c0020c 	andi	r3,r2,8
   83a60:	100d883a 	mov	r6,r2
   83a64:	18000f26 	beq	r3,zero,83aa4 <__swsetup_r+0x7c>
   83a68:	80c00417 	ldw	r3,16(r16)
   83a6c:	18001526 	beq	r3,zero,83ac4 <__swsetup_r+0x9c>
   83a70:	1100004c 	andi	r4,r2,1
   83a74:	20001c1e 	bne	r4,zero,83ae8 <__swsetup_r+0xc0>
   83a78:	1080008c 	andi	r2,r2,2
   83a7c:	1000261e 	bne	r2,zero,83b18 <__swsetup_r+0xf0>
   83a80:	80800517 	ldw	r2,20(r16)
   83a84:	80800215 	stw	r2,8(r16)
   83a88:	18001c26 	beq	r3,zero,83afc <__swsetup_r+0xd4>
   83a8c:	0005883a 	mov	r2,zero
   83a90:	dfc00217 	ldw	ra,8(sp)
   83a94:	dc400117 	ldw	r17,4(sp)
   83a98:	dc000017 	ldw	r16,0(sp)
   83a9c:	dec00304 	addi	sp,sp,12
   83aa0:	f800283a 	ret
   83aa4:	3080040c 	andi	r2,r6,16
   83aa8:	10001726 	beq	r2,zero,83b08 <__swsetup_r+0xe0>
   83aac:	3080010c 	andi	r2,r6,4
   83ab0:	10001b1e 	bne	r2,zero,83b20 <__swsetup_r+0xf8>
   83ab4:	80c00417 	ldw	r3,16(r16)
   83ab8:	30800214 	ori	r2,r6,8
   83abc:	8080030d 	sth	r2,12(r16)
   83ac0:	183feb1e 	bne	r3,zero,83a70 <rx_descriptor_end+0xfff83a10>
   83ac4:	1140a00c 	andi	r5,r2,640
   83ac8:	01008004 	movi	r4,512
   83acc:	293fe826 	beq	r5,r4,83a70 <rx_descriptor_end+0xfff83a10>
   83ad0:	8809883a 	mov	r4,r17
   83ad4:	800b883a 	mov	r5,r16
   83ad8:	008497c0 	call	8497c <__smakebuf_r>
   83adc:	8080030b 	ldhu	r2,12(r16)
   83ae0:	80c00417 	ldw	r3,16(r16)
   83ae4:	003fe206 	br	83a70 <rx_descriptor_end+0xfff83a10>
   83ae8:	80800517 	ldw	r2,20(r16)
   83aec:	80000215 	stw	zero,8(r16)
   83af0:	0085c83a 	sub	r2,zero,r2
   83af4:	80800615 	stw	r2,24(r16)
   83af8:	183fe41e 	bne	r3,zero,83a8c <rx_descriptor_end+0xfff83a2c>
   83afc:	8080030b 	ldhu	r2,12(r16)
   83b00:	1080200c 	andi	r2,r2,128
   83b04:	103fe226 	beq	r2,zero,83a90 <rx_descriptor_end+0xfff83a30>
   83b08:	00bfffc4 	movi	r2,-1
   83b0c:	003fe006 	br	83a90 <rx_descriptor_end+0xfff83a30>
   83b10:	00843a80 	call	843a8 <__sinit>
   83b14:	003fd006 	br	83a58 <rx_descriptor_end+0xfff839f8>
   83b18:	0005883a 	mov	r2,zero
   83b1c:	003fd906 	br	83a84 <rx_descriptor_end+0xfff83a24>
   83b20:	81400c17 	ldw	r5,48(r16)
   83b24:	28000626 	beq	r5,zero,83b40 <__swsetup_r+0x118>
   83b28:	80801004 	addi	r2,r16,64
   83b2c:	28800326 	beq	r5,r2,83b3c <__swsetup_r+0x114>
   83b30:	8809883a 	mov	r4,r17
   83b34:	008451c0 	call	8451c <_free_r>
   83b38:	8180030b 	ldhu	r6,12(r16)
   83b3c:	80000c15 	stw	zero,48(r16)
   83b40:	80c00417 	ldw	r3,16(r16)
   83b44:	00bff6c4 	movi	r2,-37
   83b48:	118c703a 	and	r6,r2,r6
   83b4c:	80000115 	stw	zero,4(r16)
   83b50:	80c00015 	stw	r3,0(r16)
   83b54:	003fd806 	br	83ab8 <rx_descriptor_end+0xfff83a58>

00083b58 <__register_exitproc>:
   83b58:	00800234 	movhi	r2,8
   83b5c:	defffa04 	addi	sp,sp,-24
   83b60:	109f0204 	addi	r2,r2,31752
   83b64:	dc000315 	stw	r16,12(sp)
   83b68:	14000017 	ldw	r16,0(r2)
   83b6c:	dc400415 	stw	r17,16(sp)
   83b70:	dfc00515 	stw	ra,20(sp)
   83b74:	80805217 	ldw	r2,328(r16)
   83b78:	2023883a 	mov	r17,r4
   83b7c:	10003626 	beq	r2,zero,83c58 <__register_exitproc+0x100>
   83b80:	10c00117 	ldw	r3,4(r2)
   83b84:	010007c4 	movi	r4,31
   83b88:	20c00e16 	blt	r4,r3,83bc4 <__register_exitproc+0x6c>
   83b8c:	1a400044 	addi	r9,r3,1
   83b90:	8800211e 	bne	r17,zero,83c18 <__register_exitproc+0xc0>
   83b94:	18c00084 	addi	r3,r3,2
   83b98:	18c7883a 	add	r3,r3,r3
   83b9c:	18c7883a 	add	r3,r3,r3
   83ba0:	12400115 	stw	r9,4(r2)
   83ba4:	10c7883a 	add	r3,r2,r3
   83ba8:	19400015 	stw	r5,0(r3)
   83bac:	0005883a 	mov	r2,zero
   83bb0:	dfc00517 	ldw	ra,20(sp)
   83bb4:	dc400417 	ldw	r17,16(sp)
   83bb8:	dc000317 	ldw	r16,12(sp)
   83bbc:	dec00604 	addi	sp,sp,24
   83bc0:	f800283a 	ret
   83bc4:	00800034 	movhi	r2,0
   83bc8:	10800004 	addi	r2,r2,0
   83bcc:	10002526 	beq	r2,zero,83c64 <__register_exitproc+0x10c>
   83bd0:	01006404 	movi	r4,400
   83bd4:	d9400015 	stw	r5,0(sp)
   83bd8:	d9800115 	stw	r6,4(sp)
   83bdc:	d9c00215 	stw	r7,8(sp)
   83be0:	00000000 	call	0 <__reset-0x80000>
   83be4:	d9400017 	ldw	r5,0(sp)
   83be8:	d9800117 	ldw	r6,4(sp)
   83bec:	d9c00217 	ldw	r7,8(sp)
   83bf0:	10001c26 	beq	r2,zero,83c64 <__register_exitproc+0x10c>
   83bf4:	80c05217 	ldw	r3,328(r16)
   83bf8:	10000115 	stw	zero,4(r2)
   83bfc:	02400044 	movi	r9,1
   83c00:	10c00015 	stw	r3,0(r2)
   83c04:	80805215 	stw	r2,328(r16)
   83c08:	10006215 	stw	zero,392(r2)
   83c0c:	10006315 	stw	zero,396(r2)
   83c10:	0007883a 	mov	r3,zero
   83c14:	883fdf26 	beq	r17,zero,83b94 <rx_descriptor_end+0xfff83b34>
   83c18:	18d1883a 	add	r8,r3,r3
   83c1c:	4211883a 	add	r8,r8,r8
   83c20:	1211883a 	add	r8,r2,r8
   83c24:	41802215 	stw	r6,136(r8)
   83c28:	01000044 	movi	r4,1
   83c2c:	11806217 	ldw	r6,392(r2)
   83c30:	20c8983a 	sll	r4,r4,r3
   83c34:	310cb03a 	or	r6,r6,r4
   83c38:	11806215 	stw	r6,392(r2)
   83c3c:	41c04215 	stw	r7,264(r8)
   83c40:	01800084 	movi	r6,2
   83c44:	89bfd31e 	bne	r17,r6,83b94 <rx_descriptor_end+0xfff83b34>
   83c48:	11806317 	ldw	r6,396(r2)
   83c4c:	3108b03a 	or	r4,r6,r4
   83c50:	11006315 	stw	r4,396(r2)
   83c54:	003fcf06 	br	83b94 <rx_descriptor_end+0xfff83b34>
   83c58:	80805304 	addi	r2,r16,332
   83c5c:	80805215 	stw	r2,328(r16)
   83c60:	003fc706 	br	83b80 <rx_descriptor_end+0xfff83b20>
   83c64:	00bfffc4 	movi	r2,-1
   83c68:	003fd106 	br	83bb0 <rx_descriptor_end+0xfff83b50>

00083c6c <__call_exitprocs>:
   83c6c:	00800234 	movhi	r2,8
   83c70:	109f0204 	addi	r2,r2,31752
   83c74:	10800017 	ldw	r2,0(r2)
   83c78:	defff404 	addi	sp,sp,-48
   83c7c:	dd800815 	stw	r22,32(sp)
   83c80:	d8800015 	stw	r2,0(sp)
   83c84:	10805204 	addi	r2,r2,328
   83c88:	dd000615 	stw	r20,24(sp)
   83c8c:	dc800415 	stw	r18,16(sp)
   83c90:	dfc00b15 	stw	ra,44(sp)
   83c94:	df000a15 	stw	fp,40(sp)
   83c98:	ddc00915 	stw	r23,36(sp)
   83c9c:	dd400715 	stw	r21,28(sp)
   83ca0:	dcc00515 	stw	r19,20(sp)
   83ca4:	dc400315 	stw	r17,12(sp)
   83ca8:	dc000215 	stw	r16,8(sp)
   83cac:	2025883a 	mov	r18,r4
   83cb0:	2829883a 	mov	r20,r5
   83cb4:	d8800115 	stw	r2,4(sp)
   83cb8:	05bfffc4 	movi	r22,-1
   83cbc:	d8800017 	ldw	r2,0(sp)
   83cc0:	14c05217 	ldw	r19,328(r2)
   83cc4:	98001d26 	beq	r19,zero,83d3c <__call_exitprocs+0xd0>
   83cc8:	dd400117 	ldw	r21,4(sp)
   83ccc:	98800117 	ldw	r2,4(r19)
   83cd0:	173fffc4 	addi	fp,r2,-1
   83cd4:	e0000d16 	blt	fp,zero,83d0c <__call_exitprocs+0xa0>
   83cd8:	14000044 	addi	r16,r2,1
   83cdc:	8421883a 	add	r16,r16,r16
   83ce0:	8421883a 	add	r16,r16,r16
   83ce4:	84402004 	addi	r17,r16,128
   83ce8:	9c63883a 	add	r17,r19,r17
   83cec:	9c21883a 	add	r16,r19,r16
   83cf0:	a0001e26 	beq	r20,zero,83d6c <__call_exitprocs+0x100>
   83cf4:	80804017 	ldw	r2,256(r16)
   83cf8:	15001c26 	beq	r2,r20,83d6c <__call_exitprocs+0x100>
   83cfc:	e73fffc4 	addi	fp,fp,-1
   83d00:	843fff04 	addi	r16,r16,-4
   83d04:	8c7fff04 	addi	r17,r17,-4
   83d08:	e5bff91e 	bne	fp,r22,83cf0 <rx_descriptor_end+0xfff83c90>
   83d0c:	00800034 	movhi	r2,0
   83d10:	10800004 	addi	r2,r2,0
   83d14:	10000926 	beq	r2,zero,83d3c <__call_exitprocs+0xd0>
   83d18:	98800117 	ldw	r2,4(r19)
   83d1c:	1000311e 	bne	r2,zero,83de4 <__call_exitprocs+0x178>
   83d20:	98800017 	ldw	r2,0(r19)
   83d24:	10003426 	beq	r2,zero,83df8 <__call_exitprocs+0x18c>
   83d28:	9809883a 	mov	r4,r19
   83d2c:	a8800015 	stw	r2,0(r21)
   83d30:	00000000 	call	0 <__reset-0x80000>
   83d34:	acc00017 	ldw	r19,0(r21)
   83d38:	983fe41e 	bne	r19,zero,83ccc <rx_descriptor_end+0xfff83c6c>
   83d3c:	dfc00b17 	ldw	ra,44(sp)
   83d40:	df000a17 	ldw	fp,40(sp)
   83d44:	ddc00917 	ldw	r23,36(sp)
   83d48:	dd800817 	ldw	r22,32(sp)
   83d4c:	dd400717 	ldw	r21,28(sp)
   83d50:	dd000617 	ldw	r20,24(sp)
   83d54:	dcc00517 	ldw	r19,20(sp)
   83d58:	dc800417 	ldw	r18,16(sp)
   83d5c:	dc400317 	ldw	r17,12(sp)
   83d60:	dc000217 	ldw	r16,8(sp)
   83d64:	dec00c04 	addi	sp,sp,48
   83d68:	f800283a 	ret
   83d6c:	98800117 	ldw	r2,4(r19)
   83d70:	80c00017 	ldw	r3,0(r16)
   83d74:	10bfffc4 	addi	r2,r2,-1
   83d78:	17001526 	beq	r2,fp,83dd0 <__call_exitprocs+0x164>
   83d7c:	80000015 	stw	zero,0(r16)
   83d80:	183fde26 	beq	r3,zero,83cfc <rx_descriptor_end+0xfff83c9c>
   83d84:	00800044 	movi	r2,1
   83d88:	1708983a 	sll	r4,r2,fp
   83d8c:	98806217 	ldw	r2,392(r19)
   83d90:	9dc00117 	ldw	r23,4(r19)
   83d94:	2084703a 	and	r2,r4,r2
   83d98:	1000061e 	bne	r2,zero,83db4 <__call_exitprocs+0x148>
   83d9c:	183ee83a 	callr	r3
   83da0:	98800117 	ldw	r2,4(r19)
   83da4:	15ffc51e 	bne	r2,r23,83cbc <rx_descriptor_end+0xfff83c5c>
   83da8:	a8800017 	ldw	r2,0(r21)
   83dac:	14ffd326 	beq	r2,r19,83cfc <rx_descriptor_end+0xfff83c9c>
   83db0:	003fc206 	br	83cbc <rx_descriptor_end+0xfff83c5c>
   83db4:	98806317 	ldw	r2,396(r19)
   83db8:	2084703a 	and	r2,r4,r2
   83dbc:	1000061e 	bne	r2,zero,83dd8 <__call_exitprocs+0x16c>
   83dc0:	89400017 	ldw	r5,0(r17)
   83dc4:	9009883a 	mov	r4,r18
   83dc8:	183ee83a 	callr	r3
   83dcc:	003ff406 	br	83da0 <rx_descriptor_end+0xfff83d40>
   83dd0:	9f000115 	stw	fp,4(r19)
   83dd4:	003fea06 	br	83d80 <rx_descriptor_end+0xfff83d20>
   83dd8:	89000017 	ldw	r4,0(r17)
   83ddc:	183ee83a 	callr	r3
   83de0:	003fef06 	br	83da0 <rx_descriptor_end+0xfff83d40>
   83de4:	98800017 	ldw	r2,0(r19)
   83de8:	982b883a 	mov	r21,r19
   83dec:	1027883a 	mov	r19,r2
   83df0:	983fb61e 	bne	r19,zero,83ccc <rx_descriptor_end+0xfff83c6c>
   83df4:	003fd106 	br	83d3c <rx_descriptor_end+0xfff83cdc>
   83df8:	0005883a 	mov	r2,zero
   83dfc:	003ffa06 	br	83de8 <rx_descriptor_end+0xfff83d88>

00083e00 <_fflush_r>:
   83e00:	defffb04 	addi	sp,sp,-20
   83e04:	dcc00315 	stw	r19,12(sp)
   83e08:	dc000015 	stw	r16,0(sp)
   83e0c:	dfc00415 	stw	ra,16(sp)
   83e10:	dc800215 	stw	r18,8(sp)
   83e14:	dc400115 	stw	r17,4(sp)
   83e18:	2027883a 	mov	r19,r4
   83e1c:	2821883a 	mov	r16,r5
   83e20:	20000226 	beq	r4,zero,83e2c <_fflush_r+0x2c>
   83e24:	20800e17 	ldw	r2,56(r4)
   83e28:	10005326 	beq	r2,zero,83f78 <_fflush_r+0x178>
   83e2c:	8080030b 	ldhu	r2,12(r16)
   83e30:	10ffffcc 	andi	r3,r2,65535
   83e34:	18e0001c 	xori	r3,r3,32768
   83e38:	18e00004 	addi	r3,r3,-32768
   83e3c:	18002c26 	beq	r3,zero,83ef0 <_fflush_r+0xf0>
   83e40:	10c0020c 	andi	r3,r2,8
   83e44:	1800321e 	bne	r3,zero,83f10 <_fflush_r+0x110>
   83e48:	80c00117 	ldw	r3,4(r16)
   83e4c:	10820014 	ori	r2,r2,2048
   83e50:	8080030d 	sth	r2,12(r16)
   83e54:	00c0570e 	bge	zero,r3,83fb4 <_fflush_r+0x1b4>
   83e58:	82000a17 	ldw	r8,40(r16)
   83e5c:	40002426 	beq	r8,zero,83ef0 <_fflush_r+0xf0>
   83e60:	9c400017 	ldw	r17,0(r19)
   83e64:	10c4000c 	andi	r3,r2,4096
   83e68:	98000015 	stw	zero,0(r19)
   83e6c:	18004626 	beq	r3,zero,83f88 <_fflush_r+0x188>
   83e70:	81801417 	ldw	r6,80(r16)
   83e74:	10c0010c 	andi	r3,r2,4
   83e78:	18000626 	beq	r3,zero,83e94 <_fflush_r+0x94>
   83e7c:	80c00117 	ldw	r3,4(r16)
   83e80:	80800c17 	ldw	r2,48(r16)
   83e84:	30cdc83a 	sub	r6,r6,r3
   83e88:	10000226 	beq	r2,zero,83e94 <_fflush_r+0x94>
   83e8c:	80800f17 	ldw	r2,60(r16)
   83e90:	308dc83a 	sub	r6,r6,r2
   83e94:	81400717 	ldw	r5,28(r16)
   83e98:	9809883a 	mov	r4,r19
   83e9c:	000f883a 	mov	r7,zero
   83ea0:	403ee83a 	callr	r8
   83ea4:	00ffffc4 	movi	r3,-1
   83ea8:	10c04526 	beq	r2,r3,83fc0 <_fflush_r+0x1c0>
   83eac:	80c0030b 	ldhu	r3,12(r16)
   83eb0:	81000417 	ldw	r4,16(r16)
   83eb4:	80000115 	stw	zero,4(r16)
   83eb8:	197dffcc 	andi	r5,r3,63487
   83ebc:	8140030d 	sth	r5,12(r16)
   83ec0:	81000015 	stw	r4,0(r16)
   83ec4:	18c4000c 	andi	r3,r3,4096
   83ec8:	18000126 	beq	r3,zero,83ed0 <_fflush_r+0xd0>
   83ecc:	80801415 	stw	r2,80(r16)
   83ed0:	81400c17 	ldw	r5,48(r16)
   83ed4:	9c400015 	stw	r17,0(r19)
   83ed8:	28000526 	beq	r5,zero,83ef0 <_fflush_r+0xf0>
   83edc:	80801004 	addi	r2,r16,64
   83ee0:	28800226 	beq	r5,r2,83eec <_fflush_r+0xec>
   83ee4:	9809883a 	mov	r4,r19
   83ee8:	008451c0 	call	8451c <_free_r>
   83eec:	80000c15 	stw	zero,48(r16)
   83ef0:	0005883a 	mov	r2,zero
   83ef4:	dfc00417 	ldw	ra,16(sp)
   83ef8:	dcc00317 	ldw	r19,12(sp)
   83efc:	dc800217 	ldw	r18,8(sp)
   83f00:	dc400117 	ldw	r17,4(sp)
   83f04:	dc000017 	ldw	r16,0(sp)
   83f08:	dec00504 	addi	sp,sp,20
   83f0c:	f800283a 	ret
   83f10:	84800417 	ldw	r18,16(r16)
   83f14:	903ff626 	beq	r18,zero,83ef0 <rx_descriptor_end+0xfff83e90>
   83f18:	84400017 	ldw	r17,0(r16)
   83f1c:	108000cc 	andi	r2,r2,3
   83f20:	84800015 	stw	r18,0(r16)
   83f24:	8ca3c83a 	sub	r17,r17,r18
   83f28:	10001526 	beq	r2,zero,83f80 <_fflush_r+0x180>
   83f2c:	0005883a 	mov	r2,zero
   83f30:	80800215 	stw	r2,8(r16)
   83f34:	04400316 	blt	zero,r17,83f44 <_fflush_r+0x144>
   83f38:	003fed06 	br	83ef0 <rx_descriptor_end+0xfff83e90>
   83f3c:	90a5883a 	add	r18,r18,r2
   83f40:	047feb0e 	bge	zero,r17,83ef0 <rx_descriptor_end+0xfff83e90>
   83f44:	80800917 	ldw	r2,36(r16)
   83f48:	81400717 	ldw	r5,28(r16)
   83f4c:	880f883a 	mov	r7,r17
   83f50:	900d883a 	mov	r6,r18
   83f54:	9809883a 	mov	r4,r19
   83f58:	103ee83a 	callr	r2
   83f5c:	88a3c83a 	sub	r17,r17,r2
   83f60:	00bff616 	blt	zero,r2,83f3c <rx_descriptor_end+0xfff83edc>
   83f64:	80c0030b 	ldhu	r3,12(r16)
   83f68:	00bfffc4 	movi	r2,-1
   83f6c:	18c01014 	ori	r3,r3,64
   83f70:	80c0030d 	sth	r3,12(r16)
   83f74:	003fdf06 	br	83ef4 <rx_descriptor_end+0xfff83e94>
   83f78:	00843a80 	call	843a8 <__sinit>
   83f7c:	003fab06 	br	83e2c <rx_descriptor_end+0xfff83dcc>
   83f80:	80800517 	ldw	r2,20(r16)
   83f84:	003fea06 	br	83f30 <rx_descriptor_end+0xfff83ed0>
   83f88:	81400717 	ldw	r5,28(r16)
   83f8c:	000d883a 	mov	r6,zero
   83f90:	9809883a 	mov	r4,r19
   83f94:	01c00044 	movi	r7,1
   83f98:	403ee83a 	callr	r8
   83f9c:	100d883a 	mov	r6,r2
   83fa0:	00bfffc4 	movi	r2,-1
   83fa4:	30801326 	beq	r6,r2,83ff4 <_fflush_r+0x1f4>
   83fa8:	8080030b 	ldhu	r2,12(r16)
   83fac:	82000a17 	ldw	r8,40(r16)
   83fb0:	003fb006 	br	83e74 <rx_descriptor_end+0xfff83e14>
   83fb4:	80c00f17 	ldw	r3,60(r16)
   83fb8:	00ffa716 	blt	zero,r3,83e58 <rx_descriptor_end+0xfff83df8>
   83fbc:	003fcc06 	br	83ef0 <rx_descriptor_end+0xfff83e90>
   83fc0:	98c00017 	ldw	r3,0(r19)
   83fc4:	183fb926 	beq	r3,zero,83eac <rx_descriptor_end+0xfff83e4c>
   83fc8:	01000744 	movi	r4,29
   83fcc:	19000226 	beq	r3,r4,83fd8 <_fflush_r+0x1d8>
   83fd0:	01000584 	movi	r4,22
   83fd4:	1900101e 	bne	r3,r4,84018 <_fflush_r+0x218>
   83fd8:	8080030b 	ldhu	r2,12(r16)
   83fdc:	80c00417 	ldw	r3,16(r16)
   83fe0:	80000115 	stw	zero,4(r16)
   83fe4:	10bdffcc 	andi	r2,r2,63487
   83fe8:	8080030d 	sth	r2,12(r16)
   83fec:	80c00015 	stw	r3,0(r16)
   83ff0:	003fb706 	br	83ed0 <rx_descriptor_end+0xfff83e70>
   83ff4:	98800017 	ldw	r2,0(r19)
   83ff8:	103feb26 	beq	r2,zero,83fa8 <rx_descriptor_end+0xfff83f48>
   83ffc:	00c00744 	movi	r3,29
   84000:	10c00226 	beq	r2,r3,8400c <_fflush_r+0x20c>
   84004:	00c00584 	movi	r3,22
   84008:	10ffd61e 	bne	r2,r3,83f64 <rx_descriptor_end+0xfff83f04>
   8400c:	9c400015 	stw	r17,0(r19)
   84010:	0005883a 	mov	r2,zero
   84014:	003fb706 	br	83ef4 <rx_descriptor_end+0xfff83e94>
   84018:	80c0030b 	ldhu	r3,12(r16)
   8401c:	18c01014 	ori	r3,r3,64
   84020:	80c0030d 	sth	r3,12(r16)
   84024:	003fb306 	br	83ef4 <rx_descriptor_end+0xfff83e94>

00084028 <fflush>:
   84028:	20000526 	beq	r4,zero,84040 <fflush+0x18>
   8402c:	00800234 	movhi	r2,8
   84030:	109f0304 	addi	r2,r2,31756
   84034:	200b883a 	mov	r5,r4
   84038:	11000017 	ldw	r4,0(r2)
   8403c:	0083e001 	jmpi	83e00 <_fflush_r>
   84040:	00800234 	movhi	r2,8
   84044:	109f0204 	addi	r2,r2,31752
   84048:	11000017 	ldw	r4,0(r2)
   8404c:	01400234 	movhi	r5,8
   84050:	294f8004 	addi	r5,r5,15872
   84054:	00848c41 	jmpi	848c4 <_fwalk_reent>

00084058 <__fp_lock>:
   84058:	0005883a 	mov	r2,zero
   8405c:	f800283a 	ret

00084060 <__fp_unlock>:
   84060:	0005883a 	mov	r2,zero
   84064:	f800283a 	ret

00084068 <_cleanup_r>:
   84068:	01400234 	movhi	r5,8
   8406c:	2955d004 	addi	r5,r5,22336
   84070:	008480c1 	jmpi	8480c <_fwalk>

00084074 <__sinit.part.1>:
   84074:	defff604 	addi	sp,sp,-40
   84078:	00c00234 	movhi	r3,8
   8407c:	dfc00915 	stw	ra,36(sp)
   84080:	df000815 	stw	fp,32(sp)
   84084:	ddc00715 	stw	r23,28(sp)
   84088:	dd800615 	stw	r22,24(sp)
   8408c:	dd400515 	stw	r21,20(sp)
   84090:	dd000415 	stw	r20,16(sp)
   84094:	dcc00315 	stw	r19,12(sp)
   84098:	dc800215 	stw	r18,8(sp)
   8409c:	dc400115 	stw	r17,4(sp)
   840a0:	dc000015 	stw	r16,0(sp)
   840a4:	18d01a04 	addi	r3,r3,16488
   840a8:	24000117 	ldw	r16,4(r4)
   840ac:	20c00f15 	stw	r3,60(r4)
   840b0:	07000044 	movi	fp,1
   840b4:	00c000c4 	movi	r3,3
   840b8:	2080bb04 	addi	r2,r4,748
   840bc:	20c0b915 	stw	r3,740(r4)
   840c0:	27000e15 	stw	fp,56(r4)
   840c4:	2080ba15 	stw	r2,744(r4)
   840c8:	2000b815 	stw	zero,736(r4)
   840cc:	05c00204 	movi	r23,8
   840d0:	00800104 	movi	r2,4
   840d4:	2025883a 	mov	r18,r4
   840d8:	b80d883a 	mov	r6,r23
   840dc:	81001704 	addi	r4,r16,92
   840e0:	000b883a 	mov	r5,zero
   840e4:	80000015 	stw	zero,0(r16)
   840e8:	80000115 	stw	zero,4(r16)
   840ec:	80000215 	stw	zero,8(r16)
   840f0:	8080030d 	sth	r2,12(r16)
   840f4:	80001915 	stw	zero,100(r16)
   840f8:	8000038d 	sth	zero,14(r16)
   840fc:	80000415 	stw	zero,16(r16)
   84100:	80000515 	stw	zero,20(r16)
   84104:	80000615 	stw	zero,24(r16)
   84108:	00852dc0 	call	852dc <memset>
   8410c:	05800234 	movhi	r22,8
   84110:	94400217 	ldw	r17,8(r18)
   84114:	05400234 	movhi	r21,8
   84118:	05000234 	movhi	r20,8
   8411c:	04c00234 	movhi	r19,8
   84120:	b5951504 	addi	r22,r22,21588
   84124:	ad552c04 	addi	r21,r21,21680
   84128:	a5154b04 	addi	r20,r20,21804
   8412c:	9cd56204 	addi	r19,r19,21896
   84130:	85800815 	stw	r22,32(r16)
   84134:	85400915 	stw	r21,36(r16)
   84138:	85000a15 	stw	r20,40(r16)
   8413c:	84c00b15 	stw	r19,44(r16)
   84140:	84000715 	stw	r16,28(r16)
   84144:	00800284 	movi	r2,10
   84148:	89001704 	addi	r4,r17,92
   8414c:	b80d883a 	mov	r6,r23
   84150:	000b883a 	mov	r5,zero
   84154:	88000015 	stw	zero,0(r17)
   84158:	88000115 	stw	zero,4(r17)
   8415c:	88000215 	stw	zero,8(r17)
   84160:	8880030d 	sth	r2,12(r17)
   84164:	88001915 	stw	zero,100(r17)
   84168:	8f00038d 	sth	fp,14(r17)
   8416c:	88000415 	stw	zero,16(r17)
   84170:	88000515 	stw	zero,20(r17)
   84174:	88000615 	stw	zero,24(r17)
   84178:	00852dc0 	call	852dc <memset>
   8417c:	94000317 	ldw	r16,12(r18)
   84180:	00800484 	movi	r2,18
   84184:	8c400715 	stw	r17,28(r17)
   84188:	8d800815 	stw	r22,32(r17)
   8418c:	8d400915 	stw	r21,36(r17)
   84190:	8d000a15 	stw	r20,40(r17)
   84194:	8cc00b15 	stw	r19,44(r17)
   84198:	8080030d 	sth	r2,12(r16)
   8419c:	00800084 	movi	r2,2
   841a0:	80000015 	stw	zero,0(r16)
   841a4:	80000115 	stw	zero,4(r16)
   841a8:	80000215 	stw	zero,8(r16)
   841ac:	80001915 	stw	zero,100(r16)
   841b0:	8080038d 	sth	r2,14(r16)
   841b4:	80000415 	stw	zero,16(r16)
   841b8:	80000515 	stw	zero,20(r16)
   841bc:	80000615 	stw	zero,24(r16)
   841c0:	81001704 	addi	r4,r16,92
   841c4:	000b883a 	mov	r5,zero
   841c8:	b80d883a 	mov	r6,r23
   841cc:	00852dc0 	call	852dc <memset>
   841d0:	84000715 	stw	r16,28(r16)
   841d4:	85800815 	stw	r22,32(r16)
   841d8:	85400915 	stw	r21,36(r16)
   841dc:	85000a15 	stw	r20,40(r16)
   841e0:	84c00b15 	stw	r19,44(r16)
   841e4:	dfc00917 	ldw	ra,36(sp)
   841e8:	df000817 	ldw	fp,32(sp)
   841ec:	ddc00717 	ldw	r23,28(sp)
   841f0:	dd800617 	ldw	r22,24(sp)
   841f4:	dd400517 	ldw	r21,20(sp)
   841f8:	dd000417 	ldw	r20,16(sp)
   841fc:	dcc00317 	ldw	r19,12(sp)
   84200:	dc800217 	ldw	r18,8(sp)
   84204:	dc400117 	ldw	r17,4(sp)
   84208:	dc000017 	ldw	r16,0(sp)
   8420c:	dec00a04 	addi	sp,sp,40
   84210:	f800283a 	ret

00084214 <__sfmoreglue>:
   84214:	defffc04 	addi	sp,sp,-16
   84218:	dc400115 	stw	r17,4(sp)
   8421c:	2c401a24 	muli	r17,r5,104
   84220:	dc800215 	stw	r18,8(sp)
   84224:	2825883a 	mov	r18,r5
   84228:	89400304 	addi	r5,r17,12
   8422c:	dc000015 	stw	r16,0(sp)
   84230:	dfc00315 	stw	ra,12(sp)
   84234:	0084b340 	call	84b34 <_malloc_r>
   84238:	1021883a 	mov	r16,r2
   8423c:	10000726 	beq	r2,zero,8425c <__sfmoreglue+0x48>
   84240:	11000304 	addi	r4,r2,12
   84244:	10000015 	stw	zero,0(r2)
   84248:	14800115 	stw	r18,4(r2)
   8424c:	11000215 	stw	r4,8(r2)
   84250:	000b883a 	mov	r5,zero
   84254:	880d883a 	mov	r6,r17
   84258:	00852dc0 	call	852dc <memset>
   8425c:	8005883a 	mov	r2,r16
   84260:	dfc00317 	ldw	ra,12(sp)
   84264:	dc800217 	ldw	r18,8(sp)
   84268:	dc400117 	ldw	r17,4(sp)
   8426c:	dc000017 	ldw	r16,0(sp)
   84270:	dec00404 	addi	sp,sp,16
   84274:	f800283a 	ret

00084278 <__sfp>:
   84278:	00800234 	movhi	r2,8
   8427c:	defffb04 	addi	sp,sp,-20
   84280:	109f0204 	addi	r2,r2,31752
   84284:	dc800215 	stw	r18,8(sp)
   84288:	14800017 	ldw	r18,0(r2)
   8428c:	dcc00315 	stw	r19,12(sp)
   84290:	dfc00415 	stw	ra,16(sp)
   84294:	90800e17 	ldw	r2,56(r18)
   84298:	dc400115 	stw	r17,4(sp)
   8429c:	dc000015 	stw	r16,0(sp)
   842a0:	2027883a 	mov	r19,r4
   842a4:	1000021e 	bne	r2,zero,842b0 <__sfp+0x38>
   842a8:	9009883a 	mov	r4,r18
   842ac:	00840740 	call	84074 <__sinit.part.1>
   842b0:	9480b804 	addi	r18,r18,736
   842b4:	047fffc4 	movi	r17,-1
   842b8:	91400117 	ldw	r5,4(r18)
   842bc:	94000217 	ldw	r16,8(r18)
   842c0:	297fffc4 	addi	r5,r5,-1
   842c4:	28000a16 	blt	r5,zero,842f0 <__sfp+0x78>
   842c8:	8080030f 	ldh	r2,12(r16)
   842cc:	10000c26 	beq	r2,zero,84300 <__sfp+0x88>
   842d0:	80c01d04 	addi	r3,r16,116
   842d4:	00000206 	br	842e0 <__sfp+0x68>
   842d8:	18bfe60f 	ldh	r2,-104(r3)
   842dc:	10000826 	beq	r2,zero,84300 <__sfp+0x88>
   842e0:	297fffc4 	addi	r5,r5,-1
   842e4:	1c3ffd04 	addi	r16,r3,-12
   842e8:	18c01a04 	addi	r3,r3,104
   842ec:	2c7ffa1e 	bne	r5,r17,842d8 <rx_descriptor_end+0xfff84278>
   842f0:	90800017 	ldw	r2,0(r18)
   842f4:	10001d26 	beq	r2,zero,8436c <__sfp+0xf4>
   842f8:	1025883a 	mov	r18,r2
   842fc:	003fee06 	br	842b8 <rx_descriptor_end+0xfff84258>
   84300:	00bfffc4 	movi	r2,-1
   84304:	8080038d 	sth	r2,14(r16)
   84308:	00800044 	movi	r2,1
   8430c:	8080030d 	sth	r2,12(r16)
   84310:	80001915 	stw	zero,100(r16)
   84314:	80000015 	stw	zero,0(r16)
   84318:	80000215 	stw	zero,8(r16)
   8431c:	80000115 	stw	zero,4(r16)
   84320:	80000415 	stw	zero,16(r16)
   84324:	80000515 	stw	zero,20(r16)
   84328:	80000615 	stw	zero,24(r16)
   8432c:	81001704 	addi	r4,r16,92
   84330:	000b883a 	mov	r5,zero
   84334:	01800204 	movi	r6,8
   84338:	00852dc0 	call	852dc <memset>
   8433c:	8005883a 	mov	r2,r16
   84340:	80000c15 	stw	zero,48(r16)
   84344:	80000d15 	stw	zero,52(r16)
   84348:	80001115 	stw	zero,68(r16)
   8434c:	80001215 	stw	zero,72(r16)
   84350:	dfc00417 	ldw	ra,16(sp)
   84354:	dcc00317 	ldw	r19,12(sp)
   84358:	dc800217 	ldw	r18,8(sp)
   8435c:	dc400117 	ldw	r17,4(sp)
   84360:	dc000017 	ldw	r16,0(sp)
   84364:	dec00504 	addi	sp,sp,20
   84368:	f800283a 	ret
   8436c:	9809883a 	mov	r4,r19
   84370:	01400104 	movi	r5,4
   84374:	00842140 	call	84214 <__sfmoreglue>
   84378:	90800015 	stw	r2,0(r18)
   8437c:	103fde1e 	bne	r2,zero,842f8 <rx_descriptor_end+0xfff84298>
   84380:	00800304 	movi	r2,12
   84384:	98800015 	stw	r2,0(r19)
   84388:	0005883a 	mov	r2,zero
   8438c:	003ff006 	br	84350 <rx_descriptor_end+0xfff842f0>

00084390 <_cleanup>:
   84390:	00800234 	movhi	r2,8
   84394:	109f0204 	addi	r2,r2,31752
   84398:	11000017 	ldw	r4,0(r2)
   8439c:	01400234 	movhi	r5,8
   843a0:	2955d004 	addi	r5,r5,22336
   843a4:	008480c1 	jmpi	8480c <_fwalk>

000843a8 <__sinit>:
   843a8:	20800e17 	ldw	r2,56(r4)
   843ac:	10000126 	beq	r2,zero,843b4 <__sinit+0xc>
   843b0:	f800283a 	ret
   843b4:	00840741 	jmpi	84074 <__sinit.part.1>

000843b8 <__sfp_lock_acquire>:
   843b8:	f800283a 	ret

000843bc <__sfp_lock_release>:
   843bc:	f800283a 	ret

000843c0 <__sinit_lock_acquire>:
   843c0:	f800283a 	ret

000843c4 <__sinit_lock_release>:
   843c4:	f800283a 	ret

000843c8 <__fp_lock_all>:
   843c8:	00800234 	movhi	r2,8
   843cc:	109f0304 	addi	r2,r2,31756
   843d0:	11000017 	ldw	r4,0(r2)
   843d4:	01400234 	movhi	r5,8
   843d8:	29501604 	addi	r5,r5,16472
   843dc:	008480c1 	jmpi	8480c <_fwalk>

000843e0 <__fp_unlock_all>:
   843e0:	00800234 	movhi	r2,8
   843e4:	109f0304 	addi	r2,r2,31756
   843e8:	11000017 	ldw	r4,0(r2)
   843ec:	01400234 	movhi	r5,8
   843f0:	29501804 	addi	r5,r5,16480
   843f4:	008480c1 	jmpi	8480c <_fwalk>

000843f8 <_malloc_trim_r>:
   843f8:	defffb04 	addi	sp,sp,-20
   843fc:	dcc00315 	stw	r19,12(sp)
   84400:	04c00234 	movhi	r19,8
   84404:	dc800215 	stw	r18,8(sp)
   84408:	dc400115 	stw	r17,4(sp)
   8440c:	dc000015 	stw	r16,0(sp)
   84410:	dfc00415 	stw	ra,16(sp)
   84414:	2821883a 	mov	r16,r5
   84418:	9cddf504 	addi	r19,r19,30676
   8441c:	2025883a 	mov	r18,r4
   84420:	0085c040 	call	85c04 <__malloc_lock>
   84424:	98800217 	ldw	r2,8(r19)
   84428:	14400117 	ldw	r17,4(r2)
   8442c:	00bfff04 	movi	r2,-4
   84430:	88a2703a 	and	r17,r17,r2
   84434:	8c21c83a 	sub	r16,r17,r16
   84438:	8403fbc4 	addi	r16,r16,4079
   8443c:	8020d33a 	srli	r16,r16,12
   84440:	0083ffc4 	movi	r2,4095
   84444:	843fffc4 	addi	r16,r16,-1
   84448:	8020933a 	slli	r16,r16,12
   8444c:	1400060e 	bge	r2,r16,84468 <_malloc_trim_r+0x70>
   84450:	9009883a 	mov	r4,r18
   84454:	000b883a 	mov	r5,zero
   84458:	00854000 	call	85400 <_sbrk_r>
   8445c:	98c00217 	ldw	r3,8(r19)
   84460:	1c47883a 	add	r3,r3,r17
   84464:	10c00a26 	beq	r2,r3,84490 <_malloc_trim_r+0x98>
   84468:	9009883a 	mov	r4,r18
   8446c:	0085c240 	call	85c24 <__malloc_unlock>
   84470:	0005883a 	mov	r2,zero
   84474:	dfc00417 	ldw	ra,16(sp)
   84478:	dcc00317 	ldw	r19,12(sp)
   8447c:	dc800217 	ldw	r18,8(sp)
   84480:	dc400117 	ldw	r17,4(sp)
   84484:	dc000017 	ldw	r16,0(sp)
   84488:	dec00504 	addi	sp,sp,20
   8448c:	f800283a 	ret
   84490:	9009883a 	mov	r4,r18
   84494:	040bc83a 	sub	r5,zero,r16
   84498:	00854000 	call	85400 <_sbrk_r>
   8449c:	00ffffc4 	movi	r3,-1
   844a0:	10c00d26 	beq	r2,r3,844d8 <_malloc_trim_r+0xe0>
   844a4:	00c00274 	movhi	r3,9
   844a8:	18e6cb04 	addi	r3,r3,-25812
   844ac:	18800017 	ldw	r2,0(r3)
   844b0:	99000217 	ldw	r4,8(r19)
   844b4:	8c23c83a 	sub	r17,r17,r16
   844b8:	8c400054 	ori	r17,r17,1
   844bc:	1421c83a 	sub	r16,r2,r16
   844c0:	24400115 	stw	r17,4(r4)
   844c4:	9009883a 	mov	r4,r18
   844c8:	1c000015 	stw	r16,0(r3)
   844cc:	0085c240 	call	85c24 <__malloc_unlock>
   844d0:	00800044 	movi	r2,1
   844d4:	003fe706 	br	84474 <rx_descriptor_end+0xfff84414>
   844d8:	9009883a 	mov	r4,r18
   844dc:	000b883a 	mov	r5,zero
   844e0:	00854000 	call	85400 <_sbrk_r>
   844e4:	99000217 	ldw	r4,8(r19)
   844e8:	014003c4 	movi	r5,15
   844ec:	1107c83a 	sub	r3,r2,r4
   844f0:	28ffdd0e 	bge	r5,r3,84468 <rx_descriptor_end+0xfff84408>
   844f4:	01400234 	movhi	r5,8
   844f8:	295f0404 	addi	r5,r5,31760
   844fc:	29400017 	ldw	r5,0(r5)
   84500:	18c00054 	ori	r3,r3,1
   84504:	20c00115 	stw	r3,4(r4)
   84508:	00c00274 	movhi	r3,9
   8450c:	1145c83a 	sub	r2,r2,r5
   84510:	18e6cb04 	addi	r3,r3,-25812
   84514:	18800015 	stw	r2,0(r3)
   84518:	003fd306 	br	84468 <rx_descriptor_end+0xfff84408>

0008451c <_free_r>:
   8451c:	28004c26 	beq	r5,zero,84650 <_free_r+0x134>
   84520:	defffd04 	addi	sp,sp,-12
   84524:	dc400115 	stw	r17,4(sp)
   84528:	dc000015 	stw	r16,0(sp)
   8452c:	2023883a 	mov	r17,r4
   84530:	2821883a 	mov	r16,r5
   84534:	dfc00215 	stw	ra,8(sp)
   84538:	0085c040 	call	85c04 <__malloc_lock>
   8453c:	813fff17 	ldw	r4,-4(r16)
   84540:	00bfff84 	movi	r2,-2
   84544:	02400234 	movhi	r9,8
   84548:	81bffe04 	addi	r6,r16,-8
   8454c:	2084703a 	and	r2,r4,r2
   84550:	4a5df504 	addi	r9,r9,30676
   84554:	308b883a 	add	r5,r6,r2
   84558:	2a000117 	ldw	r8,4(r5)
   8455c:	49c00217 	ldw	r7,8(r9)
   84560:	00ffff04 	movi	r3,-4
   84564:	40c6703a 	and	r3,r8,r3
   84568:	39405326 	beq	r7,r5,846b8 <_free_r+0x19c>
   8456c:	28c00115 	stw	r3,4(r5)
   84570:	2100004c 	andi	r4,r4,1
   84574:	2000091e 	bne	r4,zero,8459c <_free_r+0x80>
   84578:	81fffe17 	ldw	r7,-8(r16)
   8457c:	4a000204 	addi	r8,r9,8
   84580:	31cdc83a 	sub	r6,r6,r7
   84584:	31000217 	ldw	r4,8(r6)
   84588:	11c5883a 	add	r2,r2,r7
   8458c:	22006126 	beq	r4,r8,84714 <_free_r+0x1f8>
   84590:	31c00317 	ldw	r7,12(r6)
   84594:	21c00315 	stw	r7,12(r4)
   84598:	39000215 	stw	r4,8(r7)
   8459c:	28c9883a 	add	r4,r5,r3
   845a0:	21c00117 	ldw	r7,4(r4)
   845a4:	39c0004c 	andi	r7,r7,1
   845a8:	38000d1e 	bne	r7,zero,845e0 <_free_r+0xc4>
   845ac:	29000217 	ldw	r4,8(r5)
   845b0:	10c5883a 	add	r2,r2,r3
   845b4:	00c00234 	movhi	r3,8
   845b8:	18ddf704 	addi	r3,r3,30684
   845bc:	20c07526 	beq	r4,r3,84794 <_free_r+0x278>
   845c0:	29c00317 	ldw	r7,12(r5)
   845c4:	11400054 	ori	r5,r2,1
   845c8:	3087883a 	add	r3,r6,r2
   845cc:	21c00315 	stw	r7,12(r4)
   845d0:	39000215 	stw	r4,8(r7)
   845d4:	31400115 	stw	r5,4(r6)
   845d8:	18800015 	stw	r2,0(r3)
   845dc:	00000406 	br	845f0 <_free_r+0xd4>
   845e0:	10c00054 	ori	r3,r2,1
   845e4:	30c00115 	stw	r3,4(r6)
   845e8:	3087883a 	add	r3,r6,r2
   845ec:	18800015 	stw	r2,0(r3)
   845f0:	00c07fc4 	movi	r3,511
   845f4:	18801736 	bltu	r3,r2,84654 <_free_r+0x138>
   845f8:	1004d0fa 	srli	r2,r2,3
   845fc:	01400044 	movi	r5,1
   84600:	49000117 	ldw	r4,4(r9)
   84604:	1087883a 	add	r3,r2,r2
   84608:	18c7883a 	add	r3,r3,r3
   8460c:	1005d0ba 	srai	r2,r2,2
   84610:	18c7883a 	add	r3,r3,r3
   84614:	1a47883a 	add	r3,r3,r9
   84618:	19c00217 	ldw	r7,8(r3)
   8461c:	2884983a 	sll	r2,r5,r2
   84620:	30c00315 	stw	r3,12(r6)
   84624:	31c00215 	stw	r7,8(r6)
   84628:	1104b03a 	or	r2,r2,r4
   8462c:	19800215 	stw	r6,8(r3)
   84630:	48800115 	stw	r2,4(r9)
   84634:	39800315 	stw	r6,12(r7)
   84638:	8809883a 	mov	r4,r17
   8463c:	dfc00217 	ldw	ra,8(sp)
   84640:	dc400117 	ldw	r17,4(sp)
   84644:	dc000017 	ldw	r16,0(sp)
   84648:	dec00304 	addi	sp,sp,12
   8464c:	0085c241 	jmpi	85c24 <__malloc_unlock>
   84650:	f800283a 	ret
   84654:	1006d27a 	srli	r3,r2,9
   84658:	01000104 	movi	r4,4
   8465c:	20c04036 	bltu	r4,r3,84760 <_free_r+0x244>
   84660:	1006d1ba 	srli	r3,r2,6
   84664:	19400e04 	addi	r5,r3,56
   84668:	2947883a 	add	r3,r5,r5
   8466c:	18c7883a 	add	r3,r3,r3
   84670:	18c7883a 	add	r3,r3,r3
   84674:	1a49883a 	add	r4,r3,r9
   84678:	20c00217 	ldw	r3,8(r4)
   8467c:	01c00234 	movhi	r7,8
   84680:	39ddf504 	addi	r7,r7,30676
   84684:	19003b26 	beq	r3,r4,84774 <_free_r+0x258>
   84688:	01ffff04 	movi	r7,-4
   8468c:	19400117 	ldw	r5,4(r3)
   84690:	29ca703a 	and	r5,r5,r7
   84694:	1140022e 	bgeu	r2,r5,846a0 <_free_r+0x184>
   84698:	18c00217 	ldw	r3,8(r3)
   8469c:	20fffb1e 	bne	r4,r3,8468c <rx_descriptor_end+0xfff8462c>
   846a0:	18800317 	ldw	r2,12(r3)
   846a4:	30800315 	stw	r2,12(r6)
   846a8:	30c00215 	stw	r3,8(r6)
   846ac:	11800215 	stw	r6,8(r2)
   846b0:	19800315 	stw	r6,12(r3)
   846b4:	003fe006 	br	84638 <rx_descriptor_end+0xfff845d8>
   846b8:	2100004c 	andi	r4,r4,1
   846bc:	1885883a 	add	r2,r3,r2
   846c0:	2000071e 	bne	r4,zero,846e0 <_free_r+0x1c4>
   846c4:	817ffe17 	ldw	r5,-8(r16)
   846c8:	314dc83a 	sub	r6,r6,r5
   846cc:	30c00317 	ldw	r3,12(r6)
   846d0:	31000217 	ldw	r4,8(r6)
   846d4:	1145883a 	add	r2,r2,r5
   846d8:	20c00315 	stw	r3,12(r4)
   846dc:	19000215 	stw	r4,8(r3)
   846e0:	10c00054 	ori	r3,r2,1
   846e4:	30c00115 	stw	r3,4(r6)
   846e8:	00c00234 	movhi	r3,8
   846ec:	18df0504 	addi	r3,r3,31764
   846f0:	18c00017 	ldw	r3,0(r3)
   846f4:	49800215 	stw	r6,8(r9)
   846f8:	10ffcf36 	bltu	r2,r3,84638 <rx_descriptor_end+0xfff845d8>
   846fc:	00800274 	movhi	r2,9
   84700:	10a5ca04 	addi	r2,r2,-26840
   84704:	11400017 	ldw	r5,0(r2)
   84708:	8809883a 	mov	r4,r17
   8470c:	00843f80 	call	843f8 <_malloc_trim_r>
   84710:	003fc906 	br	84638 <rx_descriptor_end+0xfff845d8>
   84714:	28c9883a 	add	r4,r5,r3
   84718:	21000117 	ldw	r4,4(r4)
   8471c:	2100004c 	andi	r4,r4,1
   84720:	20000a1e 	bne	r4,zero,8474c <_free_r+0x230>
   84724:	29000317 	ldw	r4,12(r5)
   84728:	29400217 	ldw	r5,8(r5)
   8472c:	10c5883a 	add	r2,r2,r3
   84730:	10c00054 	ori	r3,r2,1
   84734:	29000315 	stw	r4,12(r5)
   84738:	21400215 	stw	r5,8(r4)
   8473c:	30c00115 	stw	r3,4(r6)
   84740:	308d883a 	add	r6,r6,r2
   84744:	30800015 	stw	r2,0(r6)
   84748:	003fbb06 	br	84638 <rx_descriptor_end+0xfff845d8>
   8474c:	10c00054 	ori	r3,r2,1
   84750:	30c00115 	stw	r3,4(r6)
   84754:	308d883a 	add	r6,r6,r2
   84758:	30800015 	stw	r2,0(r6)
   8475c:	003fb606 	br	84638 <rx_descriptor_end+0xfff845d8>
   84760:	01000504 	movi	r4,20
   84764:	20c01436 	bltu	r4,r3,847b8 <_free_r+0x29c>
   84768:	194016c4 	addi	r5,r3,91
   8476c:	2947883a 	add	r3,r5,r5
   84770:	003fbe06 	br	8466c <rx_descriptor_end+0xfff8460c>
   84774:	280bd0ba 	srai	r5,r5,2
   84778:	00800044 	movi	r2,1
   8477c:	39000117 	ldw	r4,4(r7)
   84780:	114a983a 	sll	r5,r2,r5
   84784:	1805883a 	mov	r2,r3
   84788:	2908b03a 	or	r4,r5,r4
   8478c:	39000115 	stw	r4,4(r7)
   84790:	003fc406 	br	846a4 <rx_descriptor_end+0xfff84644>
   84794:	49800515 	stw	r6,20(r9)
   84798:	49800415 	stw	r6,16(r9)
   8479c:	10c00054 	ori	r3,r2,1
   847a0:	31000315 	stw	r4,12(r6)
   847a4:	31000215 	stw	r4,8(r6)
   847a8:	30c00115 	stw	r3,4(r6)
   847ac:	308d883a 	add	r6,r6,r2
   847b0:	30800015 	stw	r2,0(r6)
   847b4:	003fa006 	br	84638 <rx_descriptor_end+0xfff845d8>
   847b8:	01001504 	movi	r4,84
   847bc:	20c00436 	bltu	r4,r3,847d0 <_free_r+0x2b4>
   847c0:	1006d33a 	srli	r3,r2,12
   847c4:	19401b84 	addi	r5,r3,110
   847c8:	2947883a 	add	r3,r5,r5
   847cc:	003fa706 	br	8466c <rx_descriptor_end+0xfff8460c>
   847d0:	01005504 	movi	r4,340
   847d4:	20c00436 	bltu	r4,r3,847e8 <_free_r+0x2cc>
   847d8:	1006d3fa 	srli	r3,r2,15
   847dc:	19401dc4 	addi	r5,r3,119
   847e0:	2947883a 	add	r3,r5,r5
   847e4:	003fa106 	br	8466c <rx_descriptor_end+0xfff8460c>
   847e8:	01015504 	movi	r4,1364
   847ec:	20c00436 	bltu	r4,r3,84800 <_free_r+0x2e4>
   847f0:	1006d4ba 	srli	r3,r2,18
   847f4:	19401f04 	addi	r5,r3,124
   847f8:	2947883a 	add	r3,r5,r5
   847fc:	003f9b06 	br	8466c <rx_descriptor_end+0xfff8460c>
   84800:	00c03f04 	movi	r3,252
   84804:	01401f84 	movi	r5,126
   84808:	003f9806 	br	8466c <rx_descriptor_end+0xfff8460c>

0008480c <_fwalk>:
   8480c:	defff804 	addi	sp,sp,-32
   84810:	dd400515 	stw	r21,20(sp)
   84814:	2540b804 	addi	r21,r4,736
   84818:	dd800615 	stw	r22,24(sp)
   8481c:	dd000415 	stw	r20,16(sp)
   84820:	dfc00715 	stw	ra,28(sp)
   84824:	dcc00315 	stw	r19,12(sp)
   84828:	dc800215 	stw	r18,8(sp)
   8482c:	dc400115 	stw	r17,4(sp)
   84830:	dc000015 	stw	r16,0(sp)
   84834:	2829883a 	mov	r20,r5
   84838:	002d883a 	mov	r22,zero
   8483c:	00843b80 	call	843b8 <__sfp_lock_acquire>
   84840:	a8001426 	beq	r21,zero,84894 <_fwalk+0x88>
   84844:	04ffffc4 	movi	r19,-1
   84848:	ac400117 	ldw	r17,4(r21)
   8484c:	ac800217 	ldw	r18,8(r21)
   84850:	8c7fffc4 	addi	r17,r17,-1
   84854:	88000d16 	blt	r17,zero,8488c <_fwalk+0x80>
   84858:	94000304 	addi	r16,r18,12
   8485c:	94800384 	addi	r18,r18,14
   84860:	80c0000f 	ldh	r3,0(r16)
   84864:	8c7fffc4 	addi	r17,r17,-1
   84868:	813ffd04 	addi	r4,r16,-12
   8486c:	18000426 	beq	r3,zero,84880 <_fwalk+0x74>
   84870:	90c0000f 	ldh	r3,0(r18)
   84874:	1cc00226 	beq	r3,r19,84880 <_fwalk+0x74>
   84878:	a03ee83a 	callr	r20
   8487c:	b0acb03a 	or	r22,r22,r2
   84880:	84001a04 	addi	r16,r16,104
   84884:	94801a04 	addi	r18,r18,104
   84888:	8cfff51e 	bne	r17,r19,84860 <rx_descriptor_end+0xfff84800>
   8488c:	ad400017 	ldw	r21,0(r21)
   84890:	a83fed1e 	bne	r21,zero,84848 <rx_descriptor_end+0xfff847e8>
   84894:	00843bc0 	call	843bc <__sfp_lock_release>
   84898:	b005883a 	mov	r2,r22
   8489c:	dfc00717 	ldw	ra,28(sp)
   848a0:	dd800617 	ldw	r22,24(sp)
   848a4:	dd400517 	ldw	r21,20(sp)
   848a8:	dd000417 	ldw	r20,16(sp)
   848ac:	dcc00317 	ldw	r19,12(sp)
   848b0:	dc800217 	ldw	r18,8(sp)
   848b4:	dc400117 	ldw	r17,4(sp)
   848b8:	dc000017 	ldw	r16,0(sp)
   848bc:	dec00804 	addi	sp,sp,32
   848c0:	f800283a 	ret

000848c4 <_fwalk_reent>:
   848c4:	defff804 	addi	sp,sp,-32
   848c8:	dd400515 	stw	r21,20(sp)
   848cc:	2540b804 	addi	r21,r4,736
   848d0:	dd800615 	stw	r22,24(sp)
   848d4:	dd000415 	stw	r20,16(sp)
   848d8:	dcc00315 	stw	r19,12(sp)
   848dc:	dfc00715 	stw	ra,28(sp)
   848e0:	dc800215 	stw	r18,8(sp)
   848e4:	dc400115 	stw	r17,4(sp)
   848e8:	dc000015 	stw	r16,0(sp)
   848ec:	2027883a 	mov	r19,r4
   848f0:	2829883a 	mov	r20,r5
   848f4:	002d883a 	mov	r22,zero
   848f8:	00843b80 	call	843b8 <__sfp_lock_acquire>
   848fc:	a8001326 	beq	r21,zero,8494c <_fwalk_reent+0x88>
   84900:	04bfffc4 	movi	r18,-1
   84904:	ac400117 	ldw	r17,4(r21)
   84908:	ac000217 	ldw	r16,8(r21)
   8490c:	8c7fffc4 	addi	r17,r17,-1
   84910:	88000c16 	blt	r17,zero,84944 <_fwalk_reent+0x80>
   84914:	84000304 	addi	r16,r16,12
   84918:	80c0000f 	ldh	r3,0(r16)
   8491c:	8c7fffc4 	addi	r17,r17,-1
   84920:	817ffd04 	addi	r5,r16,-12
   84924:	18000526 	beq	r3,zero,8493c <_fwalk_reent+0x78>
   84928:	80c0008f 	ldh	r3,2(r16)
   8492c:	9809883a 	mov	r4,r19
   84930:	1c800226 	beq	r3,r18,8493c <_fwalk_reent+0x78>
   84934:	a03ee83a 	callr	r20
   84938:	b0acb03a 	or	r22,r22,r2
   8493c:	84001a04 	addi	r16,r16,104
   84940:	8cbff51e 	bne	r17,r18,84918 <rx_descriptor_end+0xfff848b8>
   84944:	ad400017 	ldw	r21,0(r21)
   84948:	a83fee1e 	bne	r21,zero,84904 <rx_descriptor_end+0xfff848a4>
   8494c:	00843bc0 	call	843bc <__sfp_lock_release>
   84950:	b005883a 	mov	r2,r22
   84954:	dfc00717 	ldw	ra,28(sp)
   84958:	dd800617 	ldw	r22,24(sp)
   8495c:	dd400517 	ldw	r21,20(sp)
   84960:	dd000417 	ldw	r20,16(sp)
   84964:	dcc00317 	ldw	r19,12(sp)
   84968:	dc800217 	ldw	r18,8(sp)
   8496c:	dc400117 	ldw	r17,4(sp)
   84970:	dc000017 	ldw	r16,0(sp)
   84974:	dec00804 	addi	sp,sp,32
   84978:	f800283a 	ret

0008497c <__smakebuf_r>:
   8497c:	2880030b 	ldhu	r2,12(r5)
   84980:	10c0008c 	andi	r3,r2,2
   84984:	1800401e 	bne	r3,zero,84a88 <__smakebuf_r+0x10c>
   84988:	deffec04 	addi	sp,sp,-80
   8498c:	dc000f15 	stw	r16,60(sp)
   84990:	2821883a 	mov	r16,r5
   84994:	2940038f 	ldh	r5,14(r5)
   84998:	dc401015 	stw	r17,64(sp)
   8499c:	dfc01315 	stw	ra,76(sp)
   849a0:	dcc01215 	stw	r19,72(sp)
   849a4:	dc801115 	stw	r18,68(sp)
   849a8:	2023883a 	mov	r17,r4
   849ac:	28001b16 	blt	r5,zero,84a1c <__smakebuf_r+0xa0>
   849b0:	d80d883a 	mov	r6,sp
   849b4:	00857540 	call	85754 <_fstat_r>
   849b8:	10001716 	blt	r2,zero,84a18 <__smakebuf_r+0x9c>
   849bc:	d8800117 	ldw	r2,4(sp)
   849c0:	00e00014 	movui	r3,32768
   849c4:	10bc000c 	andi	r2,r2,61440
   849c8:	10c03726 	beq	r2,r3,84aa8 <__smakebuf_r+0x12c>
   849cc:	80c0030b 	ldhu	r3,12(r16)
   849d0:	18c20014 	ori	r3,r3,2048
   849d4:	80c0030d 	sth	r3,12(r16)
   849d8:	00c80004 	movi	r3,8192
   849dc:	10c03c1e 	bne	r2,r3,84ad0 <__smakebuf_r+0x154>
   849e0:	8140038f 	ldh	r5,14(r16)
   849e4:	8809883a 	mov	r4,r17
   849e8:	00857ac0 	call	857ac <_isatty_r>
   849ec:	10004e26 	beq	r2,zero,84b28 <__smakebuf_r+0x1ac>
   849f0:	8080030b 	ldhu	r2,12(r16)
   849f4:	04c00044 	movi	r19,1
   849f8:	80c010c4 	addi	r3,r16,67
   849fc:	14c4b03a 	or	r2,r2,r19
   84a00:	8080030d 	sth	r2,12(r16)
   84a04:	80c00015 	stw	r3,0(r16)
   84a08:	80c00415 	stw	r3,16(r16)
   84a0c:	84c00515 	stw	r19,20(r16)
   84a10:	04810004 	movi	r18,1024
   84a14:	00000706 	br	84a34 <__smakebuf_r+0xb8>
   84a18:	8080030b 	ldhu	r2,12(r16)
   84a1c:	10c0200c 	andi	r3,r2,128
   84a20:	18001f1e 	bne	r3,zero,84aa0 <__smakebuf_r+0x124>
   84a24:	04810004 	movi	r18,1024
   84a28:	10820014 	ori	r2,r2,2048
   84a2c:	8080030d 	sth	r2,12(r16)
   84a30:	0027883a 	mov	r19,zero
   84a34:	8809883a 	mov	r4,r17
   84a38:	900b883a 	mov	r5,r18
   84a3c:	0084b340 	call	84b34 <_malloc_r>
   84a40:	10002e26 	beq	r2,zero,84afc <__smakebuf_r+0x180>
   84a44:	80c0030b 	ldhu	r3,12(r16)
   84a48:	01000234 	movhi	r4,8
   84a4c:	21101a04 	addi	r4,r4,16488
   84a50:	89000f15 	stw	r4,60(r17)
   84a54:	18c02014 	ori	r3,r3,128
   84a58:	80c0030d 	sth	r3,12(r16)
   84a5c:	80800015 	stw	r2,0(r16)
   84a60:	80800415 	stw	r2,16(r16)
   84a64:	84800515 	stw	r18,20(r16)
   84a68:	98001c1e 	bne	r19,zero,84adc <__smakebuf_r+0x160>
   84a6c:	dfc01317 	ldw	ra,76(sp)
   84a70:	dcc01217 	ldw	r19,72(sp)
   84a74:	dc801117 	ldw	r18,68(sp)
   84a78:	dc401017 	ldw	r17,64(sp)
   84a7c:	dc000f17 	ldw	r16,60(sp)
   84a80:	dec01404 	addi	sp,sp,80
   84a84:	f800283a 	ret
   84a88:	288010c4 	addi	r2,r5,67
   84a8c:	28800015 	stw	r2,0(r5)
   84a90:	28800415 	stw	r2,16(r5)
   84a94:	00800044 	movi	r2,1
   84a98:	28800515 	stw	r2,20(r5)
   84a9c:	f800283a 	ret
   84aa0:	04801004 	movi	r18,64
   84aa4:	003fe006 	br	84a28 <rx_descriptor_end+0xfff849c8>
   84aa8:	81000a17 	ldw	r4,40(r16)
   84aac:	00c00234 	movhi	r3,8
   84ab0:	18d54b04 	addi	r3,r3,21804
   84ab4:	20ffc51e 	bne	r4,r3,849cc <rx_descriptor_end+0xfff8496c>
   84ab8:	80c0030b 	ldhu	r3,12(r16)
   84abc:	01010004 	movi	r4,1024
   84ac0:	81001315 	stw	r4,76(r16)
   84ac4:	1906b03a 	or	r3,r3,r4
   84ac8:	80c0030d 	sth	r3,12(r16)
   84acc:	003fc206 	br	849d8 <rx_descriptor_end+0xfff84978>
   84ad0:	0027883a 	mov	r19,zero
   84ad4:	04810004 	movi	r18,1024
   84ad8:	003fd606 	br	84a34 <rx_descriptor_end+0xfff849d4>
   84adc:	8140038f 	ldh	r5,14(r16)
   84ae0:	8809883a 	mov	r4,r17
   84ae4:	00857ac0 	call	857ac <_isatty_r>
   84ae8:	103fe026 	beq	r2,zero,84a6c <rx_descriptor_end+0xfff84a0c>
   84aec:	8080030b 	ldhu	r2,12(r16)
   84af0:	10800054 	ori	r2,r2,1
   84af4:	8080030d 	sth	r2,12(r16)
   84af8:	003fdc06 	br	84a6c <rx_descriptor_end+0xfff84a0c>
   84afc:	8080030b 	ldhu	r2,12(r16)
   84b00:	10c0800c 	andi	r3,r2,512
   84b04:	183fd91e 	bne	r3,zero,84a6c <rx_descriptor_end+0xfff84a0c>
   84b08:	10800094 	ori	r2,r2,2
   84b0c:	80c010c4 	addi	r3,r16,67
   84b10:	8080030d 	sth	r2,12(r16)
   84b14:	00800044 	movi	r2,1
   84b18:	80c00015 	stw	r3,0(r16)
   84b1c:	80c00415 	stw	r3,16(r16)
   84b20:	80800515 	stw	r2,20(r16)
   84b24:	003fd106 	br	84a6c <rx_descriptor_end+0xfff84a0c>
   84b28:	04c00044 	movi	r19,1
   84b2c:	04810004 	movi	r18,1024
   84b30:	003fc006 	br	84a34 <rx_descriptor_end+0xfff849d4>

00084b34 <_malloc_r>:
   84b34:	defff504 	addi	sp,sp,-44
   84b38:	dc800315 	stw	r18,12(sp)
   84b3c:	dfc00a15 	stw	ra,40(sp)
   84b40:	df000915 	stw	fp,36(sp)
   84b44:	ddc00815 	stw	r23,32(sp)
   84b48:	dd800715 	stw	r22,28(sp)
   84b4c:	dd400615 	stw	r21,24(sp)
   84b50:	dd000515 	stw	r20,20(sp)
   84b54:	dcc00415 	stw	r19,16(sp)
   84b58:	dc400215 	stw	r17,8(sp)
   84b5c:	dc000115 	stw	r16,4(sp)
   84b60:	288002c4 	addi	r2,r5,11
   84b64:	00c00584 	movi	r3,22
   84b68:	2025883a 	mov	r18,r4
   84b6c:	18802a2e 	bgeu	r3,r2,84c18 <_malloc_r+0xe4>
   84b70:	047ffe04 	movi	r17,-8
   84b74:	1462703a 	and	r17,r2,r17
   84b78:	88009e16 	blt	r17,zero,84df4 <_malloc_r+0x2c0>
   84b7c:	89409d36 	bltu	r17,r5,84df4 <_malloc_r+0x2c0>
   84b80:	0085c040 	call	85c04 <__malloc_lock>
   84b84:	00807dc4 	movi	r2,503
   84b88:	14402736 	bltu	r2,r17,84c28 <_malloc_r+0xf4>
   84b8c:	8806d0fa 	srli	r3,r17,3
   84b90:	04c00234 	movhi	r19,8
   84b94:	9cddf504 	addi	r19,r19,30676
   84b98:	18c5883a 	add	r2,r3,r3
   84b9c:	1085883a 	add	r2,r2,r2
   84ba0:	1085883a 	add	r2,r2,r2
   84ba4:	9885883a 	add	r2,r19,r2
   84ba8:	14000317 	ldw	r16,12(r2)
   84bac:	80814a26 	beq	r16,r2,850d8 <_malloc_r+0x5a4>
   84bb0:	80c00117 	ldw	r3,4(r16)
   84bb4:	81000317 	ldw	r4,12(r16)
   84bb8:	00bfff04 	movi	r2,-4
   84bbc:	1884703a 	and	r2,r3,r2
   84bc0:	81400217 	ldw	r5,8(r16)
   84bc4:	8085883a 	add	r2,r16,r2
   84bc8:	10c00117 	ldw	r3,4(r2)
   84bcc:	29000315 	stw	r4,12(r5)
   84bd0:	21400215 	stw	r5,8(r4)
   84bd4:	18c00054 	ori	r3,r3,1
   84bd8:	10c00115 	stw	r3,4(r2)
   84bdc:	9009883a 	mov	r4,r18
   84be0:	0085c240 	call	85c24 <__malloc_unlock>
   84be4:	80800204 	addi	r2,r16,8
   84be8:	dfc00a17 	ldw	ra,40(sp)
   84bec:	df000917 	ldw	fp,36(sp)
   84bf0:	ddc00817 	ldw	r23,32(sp)
   84bf4:	dd800717 	ldw	r22,28(sp)
   84bf8:	dd400617 	ldw	r21,24(sp)
   84bfc:	dd000517 	ldw	r20,20(sp)
   84c00:	dcc00417 	ldw	r19,16(sp)
   84c04:	dc800317 	ldw	r18,12(sp)
   84c08:	dc400217 	ldw	r17,8(sp)
   84c0c:	dc000117 	ldw	r16,4(sp)
   84c10:	dec00b04 	addi	sp,sp,44
   84c14:	f800283a 	ret
   84c18:	04400404 	movi	r17,16
   84c1c:	89407536 	bltu	r17,r5,84df4 <_malloc_r+0x2c0>
   84c20:	0085c040 	call	85c04 <__malloc_lock>
   84c24:	003fd906 	br	84b8c <rx_descriptor_end+0xfff84b2c>
   84c28:	8806d27a 	srli	r3,r17,9
   84c2c:	18007526 	beq	r3,zero,84e04 <_malloc_r+0x2d0>
   84c30:	00800104 	movi	r2,4
   84c34:	10c0ef36 	bltu	r2,r3,84ff4 <_malloc_r+0x4c0>
   84c38:	8806d1ba 	srli	r3,r17,6
   84c3c:	19c00e04 	addi	r7,r3,56
   84c40:	39cb883a 	add	r5,r7,r7
   84c44:	04c00234 	movhi	r19,8
   84c48:	294b883a 	add	r5,r5,r5
   84c4c:	9cddf504 	addi	r19,r19,30676
   84c50:	294b883a 	add	r5,r5,r5
   84c54:	994b883a 	add	r5,r19,r5
   84c58:	2c000317 	ldw	r16,12(r5)
   84c5c:	2c000e26 	beq	r5,r16,84c98 <_malloc_r+0x164>
   84c60:	80800117 	ldw	r2,4(r16)
   84c64:	01bfff04 	movi	r6,-4
   84c68:	010003c4 	movi	r4,15
   84c6c:	1184703a 	and	r2,r2,r6
   84c70:	1447c83a 	sub	r3,r2,r17
   84c74:	20c00716 	blt	r4,r3,84c94 <_malloc_r+0x160>
   84c78:	1800650e 	bge	r3,zero,84e10 <_malloc_r+0x2dc>
   84c7c:	84000317 	ldw	r16,12(r16)
   84c80:	2c000526 	beq	r5,r16,84c98 <_malloc_r+0x164>
   84c84:	80800117 	ldw	r2,4(r16)
   84c88:	1184703a 	and	r2,r2,r6
   84c8c:	1447c83a 	sub	r3,r2,r17
   84c90:	20fff90e 	bge	r4,r3,84c78 <rx_descriptor_end+0xfff84c18>
   84c94:	39ffffc4 	addi	r7,r7,-1
   84c98:	38c00044 	addi	r3,r7,1
   84c9c:	01800234 	movhi	r6,8
   84ca0:	9c000417 	ldw	r16,16(r19)
   84ca4:	319df504 	addi	r6,r6,30676
   84ca8:	32400204 	addi	r9,r6,8
   84cac:	82410326 	beq	r16,r9,850bc <_malloc_r+0x588>
   84cb0:	81000117 	ldw	r4,4(r16)
   84cb4:	00bfff04 	movi	r2,-4
   84cb8:	208e703a 	and	r7,r4,r2
   84cbc:	3c45c83a 	sub	r2,r7,r17
   84cc0:	010003c4 	movi	r4,15
   84cc4:	2080ee16 	blt	r4,r2,85080 <_malloc_r+0x54c>
   84cc8:	32400515 	stw	r9,20(r6)
   84ccc:	32400415 	stw	r9,16(r6)
   84cd0:	1000510e 	bge	r2,zero,84e18 <_malloc_r+0x2e4>
   84cd4:	00807fc4 	movi	r2,511
   84cd8:	11c0ce36 	bltu	r2,r7,85014 <_malloc_r+0x4e0>
   84cdc:	3808d0fa 	srli	r4,r7,3
   84ce0:	01c00044 	movi	r7,1
   84ce4:	30800117 	ldw	r2,4(r6)
   84ce8:	210b883a 	add	r5,r4,r4
   84cec:	294b883a 	add	r5,r5,r5
   84cf0:	2009d0ba 	srai	r4,r4,2
   84cf4:	294b883a 	add	r5,r5,r5
   84cf8:	298b883a 	add	r5,r5,r6
   84cfc:	2a000217 	ldw	r8,8(r5)
   84d00:	3908983a 	sll	r4,r7,r4
   84d04:	81400315 	stw	r5,12(r16)
   84d08:	82000215 	stw	r8,8(r16)
   84d0c:	2088b03a 	or	r4,r4,r2
   84d10:	2c000215 	stw	r16,8(r5)
   84d14:	31000115 	stw	r4,4(r6)
   84d18:	44000315 	stw	r16,12(r8)
   84d1c:	1805d0ba 	srai	r2,r3,2
   84d20:	01400044 	movi	r5,1
   84d24:	288a983a 	sll	r5,r5,r2
   84d28:	21404336 	bltu	r4,r5,84e38 <_malloc_r+0x304>
   84d2c:	2144703a 	and	r2,r4,r5
   84d30:	10000a1e 	bne	r2,zero,84d5c <_malloc_r+0x228>
   84d34:	00bfff04 	movi	r2,-4
   84d38:	294b883a 	add	r5,r5,r5
   84d3c:	1886703a 	and	r3,r3,r2
   84d40:	2144703a 	and	r2,r4,r5
   84d44:	18c00104 	addi	r3,r3,4
   84d48:	1000041e 	bne	r2,zero,84d5c <_malloc_r+0x228>
   84d4c:	294b883a 	add	r5,r5,r5
   84d50:	2144703a 	and	r2,r4,r5
   84d54:	18c00104 	addi	r3,r3,4
   84d58:	103ffc26 	beq	r2,zero,84d4c <rx_descriptor_end+0xfff84cec>
   84d5c:	023fff04 	movi	r8,-4
   84d60:	01c003c4 	movi	r7,15
   84d64:	18c5883a 	add	r2,r3,r3
   84d68:	1085883a 	add	r2,r2,r2
   84d6c:	1085883a 	add	r2,r2,r2
   84d70:	9895883a 	add	r10,r19,r2
   84d74:	52c00304 	addi	r11,r10,12
   84d78:	1819883a 	mov	r12,r3
   84d7c:	5c000017 	ldw	r16,0(r11)
   84d80:	59bffd04 	addi	r6,r11,-12
   84d84:	8180041e 	bne	r16,r6,84d98 <_malloc_r+0x264>
   84d88:	0000ce06 	br	850c4 <_malloc_r+0x590>
   84d8c:	2000d70e 	bge	r4,zero,850ec <_malloc_r+0x5b8>
   84d90:	84000317 	ldw	r16,12(r16)
   84d94:	8180cb26 	beq	r16,r6,850c4 <_malloc_r+0x590>
   84d98:	80800117 	ldw	r2,4(r16)
   84d9c:	1204703a 	and	r2,r2,r8
   84da0:	1449c83a 	sub	r4,r2,r17
   84da4:	393ff90e 	bge	r7,r4,84d8c <rx_descriptor_end+0xfff84d2c>
   84da8:	80800317 	ldw	r2,12(r16)
   84dac:	80c00217 	ldw	r3,8(r16)
   84db0:	89400054 	ori	r5,r17,1
   84db4:	81400115 	stw	r5,4(r16)
   84db8:	18800315 	stw	r2,12(r3)
   84dbc:	10c00215 	stw	r3,8(r2)
   84dc0:	8463883a 	add	r17,r16,r17
   84dc4:	9c400515 	stw	r17,20(r19)
   84dc8:	9c400415 	stw	r17,16(r19)
   84dcc:	20800054 	ori	r2,r4,1
   84dd0:	88800115 	stw	r2,4(r17)
   84dd4:	8a400315 	stw	r9,12(r17)
   84dd8:	8a400215 	stw	r9,8(r17)
   84ddc:	8923883a 	add	r17,r17,r4
   84de0:	89000015 	stw	r4,0(r17)
   84de4:	9009883a 	mov	r4,r18
   84de8:	0085c240 	call	85c24 <__malloc_unlock>
   84dec:	80800204 	addi	r2,r16,8
   84df0:	003f7d06 	br	84be8 <rx_descriptor_end+0xfff84b88>
   84df4:	00800304 	movi	r2,12
   84df8:	90800015 	stw	r2,0(r18)
   84dfc:	0005883a 	mov	r2,zero
   84e00:	003f7906 	br	84be8 <rx_descriptor_end+0xfff84b88>
   84e04:	01401f84 	movi	r5,126
   84e08:	01c00fc4 	movi	r7,63
   84e0c:	003f8d06 	br	84c44 <rx_descriptor_end+0xfff84be4>
   84e10:	81000317 	ldw	r4,12(r16)
   84e14:	003f6a06 	br	84bc0 <rx_descriptor_end+0xfff84b60>
   84e18:	81c5883a 	add	r2,r16,r7
   84e1c:	10c00117 	ldw	r3,4(r2)
   84e20:	9009883a 	mov	r4,r18
   84e24:	18c00054 	ori	r3,r3,1
   84e28:	10c00115 	stw	r3,4(r2)
   84e2c:	0085c240 	call	85c24 <__malloc_unlock>
   84e30:	80800204 	addi	r2,r16,8
   84e34:	003f6c06 	br	84be8 <rx_descriptor_end+0xfff84b88>
   84e38:	9c000217 	ldw	r16,8(r19)
   84e3c:	00bfff04 	movi	r2,-4
   84e40:	85800117 	ldw	r22,4(r16)
   84e44:	b0ac703a 	and	r22,r22,r2
   84e48:	b4400336 	bltu	r22,r17,84e58 <_malloc_r+0x324>
   84e4c:	b445c83a 	sub	r2,r22,r17
   84e50:	00c003c4 	movi	r3,15
   84e54:	18805d16 	blt	r3,r2,84fcc <_malloc_r+0x498>
   84e58:	05c00234 	movhi	r23,8
   84e5c:	00800274 	movhi	r2,9
   84e60:	bddf0404 	addi	r23,r23,31760
   84e64:	10a5ca04 	addi	r2,r2,-26840
   84e68:	15400017 	ldw	r21,0(r2)
   84e6c:	b9000017 	ldw	r4,0(r23)
   84e70:	00ffffc4 	movi	r3,-1
   84e74:	858d883a 	add	r6,r16,r22
   84e78:	8d6b883a 	add	r21,r17,r21
   84e7c:	20c0e426 	beq	r4,r3,85210 <_malloc_r+0x6dc>
   84e80:	ad4403c4 	addi	r21,r21,4111
   84e84:	00fc0004 	movi	r3,-4096
   84e88:	a8ea703a 	and	r21,r21,r3
   84e8c:	9009883a 	mov	r4,r18
   84e90:	a80b883a 	mov	r5,r21
   84e94:	d9800015 	stw	r6,0(sp)
   84e98:	00854000 	call	85400 <_sbrk_r>
   84e9c:	00ffffc4 	movi	r3,-1
   84ea0:	1029883a 	mov	r20,r2
   84ea4:	d9800017 	ldw	r6,0(sp)
   84ea8:	10c0a426 	beq	r2,r3,8513c <_malloc_r+0x608>
   84eac:	1180a236 	bltu	r2,r6,85138 <_malloc_r+0x604>
   84eb0:	07000274 	movhi	fp,9
   84eb4:	e726cb04 	addi	fp,fp,-25812
   84eb8:	e0c00017 	ldw	r3,0(fp)
   84ebc:	a8c7883a 	add	r3,r21,r3
   84ec0:	e0c00015 	stw	r3,0(fp)
   84ec4:	3500da26 	beq	r6,r20,85230 <_malloc_r+0x6fc>
   84ec8:	b9000017 	ldw	r4,0(r23)
   84ecc:	00bfffc4 	movi	r2,-1
   84ed0:	2080e426 	beq	r4,r2,85264 <_malloc_r+0x730>
   84ed4:	a185c83a 	sub	r2,r20,r6
   84ed8:	1885883a 	add	r2,r3,r2
   84edc:	e0800015 	stw	r2,0(fp)
   84ee0:	a0c001cc 	andi	r3,r20,7
   84ee4:	1800b526 	beq	r3,zero,851bc <_malloc_r+0x688>
   84ee8:	a0e9c83a 	sub	r20,r20,r3
   84eec:	00840204 	movi	r2,4104
   84ef0:	a5000204 	addi	r20,r20,8
   84ef4:	10c7c83a 	sub	r3,r2,r3
   84ef8:	a545883a 	add	r2,r20,r21
   84efc:	1083ffcc 	andi	r2,r2,4095
   84f00:	18abc83a 	sub	r21,r3,r2
   84f04:	9009883a 	mov	r4,r18
   84f08:	a80b883a 	mov	r5,r21
   84f0c:	00854000 	call	85400 <_sbrk_r>
   84f10:	00ffffc4 	movi	r3,-1
   84f14:	10c0d026 	beq	r2,r3,85258 <_malloc_r+0x724>
   84f18:	1507c83a 	sub	r3,r2,r20
   84f1c:	a8c7883a 	add	r3,r21,r3
   84f20:	18c00054 	ori	r3,r3,1
   84f24:	e0800017 	ldw	r2,0(fp)
   84f28:	9d000215 	stw	r20,8(r19)
   84f2c:	a0c00115 	stw	r3,4(r20)
   84f30:	a887883a 	add	r3,r21,r2
   84f34:	e0c00015 	stw	r3,0(fp)
   84f38:	84c00e26 	beq	r16,r19,84f74 <_malloc_r+0x440>
   84f3c:	018003c4 	movi	r6,15
   84f40:	3580a02e 	bgeu	r6,r22,851c4 <_malloc_r+0x690>
   84f44:	81400117 	ldw	r5,4(r16)
   84f48:	013ffe04 	movi	r4,-8
   84f4c:	b0bffd04 	addi	r2,r22,-12
   84f50:	1104703a 	and	r2,r2,r4
   84f54:	2900004c 	andi	r4,r5,1
   84f58:	1108b03a 	or	r4,r2,r4
   84f5c:	81000115 	stw	r4,4(r16)
   84f60:	01400144 	movi	r5,5
   84f64:	8089883a 	add	r4,r16,r2
   84f68:	21400115 	stw	r5,4(r4)
   84f6c:	21400215 	stw	r5,8(r4)
   84f70:	3080c036 	bltu	r6,r2,85274 <_malloc_r+0x740>
   84f74:	00800274 	movhi	r2,9
   84f78:	10a5c904 	addi	r2,r2,-26844
   84f7c:	11000017 	ldw	r4,0(r2)
   84f80:	20c0012e 	bgeu	r4,r3,84f88 <_malloc_r+0x454>
   84f84:	10c00015 	stw	r3,0(r2)
   84f88:	00800274 	movhi	r2,9
   84f8c:	10a5c804 	addi	r2,r2,-26848
   84f90:	11000017 	ldw	r4,0(r2)
   84f94:	9c000217 	ldw	r16,8(r19)
   84f98:	20c0012e 	bgeu	r4,r3,84fa0 <_malloc_r+0x46c>
   84f9c:	10c00015 	stw	r3,0(r2)
   84fa0:	80c00117 	ldw	r3,4(r16)
   84fa4:	00bfff04 	movi	r2,-4
   84fa8:	1886703a 	and	r3,r3,r2
   84fac:	1c45c83a 	sub	r2,r3,r17
   84fb0:	1c400236 	bltu	r3,r17,84fbc <_malloc_r+0x488>
   84fb4:	00c003c4 	movi	r3,15
   84fb8:	18800416 	blt	r3,r2,84fcc <_malloc_r+0x498>
   84fbc:	9009883a 	mov	r4,r18
   84fc0:	0085c240 	call	85c24 <__malloc_unlock>
   84fc4:	0005883a 	mov	r2,zero
   84fc8:	003f0706 	br	84be8 <rx_descriptor_end+0xfff84b88>
   84fcc:	88c00054 	ori	r3,r17,1
   84fd0:	80c00115 	stw	r3,4(r16)
   84fd4:	8463883a 	add	r17,r16,r17
   84fd8:	10800054 	ori	r2,r2,1
   84fdc:	9c400215 	stw	r17,8(r19)
   84fe0:	88800115 	stw	r2,4(r17)
   84fe4:	9009883a 	mov	r4,r18
   84fe8:	0085c240 	call	85c24 <__malloc_unlock>
   84fec:	80800204 	addi	r2,r16,8
   84ff0:	003efd06 	br	84be8 <rx_descriptor_end+0xfff84b88>
   84ff4:	00800504 	movi	r2,20
   84ff8:	10c0482e 	bgeu	r2,r3,8511c <_malloc_r+0x5e8>
   84ffc:	00801504 	movi	r2,84
   85000:	10c06836 	bltu	r2,r3,851a4 <_malloc_r+0x670>
   85004:	8806d33a 	srli	r3,r17,12
   85008:	19c01b84 	addi	r7,r3,110
   8500c:	39cb883a 	add	r5,r7,r7
   85010:	003f0c06 	br	84c44 <rx_descriptor_end+0xfff84be4>
   85014:	3804d27a 	srli	r2,r7,9
   85018:	01000104 	movi	r4,4
   8501c:	2080422e 	bgeu	r4,r2,85128 <_malloc_r+0x5f4>
   85020:	01000504 	movi	r4,20
   85024:	20807c36 	bltu	r4,r2,85218 <_malloc_r+0x6e4>
   85028:	110016c4 	addi	r4,r2,91
   8502c:	210b883a 	add	r5,r4,r4
   85030:	294b883a 	add	r5,r5,r5
   85034:	294b883a 	add	r5,r5,r5
   85038:	994b883a 	add	r5,r19,r5
   8503c:	28800217 	ldw	r2,8(r5)
   85040:	02000234 	movhi	r8,8
   85044:	421df504 	addi	r8,r8,30676
   85048:	11406326 	beq	r2,r5,851d8 <_malloc_r+0x6a4>
   8504c:	01bfff04 	movi	r6,-4
   85050:	11000117 	ldw	r4,4(r2)
   85054:	2188703a 	and	r4,r4,r6
   85058:	3900022e 	bgeu	r7,r4,85064 <_malloc_r+0x530>
   8505c:	10800217 	ldw	r2,8(r2)
   85060:	28bffb1e 	bne	r5,r2,85050 <rx_descriptor_end+0xfff84ff0>
   85064:	11800317 	ldw	r6,12(r2)
   85068:	99000117 	ldw	r4,4(r19)
   8506c:	81800315 	stw	r6,12(r16)
   85070:	80800215 	stw	r2,8(r16)
   85074:	34000215 	stw	r16,8(r6)
   85078:	14000315 	stw	r16,12(r2)
   8507c:	003f2706 	br	84d1c <rx_descriptor_end+0xfff84cbc>
   85080:	88c00054 	ori	r3,r17,1
   85084:	80c00115 	stw	r3,4(r16)
   85088:	8463883a 	add	r17,r16,r17
   8508c:	34400515 	stw	r17,20(r6)
   85090:	34400415 	stw	r17,16(r6)
   85094:	10c00054 	ori	r3,r2,1
   85098:	8a400315 	stw	r9,12(r17)
   8509c:	8a400215 	stw	r9,8(r17)
   850a0:	88c00115 	stw	r3,4(r17)
   850a4:	88a3883a 	add	r17,r17,r2
   850a8:	88800015 	stw	r2,0(r17)
   850ac:	9009883a 	mov	r4,r18
   850b0:	0085c240 	call	85c24 <__malloc_unlock>
   850b4:	80800204 	addi	r2,r16,8
   850b8:	003ecb06 	br	84be8 <rx_descriptor_end+0xfff84b88>
   850bc:	31000117 	ldw	r4,4(r6)
   850c0:	003f1606 	br	84d1c <rx_descriptor_end+0xfff84cbc>
   850c4:	63000044 	addi	r12,r12,1
   850c8:	608000cc 	andi	r2,r12,3
   850cc:	5ac00204 	addi	r11,r11,8
   850d0:	103f2a1e 	bne	r2,zero,84d7c <rx_descriptor_end+0xfff84d1c>
   850d4:	00002106 	br	8515c <_malloc_r+0x628>
   850d8:	80800204 	addi	r2,r16,8
   850dc:	84000517 	ldw	r16,20(r16)
   850e0:	143eb31e 	bne	r2,r16,84bb0 <rx_descriptor_end+0xfff84b50>
   850e4:	18c00084 	addi	r3,r3,2
   850e8:	003eec06 	br	84c9c <rx_descriptor_end+0xfff84c3c>
   850ec:	8085883a 	add	r2,r16,r2
   850f0:	10c00117 	ldw	r3,4(r2)
   850f4:	81000317 	ldw	r4,12(r16)
   850f8:	81400217 	ldw	r5,8(r16)
   850fc:	18c00054 	ori	r3,r3,1
   85100:	10c00115 	stw	r3,4(r2)
   85104:	29000315 	stw	r4,12(r5)
   85108:	21400215 	stw	r5,8(r4)
   8510c:	9009883a 	mov	r4,r18
   85110:	0085c240 	call	85c24 <__malloc_unlock>
   85114:	80800204 	addi	r2,r16,8
   85118:	003eb306 	br	84be8 <rx_descriptor_end+0xfff84b88>
   8511c:	19c016c4 	addi	r7,r3,91
   85120:	39cb883a 	add	r5,r7,r7
   85124:	003ec706 	br	84c44 <rx_descriptor_end+0xfff84be4>
   85128:	3804d1ba 	srli	r2,r7,6
   8512c:	11000e04 	addi	r4,r2,56
   85130:	210b883a 	add	r5,r4,r4
   85134:	003fbe06 	br	85030 <rx_descriptor_end+0xfff84fd0>
   85138:	84ff5d26 	beq	r16,r19,84eb0 <rx_descriptor_end+0xfff84e50>
   8513c:	9c000217 	ldw	r16,8(r19)
   85140:	00bfff04 	movi	r2,-4
   85144:	80c00117 	ldw	r3,4(r16)
   85148:	1886703a 	and	r3,r3,r2
   8514c:	003f9706 	br	84fac <rx_descriptor_end+0xfff84f4c>
   85150:	52800017 	ldw	r10,0(r10)
   85154:	18ffffc4 	addi	r3,r3,-1
   85158:	50805c1e 	bne	r10,r2,852cc <_malloc_r+0x798>
   8515c:	190000cc 	andi	r4,r3,3
   85160:	50bffe04 	addi	r2,r10,-8
   85164:	203ffa1e 	bne	r4,zero,85150 <rx_descriptor_end+0xfff850f0>
   85168:	98800117 	ldw	r2,4(r19)
   8516c:	0146303a 	nor	r3,zero,r5
   85170:	1884703a 	and	r2,r3,r2
   85174:	98800115 	stw	r2,4(r19)
   85178:	294b883a 	add	r5,r5,r5
   8517c:	117f2e36 	bltu	r2,r5,84e38 <rx_descriptor_end+0xfff84dd8>
   85180:	283f2d26 	beq	r5,zero,84e38 <rx_descriptor_end+0xfff84dd8>
   85184:	1146703a 	and	r3,r2,r5
   85188:	1800521e 	bne	r3,zero,852d4 <_malloc_r+0x7a0>
   8518c:	6007883a 	mov	r3,r12
   85190:	294b883a 	add	r5,r5,r5
   85194:	1148703a 	and	r4,r2,r5
   85198:	18c00104 	addi	r3,r3,4
   8519c:	203ffc26 	beq	r4,zero,85190 <rx_descriptor_end+0xfff85130>
   851a0:	003ef006 	br	84d64 <rx_descriptor_end+0xfff84d04>
   851a4:	00805504 	movi	r2,340
   851a8:	10c01336 	bltu	r2,r3,851f8 <_malloc_r+0x6c4>
   851ac:	8806d3fa 	srli	r3,r17,15
   851b0:	19c01dc4 	addi	r7,r3,119
   851b4:	39cb883a 	add	r5,r7,r7
   851b8:	003ea206 	br	84c44 <rx_descriptor_end+0xfff84be4>
   851bc:	00c40004 	movi	r3,4096
   851c0:	003f4d06 	br	84ef8 <rx_descriptor_end+0xfff84e98>
   851c4:	00800044 	movi	r2,1
   851c8:	a0800115 	stw	r2,4(r20)
   851cc:	a021883a 	mov	r16,r20
   851d0:	0007883a 	mov	r3,zero
   851d4:	003f7506 	br	84fac <rx_descriptor_end+0xfff84f4c>
   851d8:	200bd0ba 	srai	r5,r4,2
   851dc:	01800044 	movi	r6,1
   851e0:	41000117 	ldw	r4,4(r8)
   851e4:	314a983a 	sll	r5,r6,r5
   851e8:	100d883a 	mov	r6,r2
   851ec:	2908b03a 	or	r4,r5,r4
   851f0:	41000115 	stw	r4,4(r8)
   851f4:	003f9d06 	br	8506c <rx_descriptor_end+0xfff8500c>
   851f8:	00815504 	movi	r2,1364
   851fc:	10c01336 	bltu	r2,r3,8524c <_malloc_r+0x718>
   85200:	8806d4ba 	srli	r3,r17,18
   85204:	19c01f04 	addi	r7,r3,124
   85208:	39cb883a 	add	r5,r7,r7
   8520c:	003e8d06 	br	84c44 <rx_descriptor_end+0xfff84be4>
   85210:	ad400404 	addi	r21,r21,16
   85214:	003f1d06 	br	84e8c <rx_descriptor_end+0xfff84e2c>
   85218:	01001504 	movi	r4,84
   8521c:	20801c36 	bltu	r4,r2,85290 <_malloc_r+0x75c>
   85220:	3804d33a 	srli	r2,r7,12
   85224:	11001b84 	addi	r4,r2,110
   85228:	210b883a 	add	r5,r4,r4
   8522c:	003f8006 	br	85030 <rx_descriptor_end+0xfff84fd0>
   85230:	3083ffcc 	andi	r2,r6,4095
   85234:	103f241e 	bne	r2,zero,84ec8 <rx_descriptor_end+0xfff84e68>
   85238:	99000217 	ldw	r4,8(r19)
   8523c:	ad85883a 	add	r2,r21,r22
   85240:	10800054 	ori	r2,r2,1
   85244:	20800115 	stw	r2,4(r4)
   85248:	003f4a06 	br	84f74 <rx_descriptor_end+0xfff84f14>
   8524c:	01403f04 	movi	r5,252
   85250:	01c01f84 	movi	r7,126
   85254:	003e7b06 	br	84c44 <rx_descriptor_end+0xfff84be4>
   85258:	00c00044 	movi	r3,1
   8525c:	002b883a 	mov	r21,zero
   85260:	003f3006 	br	84f24 <rx_descriptor_end+0xfff84ec4>
   85264:	00800234 	movhi	r2,8
   85268:	109f0404 	addi	r2,r2,31760
   8526c:	15000015 	stw	r20,0(r2)
   85270:	003f1b06 	br	84ee0 <rx_descriptor_end+0xfff84e80>
   85274:	9009883a 	mov	r4,r18
   85278:	81400204 	addi	r5,r16,8
   8527c:	008451c0 	call	8451c <_free_r>
   85280:	00800274 	movhi	r2,9
   85284:	10a6cb04 	addi	r2,r2,-25812
   85288:	10c00017 	ldw	r3,0(r2)
   8528c:	003f3906 	br	84f74 <rx_descriptor_end+0xfff84f14>
   85290:	01005504 	movi	r4,340
   85294:	20800436 	bltu	r4,r2,852a8 <_malloc_r+0x774>
   85298:	3804d3fa 	srli	r2,r7,15
   8529c:	11001dc4 	addi	r4,r2,119
   852a0:	210b883a 	add	r5,r4,r4
   852a4:	003f6206 	br	85030 <rx_descriptor_end+0xfff84fd0>
   852a8:	01015504 	movi	r4,1364
   852ac:	20800436 	bltu	r4,r2,852c0 <_malloc_r+0x78c>
   852b0:	3804d4ba 	srli	r2,r7,18
   852b4:	11001f04 	addi	r4,r2,124
   852b8:	210b883a 	add	r5,r4,r4
   852bc:	003f5c06 	br	85030 <rx_descriptor_end+0xfff84fd0>
   852c0:	01403f04 	movi	r5,252
   852c4:	01001f84 	movi	r4,126
   852c8:	003f5906 	br	85030 <rx_descriptor_end+0xfff84fd0>
   852cc:	98800117 	ldw	r2,4(r19)
   852d0:	003fa906 	br	85178 <rx_descriptor_end+0xfff85118>
   852d4:	6007883a 	mov	r3,r12
   852d8:	003ea206 	br	84d64 <rx_descriptor_end+0xfff84d04>

000852dc <memset>:
   852dc:	20c000cc 	andi	r3,r4,3
   852e0:	2005883a 	mov	r2,r4
   852e4:	18004326 	beq	r3,zero,853f4 <memset+0x118>
   852e8:	31ffffc4 	addi	r7,r6,-1
   852ec:	30004026 	beq	r6,zero,853f0 <memset+0x114>
   852f0:	2813883a 	mov	r9,r5
   852f4:	200d883a 	mov	r6,r4
   852f8:	2007883a 	mov	r3,r4
   852fc:	00000406 	br	85310 <memset+0x34>
   85300:	3a3fffc4 	addi	r8,r7,-1
   85304:	31800044 	addi	r6,r6,1
   85308:	38003926 	beq	r7,zero,853f0 <memset+0x114>
   8530c:	400f883a 	mov	r7,r8
   85310:	18c00044 	addi	r3,r3,1
   85314:	32400005 	stb	r9,0(r6)
   85318:	1a0000cc 	andi	r8,r3,3
   8531c:	403ff81e 	bne	r8,zero,85300 <rx_descriptor_end+0xfff852a0>
   85320:	010000c4 	movi	r4,3
   85324:	21c02d2e 	bgeu	r4,r7,853dc <memset+0x100>
   85328:	29803fcc 	andi	r6,r5,255
   8532c:	3008923a 	slli	r4,r6,8
   85330:	218cb03a 	or	r6,r4,r6
   85334:	3008943a 	slli	r4,r6,16
   85338:	218cb03a 	or	r6,r4,r6
   8533c:	010003c4 	movi	r4,15
   85340:	21c0182e 	bgeu	r4,r7,853a4 <memset+0xc8>
   85344:	3b3ffc04 	addi	r12,r7,-16
   85348:	6018d13a 	srli	r12,r12,4
   8534c:	1a000104 	addi	r8,r3,4
   85350:	1ac00204 	addi	r11,r3,8
   85354:	6008913a 	slli	r4,r12,4
   85358:	1a800304 	addi	r10,r3,12
   8535c:	1813883a 	mov	r9,r3
   85360:	21000504 	addi	r4,r4,20
   85364:	1909883a 	add	r4,r3,r4
   85368:	49800015 	stw	r6,0(r9)
   8536c:	41800015 	stw	r6,0(r8)
   85370:	59800015 	stw	r6,0(r11)
   85374:	51800015 	stw	r6,0(r10)
   85378:	42000404 	addi	r8,r8,16
   8537c:	4a400404 	addi	r9,r9,16
   85380:	5ac00404 	addi	r11,r11,16
   85384:	52800404 	addi	r10,r10,16
   85388:	413ff71e 	bne	r8,r4,85368 <rx_descriptor_end+0xfff85308>
   8538c:	63000044 	addi	r12,r12,1
   85390:	6018913a 	slli	r12,r12,4
   85394:	39c003cc 	andi	r7,r7,15
   85398:	010000c4 	movi	r4,3
   8539c:	1b07883a 	add	r3,r3,r12
   853a0:	21c00e2e 	bgeu	r4,r7,853dc <memset+0x100>
   853a4:	1813883a 	mov	r9,r3
   853a8:	3811883a 	mov	r8,r7
   853ac:	010000c4 	movi	r4,3
   853b0:	49800015 	stw	r6,0(r9)
   853b4:	423fff04 	addi	r8,r8,-4
   853b8:	4a400104 	addi	r9,r9,4
   853bc:	223ffc36 	bltu	r4,r8,853b0 <rx_descriptor_end+0xfff85350>
   853c0:	393fff04 	addi	r4,r7,-4
   853c4:	2008d0ba 	srli	r4,r4,2
   853c8:	39c000cc 	andi	r7,r7,3
   853cc:	21000044 	addi	r4,r4,1
   853d0:	2109883a 	add	r4,r4,r4
   853d4:	2109883a 	add	r4,r4,r4
   853d8:	1907883a 	add	r3,r3,r4
   853dc:	38000426 	beq	r7,zero,853f0 <memset+0x114>
   853e0:	19cf883a 	add	r7,r3,r7
   853e4:	19400005 	stb	r5,0(r3)
   853e8:	18c00044 	addi	r3,r3,1
   853ec:	19fffd1e 	bne	r3,r7,853e4 <rx_descriptor_end+0xfff85384>
   853f0:	f800283a 	ret
   853f4:	2007883a 	mov	r3,r4
   853f8:	300f883a 	mov	r7,r6
   853fc:	003fc806 	br	85320 <rx_descriptor_end+0xfff852c0>

00085400 <_sbrk_r>:
   85400:	defffd04 	addi	sp,sp,-12
   85404:	dc000015 	stw	r16,0(sp)
   85408:	04000274 	movhi	r16,9
   8540c:	dc400115 	stw	r17,4(sp)
   85410:	8425c704 	addi	r16,r16,-26852
   85414:	2023883a 	mov	r17,r4
   85418:	2809883a 	mov	r4,r5
   8541c:	dfc00215 	stw	ra,8(sp)
   85420:	80000015 	stw	zero,0(r16)
   85424:	0085d900 	call	85d90 <sbrk>
   85428:	00ffffc4 	movi	r3,-1
   8542c:	10c00526 	beq	r2,r3,85444 <_sbrk_r+0x44>
   85430:	dfc00217 	ldw	ra,8(sp)
   85434:	dc400117 	ldw	r17,4(sp)
   85438:	dc000017 	ldw	r16,0(sp)
   8543c:	dec00304 	addi	sp,sp,12
   85440:	f800283a 	ret
   85444:	80c00017 	ldw	r3,0(r16)
   85448:	183ff926 	beq	r3,zero,85430 <rx_descriptor_end+0xfff853d0>
   8544c:	88c00015 	stw	r3,0(r17)
   85450:	003ff706 	br	85430 <rx_descriptor_end+0xfff853d0>

00085454 <__sread>:
   85454:	defffe04 	addi	sp,sp,-8
   85458:	dc000015 	stw	r16,0(sp)
   8545c:	2821883a 	mov	r16,r5
   85460:	2940038f 	ldh	r5,14(r5)
   85464:	dfc00115 	stw	ra,4(sp)
   85468:	008585c0 	call	8585c <_read_r>
   8546c:	10000716 	blt	r2,zero,8548c <__sread+0x38>
   85470:	80c01417 	ldw	r3,80(r16)
   85474:	1887883a 	add	r3,r3,r2
   85478:	80c01415 	stw	r3,80(r16)
   8547c:	dfc00117 	ldw	ra,4(sp)
   85480:	dc000017 	ldw	r16,0(sp)
   85484:	dec00204 	addi	sp,sp,8
   85488:	f800283a 	ret
   8548c:	80c0030b 	ldhu	r3,12(r16)
   85490:	18fbffcc 	andi	r3,r3,61439
   85494:	80c0030d 	sth	r3,12(r16)
   85498:	dfc00117 	ldw	ra,4(sp)
   8549c:	dc000017 	ldw	r16,0(sp)
   854a0:	dec00204 	addi	sp,sp,8
   854a4:	f800283a 	ret

000854a8 <__seofread>:
   854a8:	0005883a 	mov	r2,zero
   854ac:	f800283a 	ret

000854b0 <__swrite>:
   854b0:	2880030b 	ldhu	r2,12(r5)
   854b4:	defffb04 	addi	sp,sp,-20
   854b8:	dcc00315 	stw	r19,12(sp)
   854bc:	dc800215 	stw	r18,8(sp)
   854c0:	dc400115 	stw	r17,4(sp)
   854c4:	dc000015 	stw	r16,0(sp)
   854c8:	dfc00415 	stw	ra,16(sp)
   854cc:	10c0400c 	andi	r3,r2,256
   854d0:	2821883a 	mov	r16,r5
   854d4:	2027883a 	mov	r19,r4
   854d8:	3025883a 	mov	r18,r6
   854dc:	3823883a 	mov	r17,r7
   854e0:	18000526 	beq	r3,zero,854f8 <__swrite+0x48>
   854e4:	2940038f 	ldh	r5,14(r5)
   854e8:	000d883a 	mov	r6,zero
   854ec:	01c00084 	movi	r7,2
   854f0:	00858000 	call	85800 <_lseek_r>
   854f4:	8080030b 	ldhu	r2,12(r16)
   854f8:	8140038f 	ldh	r5,14(r16)
   854fc:	10bbffcc 	andi	r2,r2,61439
   85500:	9809883a 	mov	r4,r19
   85504:	900d883a 	mov	r6,r18
   85508:	880f883a 	mov	r7,r17
   8550c:	8080030d 	sth	r2,12(r16)
   85510:	dfc00417 	ldw	ra,16(sp)
   85514:	dcc00317 	ldw	r19,12(sp)
   85518:	dc800217 	ldw	r18,8(sp)
   8551c:	dc400117 	ldw	r17,4(sp)
   85520:	dc000017 	ldw	r16,0(sp)
   85524:	dec00504 	addi	sp,sp,20
   85528:	00855901 	jmpi	85590 <_write_r>

0008552c <__sseek>:
   8552c:	defffe04 	addi	sp,sp,-8
   85530:	dc000015 	stw	r16,0(sp)
   85534:	2821883a 	mov	r16,r5
   85538:	2940038f 	ldh	r5,14(r5)
   8553c:	dfc00115 	stw	ra,4(sp)
   85540:	00858000 	call	85800 <_lseek_r>
   85544:	00ffffc4 	movi	r3,-1
   85548:	10c00826 	beq	r2,r3,8556c <__sseek+0x40>
   8554c:	80c0030b 	ldhu	r3,12(r16)
   85550:	80801415 	stw	r2,80(r16)
   85554:	18c40014 	ori	r3,r3,4096
   85558:	80c0030d 	sth	r3,12(r16)
   8555c:	dfc00117 	ldw	ra,4(sp)
   85560:	dc000017 	ldw	r16,0(sp)
   85564:	dec00204 	addi	sp,sp,8
   85568:	f800283a 	ret
   8556c:	80c0030b 	ldhu	r3,12(r16)
   85570:	18fbffcc 	andi	r3,r3,61439
   85574:	80c0030d 	sth	r3,12(r16)
   85578:	dfc00117 	ldw	ra,4(sp)
   8557c:	dc000017 	ldw	r16,0(sp)
   85580:	dec00204 	addi	sp,sp,8
   85584:	f800283a 	ret

00085588 <__sclose>:
   85588:	2940038f 	ldh	r5,14(r5)
   8558c:	00855ec1 	jmpi	855ec <_close_r>

00085590 <_write_r>:
   85590:	defffd04 	addi	sp,sp,-12
   85594:	dc000015 	stw	r16,0(sp)
   85598:	04000274 	movhi	r16,9
   8559c:	dc400115 	stw	r17,4(sp)
   855a0:	8425c704 	addi	r16,r16,-26852
   855a4:	2023883a 	mov	r17,r4
   855a8:	2809883a 	mov	r4,r5
   855ac:	300b883a 	mov	r5,r6
   855b0:	380d883a 	mov	r6,r7
   855b4:	dfc00215 	stw	ra,8(sp)
   855b8:	80000015 	stw	zero,0(r16)
   855bc:	0085e900 	call	85e90 <write>
   855c0:	00ffffc4 	movi	r3,-1
   855c4:	10c00526 	beq	r2,r3,855dc <_write_r+0x4c>
   855c8:	dfc00217 	ldw	ra,8(sp)
   855cc:	dc400117 	ldw	r17,4(sp)
   855d0:	dc000017 	ldw	r16,0(sp)
   855d4:	dec00304 	addi	sp,sp,12
   855d8:	f800283a 	ret
   855dc:	80c00017 	ldw	r3,0(r16)
   855e0:	183ff926 	beq	r3,zero,855c8 <rx_descriptor_end+0xfff85568>
   855e4:	88c00015 	stw	r3,0(r17)
   855e8:	003ff706 	br	855c8 <rx_descriptor_end+0xfff85568>

000855ec <_close_r>:
   855ec:	defffd04 	addi	sp,sp,-12
   855f0:	dc000015 	stw	r16,0(sp)
   855f4:	04000274 	movhi	r16,9
   855f8:	dc400115 	stw	r17,4(sp)
   855fc:	8425c704 	addi	r16,r16,-26852
   85600:	2023883a 	mov	r17,r4
   85604:	2809883a 	mov	r4,r5
   85608:	dfc00215 	stw	ra,8(sp)
   8560c:	80000015 	stw	zero,0(r16)
   85610:	00825100 	call	82510 <close>
   85614:	00ffffc4 	movi	r3,-1
   85618:	10c00526 	beq	r2,r3,85630 <_close_r+0x44>
   8561c:	dfc00217 	ldw	ra,8(sp)
   85620:	dc400117 	ldw	r17,4(sp)
   85624:	dc000017 	ldw	r16,0(sp)
   85628:	dec00304 	addi	sp,sp,12
   8562c:	f800283a 	ret
   85630:	80c00017 	ldw	r3,0(r16)
   85634:	183ff926 	beq	r3,zero,8561c <rx_descriptor_end+0xfff855bc>
   85638:	88c00015 	stw	r3,0(r17)
   8563c:	003ff706 	br	8561c <rx_descriptor_end+0xfff855bc>

00085640 <_fclose_r>:
   85640:	28003226 	beq	r5,zero,8570c <_fclose_r+0xcc>
   85644:	defffc04 	addi	sp,sp,-16
   85648:	dc400115 	stw	r17,4(sp)
   8564c:	2023883a 	mov	r17,r4
   85650:	dc000015 	stw	r16,0(sp)
   85654:	dfc00315 	stw	ra,12(sp)
   85658:	dc800215 	stw	r18,8(sp)
   8565c:	2821883a 	mov	r16,r5
   85660:	00843b80 	call	843b8 <__sfp_lock_acquire>
   85664:	88000226 	beq	r17,zero,85670 <_fclose_r+0x30>
   85668:	88800e17 	ldw	r2,56(r17)
   8566c:	10002926 	beq	r2,zero,85714 <_fclose_r+0xd4>
   85670:	8080030f 	ldh	r2,12(r16)
   85674:	10002226 	beq	r2,zero,85700 <_fclose_r+0xc0>
   85678:	8809883a 	mov	r4,r17
   8567c:	800b883a 	mov	r5,r16
   85680:	0083e000 	call	83e00 <_fflush_r>
   85684:	1025883a 	mov	r18,r2
   85688:	80800b17 	ldw	r2,44(r16)
   8568c:	10000426 	beq	r2,zero,856a0 <_fclose_r+0x60>
   85690:	81400717 	ldw	r5,28(r16)
   85694:	8809883a 	mov	r4,r17
   85698:	103ee83a 	callr	r2
   8569c:	10002616 	blt	r2,zero,85738 <_fclose_r+0xf8>
   856a0:	8080030b 	ldhu	r2,12(r16)
   856a4:	1080200c 	andi	r2,r2,128
   856a8:	10001f1e 	bne	r2,zero,85728 <_fclose_r+0xe8>
   856ac:	81400c17 	ldw	r5,48(r16)
   856b0:	28000526 	beq	r5,zero,856c8 <_fclose_r+0x88>
   856b4:	80801004 	addi	r2,r16,64
   856b8:	28800226 	beq	r5,r2,856c4 <_fclose_r+0x84>
   856bc:	8809883a 	mov	r4,r17
   856c0:	008451c0 	call	8451c <_free_r>
   856c4:	80000c15 	stw	zero,48(r16)
   856c8:	81401117 	ldw	r5,68(r16)
   856cc:	28000326 	beq	r5,zero,856dc <_fclose_r+0x9c>
   856d0:	8809883a 	mov	r4,r17
   856d4:	008451c0 	call	8451c <_free_r>
   856d8:	80001115 	stw	zero,68(r16)
   856dc:	8000030d 	sth	zero,12(r16)
   856e0:	00843bc0 	call	843bc <__sfp_lock_release>
   856e4:	9005883a 	mov	r2,r18
   856e8:	dfc00317 	ldw	ra,12(sp)
   856ec:	dc800217 	ldw	r18,8(sp)
   856f0:	dc400117 	ldw	r17,4(sp)
   856f4:	dc000017 	ldw	r16,0(sp)
   856f8:	dec00404 	addi	sp,sp,16
   856fc:	f800283a 	ret
   85700:	00843bc0 	call	843bc <__sfp_lock_release>
   85704:	0005883a 	mov	r2,zero
   85708:	003ff706 	br	856e8 <rx_descriptor_end+0xfff85688>
   8570c:	0005883a 	mov	r2,zero
   85710:	f800283a 	ret
   85714:	8809883a 	mov	r4,r17
   85718:	00843a80 	call	843a8 <__sinit>
   8571c:	8080030f 	ldh	r2,12(r16)
   85720:	103fd51e 	bne	r2,zero,85678 <rx_descriptor_end+0xfff85618>
   85724:	003ff606 	br	85700 <rx_descriptor_end+0xfff856a0>
   85728:	81400417 	ldw	r5,16(r16)
   8572c:	8809883a 	mov	r4,r17
   85730:	008451c0 	call	8451c <_free_r>
   85734:	003fdd06 	br	856ac <rx_descriptor_end+0xfff8564c>
   85738:	04bfffc4 	movi	r18,-1
   8573c:	003fd806 	br	856a0 <rx_descriptor_end+0xfff85640>

00085740 <fclose>:
   85740:	00800234 	movhi	r2,8
   85744:	109f0304 	addi	r2,r2,31756
   85748:	200b883a 	mov	r5,r4
   8574c:	11000017 	ldw	r4,0(r2)
   85750:	00856401 	jmpi	85640 <_fclose_r>

00085754 <_fstat_r>:
   85754:	defffd04 	addi	sp,sp,-12
   85758:	dc000015 	stw	r16,0(sp)
   8575c:	04000274 	movhi	r16,9
   85760:	dc400115 	stw	r17,4(sp)
   85764:	8425c704 	addi	r16,r16,-26852
   85768:	2023883a 	mov	r17,r4
   8576c:	2809883a 	mov	r4,r5
   85770:	300b883a 	mov	r5,r6
   85774:	dfc00215 	stw	ra,8(sp)
   85778:	80000015 	stw	zero,0(r16)
   8577c:	008593c0 	call	8593c <fstat>
   85780:	00ffffc4 	movi	r3,-1
   85784:	10c00526 	beq	r2,r3,8579c <_fstat_r+0x48>
   85788:	dfc00217 	ldw	ra,8(sp)
   8578c:	dc400117 	ldw	r17,4(sp)
   85790:	dc000017 	ldw	r16,0(sp)
   85794:	dec00304 	addi	sp,sp,12
   85798:	f800283a 	ret
   8579c:	80c00017 	ldw	r3,0(r16)
   857a0:	183ff926 	beq	r3,zero,85788 <rx_descriptor_end+0xfff85728>
   857a4:	88c00015 	stw	r3,0(r17)
   857a8:	003ff706 	br	85788 <rx_descriptor_end+0xfff85728>

000857ac <_isatty_r>:
   857ac:	defffd04 	addi	sp,sp,-12
   857b0:	dc000015 	stw	r16,0(sp)
   857b4:	04000274 	movhi	r16,9
   857b8:	dc400115 	stw	r17,4(sp)
   857bc:	8425c704 	addi	r16,r16,-26852
   857c0:	2023883a 	mov	r17,r4
   857c4:	2809883a 	mov	r4,r5
   857c8:	dfc00215 	stw	ra,8(sp)
   857cc:	80000015 	stw	zero,0(r16)
   857d0:	0085a3c0 	call	85a3c <isatty>
   857d4:	00ffffc4 	movi	r3,-1
   857d8:	10c00526 	beq	r2,r3,857f0 <_isatty_r+0x44>
   857dc:	dfc00217 	ldw	ra,8(sp)
   857e0:	dc400117 	ldw	r17,4(sp)
   857e4:	dc000017 	ldw	r16,0(sp)
   857e8:	dec00304 	addi	sp,sp,12
   857ec:	f800283a 	ret
   857f0:	80c00017 	ldw	r3,0(r16)
   857f4:	183ff926 	beq	r3,zero,857dc <rx_descriptor_end+0xfff8577c>
   857f8:	88c00015 	stw	r3,0(r17)
   857fc:	003ff706 	br	857dc <rx_descriptor_end+0xfff8577c>

00085800 <_lseek_r>:
   85800:	defffd04 	addi	sp,sp,-12
   85804:	dc000015 	stw	r16,0(sp)
   85808:	04000274 	movhi	r16,9
   8580c:	dc400115 	stw	r17,4(sp)
   85810:	8425c704 	addi	r16,r16,-26852
   85814:	2023883a 	mov	r17,r4
   85818:	2809883a 	mov	r4,r5
   8581c:	300b883a 	mov	r5,r6
   85820:	380d883a 	mov	r6,r7
   85824:	dfc00215 	stw	ra,8(sp)
   85828:	80000015 	stw	zero,0(r16)
   8582c:	0085b300 	call	85b30 <lseek>
   85830:	00ffffc4 	movi	r3,-1
   85834:	10c00526 	beq	r2,r3,8584c <_lseek_r+0x4c>
   85838:	dfc00217 	ldw	ra,8(sp)
   8583c:	dc400117 	ldw	r17,4(sp)
   85840:	dc000017 	ldw	r16,0(sp)
   85844:	dec00304 	addi	sp,sp,12
   85848:	f800283a 	ret
   8584c:	80c00017 	ldw	r3,0(r16)
   85850:	183ff926 	beq	r3,zero,85838 <rx_descriptor_end+0xfff857d8>
   85854:	88c00015 	stw	r3,0(r17)
   85858:	003ff706 	br	85838 <rx_descriptor_end+0xfff857d8>

0008585c <_read_r>:
   8585c:	defffd04 	addi	sp,sp,-12
   85860:	dc000015 	stw	r16,0(sp)
   85864:	04000274 	movhi	r16,9
   85868:	dc400115 	stw	r17,4(sp)
   8586c:	8425c704 	addi	r16,r16,-26852
   85870:	2023883a 	mov	r17,r4
   85874:	2809883a 	mov	r4,r5
   85878:	300b883a 	mov	r5,r6
   8587c:	380d883a 	mov	r6,r7
   85880:	dfc00215 	stw	ra,8(sp)
   85884:	80000015 	stw	zero,0(r16)
   85888:	0085c940 	call	85c94 <read>
   8588c:	00ffffc4 	movi	r3,-1
   85890:	10c00526 	beq	r2,r3,858a8 <_read_r+0x4c>
   85894:	dfc00217 	ldw	ra,8(sp)
   85898:	dc400117 	ldw	r17,4(sp)
   8589c:	dc000017 	ldw	r16,0(sp)
   858a0:	dec00304 	addi	sp,sp,12
   858a4:	f800283a 	ret
   858a8:	80c00017 	ldw	r3,0(r16)
   858ac:	183ff926 	beq	r3,zero,85894 <rx_descriptor_end+0xfff85834>
   858b0:	88c00015 	stw	r3,0(r17)
   858b4:	003ff706 	br	85894 <rx_descriptor_end+0xfff85834>

000858b8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   858b8:	defffd04 	addi	sp,sp,-12
   858bc:	df000215 	stw	fp,8(sp)
   858c0:	df000204 	addi	fp,sp,8
   858c4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   858c8:	0001883a 	nop
   858cc:	e0bfff17 	ldw	r2,-4(fp)
   858d0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   858d4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   858d8:	10000226 	beq	r2,zero,858e4 <_exit+0x2c>
    ALT_SIM_FAIL();
   858dc:	002af070 	cmpltui	zero,zero,43969
   858e0:	00000106 	br	858e8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   858e4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   858e8:	003fff06 	br	858e8 <rx_descriptor_end+0xfff85888>

000858ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   858ec:	defffe04 	addi	sp,sp,-8
   858f0:	dfc00115 	stw	ra,4(sp)
   858f4:	df000015 	stw	fp,0(sp)
   858f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   858fc:	00800234 	movhi	r2,8
   85900:	109efe04 	addi	r2,r2,31736
   85904:	10800017 	ldw	r2,0(r2)
   85908:	10000526 	beq	r2,zero,85920 <alt_get_errno+0x34>
   8590c:	00800234 	movhi	r2,8
   85910:	109efe04 	addi	r2,r2,31736
   85914:	10800017 	ldw	r2,0(r2)
   85918:	103ee83a 	callr	r2
   8591c:	00000206 	br	85928 <alt_get_errno+0x3c>
   85920:	00800274 	movhi	r2,9
   85924:	10a5c704 	addi	r2,r2,-26852
}
   85928:	e037883a 	mov	sp,fp
   8592c:	dfc00117 	ldw	ra,4(sp)
   85930:	df000017 	ldw	fp,0(sp)
   85934:	dec00204 	addi	sp,sp,8
   85938:	f800283a 	ret

0008593c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   8593c:	defffb04 	addi	sp,sp,-20
   85940:	dfc00415 	stw	ra,16(sp)
   85944:	df000315 	stw	fp,12(sp)
   85948:	df000304 	addi	fp,sp,12
   8594c:	e13ffe15 	stw	r4,-8(fp)
   85950:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   85954:	e0bffe17 	ldw	r2,-8(fp)
   85958:	10000616 	blt	r2,zero,85974 <fstat+0x38>
   8595c:	e0bffe17 	ldw	r2,-8(fp)
   85960:	10c00324 	muli	r3,r2,12
   85964:	00800234 	movhi	r2,8
   85968:	109c8c04 	addi	r2,r2,29232
   8596c:	1885883a 	add	r2,r3,r2
   85970:	00000106 	br	85978 <fstat+0x3c>
   85974:	0005883a 	mov	r2,zero
   85978:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   8597c:	e0bffd17 	ldw	r2,-12(fp)
   85980:	10001026 	beq	r2,zero,859c4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   85984:	e0bffd17 	ldw	r2,-12(fp)
   85988:	10800017 	ldw	r2,0(r2)
   8598c:	10800817 	ldw	r2,32(r2)
   85990:	10000726 	beq	r2,zero,859b0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   85994:	e0bffd17 	ldw	r2,-12(fp)
   85998:	10800017 	ldw	r2,0(r2)
   8599c:	10800817 	ldw	r2,32(r2)
   859a0:	e13ffd17 	ldw	r4,-12(fp)
   859a4:	e17fff17 	ldw	r5,-4(fp)
   859a8:	103ee83a 	callr	r2
   859ac:	00000a06 	br	859d8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   859b0:	e0bfff17 	ldw	r2,-4(fp)
   859b4:	00c80004 	movi	r3,8192
   859b8:	10c00115 	stw	r3,4(r2)
      return 0;
   859bc:	0005883a 	mov	r2,zero
   859c0:	00000506 	br	859d8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   859c4:	00858ec0 	call	858ec <alt_get_errno>
   859c8:	1007883a 	mov	r3,r2
   859cc:	00801444 	movi	r2,81
   859d0:	18800015 	stw	r2,0(r3)
    return -1;
   859d4:	00bfffc4 	movi	r2,-1
  }
}
   859d8:	e037883a 	mov	sp,fp
   859dc:	dfc00117 	ldw	ra,4(sp)
   859e0:	df000017 	ldw	fp,0(sp)
   859e4:	dec00204 	addi	sp,sp,8
   859e8:	f800283a 	ret

000859ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   859ec:	defffe04 	addi	sp,sp,-8
   859f0:	dfc00115 	stw	ra,4(sp)
   859f4:	df000015 	stw	fp,0(sp)
   859f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   859fc:	00800234 	movhi	r2,8
   85a00:	109efe04 	addi	r2,r2,31736
   85a04:	10800017 	ldw	r2,0(r2)
   85a08:	10000526 	beq	r2,zero,85a20 <alt_get_errno+0x34>
   85a0c:	00800234 	movhi	r2,8
   85a10:	109efe04 	addi	r2,r2,31736
   85a14:	10800017 	ldw	r2,0(r2)
   85a18:	103ee83a 	callr	r2
   85a1c:	00000206 	br	85a28 <alt_get_errno+0x3c>
   85a20:	00800274 	movhi	r2,9
   85a24:	10a5c704 	addi	r2,r2,-26852
}
   85a28:	e037883a 	mov	sp,fp
   85a2c:	dfc00117 	ldw	ra,4(sp)
   85a30:	df000017 	ldw	fp,0(sp)
   85a34:	dec00204 	addi	sp,sp,8
   85a38:	f800283a 	ret

00085a3c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   85a3c:	deffed04 	addi	sp,sp,-76
   85a40:	dfc01215 	stw	ra,72(sp)
   85a44:	df001115 	stw	fp,68(sp)
   85a48:	df001104 	addi	fp,sp,68
   85a4c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   85a50:	e0bfff17 	ldw	r2,-4(fp)
   85a54:	10000616 	blt	r2,zero,85a70 <isatty+0x34>
   85a58:	e0bfff17 	ldw	r2,-4(fp)
   85a5c:	10c00324 	muli	r3,r2,12
   85a60:	00800234 	movhi	r2,8
   85a64:	109c8c04 	addi	r2,r2,29232
   85a68:	1885883a 	add	r2,r3,r2
   85a6c:	00000106 	br	85a74 <isatty+0x38>
   85a70:	0005883a 	mov	r2,zero
   85a74:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   85a78:	e0bfef17 	ldw	r2,-68(fp)
   85a7c:	10000e26 	beq	r2,zero,85ab8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   85a80:	e0bfef17 	ldw	r2,-68(fp)
   85a84:	10800017 	ldw	r2,0(r2)
   85a88:	10800817 	ldw	r2,32(r2)
   85a8c:	1000021e 	bne	r2,zero,85a98 <isatty+0x5c>
    {
      return 1;
   85a90:	00800044 	movi	r2,1
   85a94:	00000d06 	br	85acc <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   85a98:	e0bff004 	addi	r2,fp,-64
   85a9c:	e13fff17 	ldw	r4,-4(fp)
   85aa0:	100b883a 	mov	r5,r2
   85aa4:	008593c0 	call	8593c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   85aa8:	e0bff117 	ldw	r2,-60(fp)
   85aac:	10880020 	cmpeqi	r2,r2,8192
   85ab0:	10803fcc 	andi	r2,r2,255
   85ab4:	00000506 	br	85acc <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   85ab8:	00859ec0 	call	859ec <alt_get_errno>
   85abc:	1007883a 	mov	r3,r2
   85ac0:	00801444 	movi	r2,81
   85ac4:	18800015 	stw	r2,0(r3)
    return 0;
   85ac8:	0005883a 	mov	r2,zero
  }
}
   85acc:	e037883a 	mov	sp,fp
   85ad0:	dfc00117 	ldw	ra,4(sp)
   85ad4:	df000017 	ldw	fp,0(sp)
   85ad8:	dec00204 	addi	sp,sp,8
   85adc:	f800283a 	ret

00085ae0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   85ae0:	defffe04 	addi	sp,sp,-8
   85ae4:	dfc00115 	stw	ra,4(sp)
   85ae8:	df000015 	stw	fp,0(sp)
   85aec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   85af0:	00800234 	movhi	r2,8
   85af4:	109efe04 	addi	r2,r2,31736
   85af8:	10800017 	ldw	r2,0(r2)
   85afc:	10000526 	beq	r2,zero,85b14 <alt_get_errno+0x34>
   85b00:	00800234 	movhi	r2,8
   85b04:	109efe04 	addi	r2,r2,31736
   85b08:	10800017 	ldw	r2,0(r2)
   85b0c:	103ee83a 	callr	r2
   85b10:	00000206 	br	85b1c <alt_get_errno+0x3c>
   85b14:	00800274 	movhi	r2,9
   85b18:	10a5c704 	addi	r2,r2,-26852
}
   85b1c:	e037883a 	mov	sp,fp
   85b20:	dfc00117 	ldw	ra,4(sp)
   85b24:	df000017 	ldw	fp,0(sp)
   85b28:	dec00204 	addi	sp,sp,8
   85b2c:	f800283a 	ret

00085b30 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   85b30:	defff904 	addi	sp,sp,-28
   85b34:	dfc00615 	stw	ra,24(sp)
   85b38:	df000515 	stw	fp,20(sp)
   85b3c:	df000504 	addi	fp,sp,20
   85b40:	e13ffd15 	stw	r4,-12(fp)
   85b44:	e17ffe15 	stw	r5,-8(fp)
   85b48:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   85b4c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   85b50:	e0bffd17 	ldw	r2,-12(fp)
   85b54:	10000616 	blt	r2,zero,85b70 <lseek+0x40>
   85b58:	e0bffd17 	ldw	r2,-12(fp)
   85b5c:	10c00324 	muli	r3,r2,12
   85b60:	00800234 	movhi	r2,8
   85b64:	109c8c04 	addi	r2,r2,29232
   85b68:	1885883a 	add	r2,r3,r2
   85b6c:	00000106 	br	85b74 <lseek+0x44>
   85b70:	0005883a 	mov	r2,zero
   85b74:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   85b78:	e0bffc17 	ldw	r2,-16(fp)
   85b7c:	10001026 	beq	r2,zero,85bc0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   85b80:	e0bffc17 	ldw	r2,-16(fp)
   85b84:	10800017 	ldw	r2,0(r2)
   85b88:	10800717 	ldw	r2,28(r2)
   85b8c:	10000926 	beq	r2,zero,85bb4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   85b90:	e0bffc17 	ldw	r2,-16(fp)
   85b94:	10800017 	ldw	r2,0(r2)
   85b98:	10800717 	ldw	r2,28(r2)
   85b9c:	e13ffc17 	ldw	r4,-16(fp)
   85ba0:	e17ffe17 	ldw	r5,-8(fp)
   85ba4:	e1bfff17 	ldw	r6,-4(fp)
   85ba8:	103ee83a 	callr	r2
   85bac:	e0bffb15 	stw	r2,-20(fp)
   85bb0:	00000506 	br	85bc8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   85bb4:	00bfde84 	movi	r2,-134
   85bb8:	e0bffb15 	stw	r2,-20(fp)
   85bbc:	00000206 	br	85bc8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   85bc0:	00bfebc4 	movi	r2,-81
   85bc4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   85bc8:	e0bffb17 	ldw	r2,-20(fp)
   85bcc:	1000070e 	bge	r2,zero,85bec <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   85bd0:	0085ae00 	call	85ae0 <alt_get_errno>
   85bd4:	1007883a 	mov	r3,r2
   85bd8:	e0bffb17 	ldw	r2,-20(fp)
   85bdc:	0085c83a 	sub	r2,zero,r2
   85be0:	18800015 	stw	r2,0(r3)
    rc = -1;
   85be4:	00bfffc4 	movi	r2,-1
   85be8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   85bec:	e0bffb17 	ldw	r2,-20(fp)
}
   85bf0:	e037883a 	mov	sp,fp
   85bf4:	dfc00117 	ldw	ra,4(sp)
   85bf8:	df000017 	ldw	fp,0(sp)
   85bfc:	dec00204 	addi	sp,sp,8
   85c00:	f800283a 	ret

00085c04 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   85c04:	defffe04 	addi	sp,sp,-8
   85c08:	df000115 	stw	fp,4(sp)
   85c0c:	df000104 	addi	fp,sp,4
   85c10:	e13fff15 	stw	r4,-4(fp)
}
   85c14:	e037883a 	mov	sp,fp
   85c18:	df000017 	ldw	fp,0(sp)
   85c1c:	dec00104 	addi	sp,sp,4
   85c20:	f800283a 	ret

00085c24 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   85c24:	defffe04 	addi	sp,sp,-8
   85c28:	df000115 	stw	fp,4(sp)
   85c2c:	df000104 	addi	fp,sp,4
   85c30:	e13fff15 	stw	r4,-4(fp)
}
   85c34:	e037883a 	mov	sp,fp
   85c38:	df000017 	ldw	fp,0(sp)
   85c3c:	dec00104 	addi	sp,sp,4
   85c40:	f800283a 	ret

00085c44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   85c44:	defffe04 	addi	sp,sp,-8
   85c48:	dfc00115 	stw	ra,4(sp)
   85c4c:	df000015 	stw	fp,0(sp)
   85c50:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   85c54:	00800234 	movhi	r2,8
   85c58:	109efe04 	addi	r2,r2,31736
   85c5c:	10800017 	ldw	r2,0(r2)
   85c60:	10000526 	beq	r2,zero,85c78 <alt_get_errno+0x34>
   85c64:	00800234 	movhi	r2,8
   85c68:	109efe04 	addi	r2,r2,31736
   85c6c:	10800017 	ldw	r2,0(r2)
   85c70:	103ee83a 	callr	r2
   85c74:	00000206 	br	85c80 <alt_get_errno+0x3c>
   85c78:	00800274 	movhi	r2,9
   85c7c:	10a5c704 	addi	r2,r2,-26852
}
   85c80:	e037883a 	mov	sp,fp
   85c84:	dfc00117 	ldw	ra,4(sp)
   85c88:	df000017 	ldw	fp,0(sp)
   85c8c:	dec00204 	addi	sp,sp,8
   85c90:	f800283a 	ret

00085c94 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   85c94:	defff904 	addi	sp,sp,-28
   85c98:	dfc00615 	stw	ra,24(sp)
   85c9c:	df000515 	stw	fp,20(sp)
   85ca0:	df000504 	addi	fp,sp,20
   85ca4:	e13ffd15 	stw	r4,-12(fp)
   85ca8:	e17ffe15 	stw	r5,-8(fp)
   85cac:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   85cb0:	e0bffd17 	ldw	r2,-12(fp)
   85cb4:	10000616 	blt	r2,zero,85cd0 <read+0x3c>
   85cb8:	e0bffd17 	ldw	r2,-12(fp)
   85cbc:	10c00324 	muli	r3,r2,12
   85cc0:	00800234 	movhi	r2,8
   85cc4:	109c8c04 	addi	r2,r2,29232
   85cc8:	1885883a 	add	r2,r3,r2
   85ccc:	00000106 	br	85cd4 <read+0x40>
   85cd0:	0005883a 	mov	r2,zero
   85cd4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   85cd8:	e0bffb17 	ldw	r2,-20(fp)
   85cdc:	10002226 	beq	r2,zero,85d68 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   85ce0:	e0bffb17 	ldw	r2,-20(fp)
   85ce4:	10800217 	ldw	r2,8(r2)
   85ce8:	108000cc 	andi	r2,r2,3
   85cec:	10800060 	cmpeqi	r2,r2,1
   85cf0:	1000181e 	bne	r2,zero,85d54 <read+0xc0>
        (fd->dev->read))
   85cf4:	e0bffb17 	ldw	r2,-20(fp)
   85cf8:	10800017 	ldw	r2,0(r2)
   85cfc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   85d00:	10001426 	beq	r2,zero,85d54 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   85d04:	e0bffb17 	ldw	r2,-20(fp)
   85d08:	10800017 	ldw	r2,0(r2)
   85d0c:	10800517 	ldw	r2,20(r2)
   85d10:	e0ffff17 	ldw	r3,-4(fp)
   85d14:	e13ffb17 	ldw	r4,-20(fp)
   85d18:	e17ffe17 	ldw	r5,-8(fp)
   85d1c:	180d883a 	mov	r6,r3
   85d20:	103ee83a 	callr	r2
   85d24:	e0bffc15 	stw	r2,-16(fp)
   85d28:	e0bffc17 	ldw	r2,-16(fp)
   85d2c:	1000070e 	bge	r2,zero,85d4c <read+0xb8>
        {
          ALT_ERRNO = -rval;
   85d30:	0085c440 	call	85c44 <alt_get_errno>
   85d34:	1007883a 	mov	r3,r2
   85d38:	e0bffc17 	ldw	r2,-16(fp)
   85d3c:	0085c83a 	sub	r2,zero,r2
   85d40:	18800015 	stw	r2,0(r3)
          return -1;
   85d44:	00bfffc4 	movi	r2,-1
   85d48:	00000c06 	br	85d7c <read+0xe8>
        }
        return rval;
   85d4c:	e0bffc17 	ldw	r2,-16(fp)
   85d50:	00000a06 	br	85d7c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   85d54:	0085c440 	call	85c44 <alt_get_errno>
   85d58:	1007883a 	mov	r3,r2
   85d5c:	00800344 	movi	r2,13
   85d60:	18800015 	stw	r2,0(r3)
   85d64:	00000406 	br	85d78 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   85d68:	0085c440 	call	85c44 <alt_get_errno>
   85d6c:	1007883a 	mov	r3,r2
   85d70:	00801444 	movi	r2,81
   85d74:	18800015 	stw	r2,0(r3)
  }
  return -1;
   85d78:	00bfffc4 	movi	r2,-1
}
   85d7c:	e037883a 	mov	sp,fp
   85d80:	dfc00117 	ldw	ra,4(sp)
   85d84:	df000017 	ldw	fp,0(sp)
   85d88:	dec00204 	addi	sp,sp,8
   85d8c:	f800283a 	ret

00085d90 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   85d90:	defff904 	addi	sp,sp,-28
   85d94:	df000615 	stw	fp,24(sp)
   85d98:	df000604 	addi	fp,sp,24
   85d9c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   85da0:	0005303a 	rdctl	r2,status
   85da4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   85da8:	e0fffc17 	ldw	r3,-16(fp)
   85dac:	00bfff84 	movi	r2,-2
   85db0:	1884703a 	and	r2,r3,r2
   85db4:	1001703a 	wrctl	status,r2
  
  return context;
   85db8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   85dbc:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   85dc0:	d0a00f17 	ldw	r2,-32708(gp)
   85dc4:	10c000c4 	addi	r3,r2,3
   85dc8:	00bfff04 	movi	r2,-4
   85dcc:	1884703a 	and	r2,r3,r2
   85dd0:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   85dd4:	d0e00f17 	ldw	r3,-32708(gp)
   85dd8:	e0bfff17 	ldw	r2,-4(fp)
   85ddc:	1887883a 	add	r3,r3,r2
   85de0:	00800374 	movhi	r2,13
   85de4:	10ac0004 	addi	r2,r2,-20480
   85de8:	10c0062e 	bgeu	r2,r3,85e04 <sbrk+0x74>
   85dec:	e0bffa17 	ldw	r2,-24(fp)
   85df0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   85df4:	e0bffd17 	ldw	r2,-12(fp)
   85df8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   85dfc:	00bfffc4 	movi	r2,-1
   85e00:	00000b06 	br	85e30 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   85e04:	d0a00f17 	ldw	r2,-32708(gp)
   85e08:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   85e0c:	d0e00f17 	ldw	r3,-32708(gp)
   85e10:	e0bfff17 	ldw	r2,-4(fp)
   85e14:	1885883a 	add	r2,r3,r2
   85e18:	d0a00f15 	stw	r2,-32708(gp)
   85e1c:	e0bffa17 	ldw	r2,-24(fp)
   85e20:	e0bffe15 	stw	r2,-8(fp)
   85e24:	e0bffe17 	ldw	r2,-8(fp)
   85e28:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   85e2c:	e0bffb17 	ldw	r2,-20(fp)
} 
   85e30:	e037883a 	mov	sp,fp
   85e34:	df000017 	ldw	fp,0(sp)
   85e38:	dec00104 	addi	sp,sp,4
   85e3c:	f800283a 	ret

00085e40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   85e40:	defffe04 	addi	sp,sp,-8
   85e44:	dfc00115 	stw	ra,4(sp)
   85e48:	df000015 	stw	fp,0(sp)
   85e4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   85e50:	00800234 	movhi	r2,8
   85e54:	109efe04 	addi	r2,r2,31736
   85e58:	10800017 	ldw	r2,0(r2)
   85e5c:	10000526 	beq	r2,zero,85e74 <alt_get_errno+0x34>
   85e60:	00800234 	movhi	r2,8
   85e64:	109efe04 	addi	r2,r2,31736
   85e68:	10800017 	ldw	r2,0(r2)
   85e6c:	103ee83a 	callr	r2
   85e70:	00000206 	br	85e7c <alt_get_errno+0x3c>
   85e74:	00800274 	movhi	r2,9
   85e78:	10a5c704 	addi	r2,r2,-26852
}
   85e7c:	e037883a 	mov	sp,fp
   85e80:	dfc00117 	ldw	ra,4(sp)
   85e84:	df000017 	ldw	fp,0(sp)
   85e88:	dec00204 	addi	sp,sp,8
   85e8c:	f800283a 	ret

00085e90 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   85e90:	defff904 	addi	sp,sp,-28
   85e94:	dfc00615 	stw	ra,24(sp)
   85e98:	df000515 	stw	fp,20(sp)
   85e9c:	df000504 	addi	fp,sp,20
   85ea0:	e13ffd15 	stw	r4,-12(fp)
   85ea4:	e17ffe15 	stw	r5,-8(fp)
   85ea8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   85eac:	e0bffd17 	ldw	r2,-12(fp)
   85eb0:	10000616 	blt	r2,zero,85ecc <write+0x3c>
   85eb4:	e0bffd17 	ldw	r2,-12(fp)
   85eb8:	10c00324 	muli	r3,r2,12
   85ebc:	00800234 	movhi	r2,8
   85ec0:	109c8c04 	addi	r2,r2,29232
   85ec4:	1885883a 	add	r2,r3,r2
   85ec8:	00000106 	br	85ed0 <write+0x40>
   85ecc:	0005883a 	mov	r2,zero
   85ed0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   85ed4:	e0bffb17 	ldw	r2,-20(fp)
   85ed8:	10002126 	beq	r2,zero,85f60 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   85edc:	e0bffb17 	ldw	r2,-20(fp)
   85ee0:	10800217 	ldw	r2,8(r2)
   85ee4:	108000cc 	andi	r2,r2,3
   85ee8:	10001826 	beq	r2,zero,85f4c <write+0xbc>
   85eec:	e0bffb17 	ldw	r2,-20(fp)
   85ef0:	10800017 	ldw	r2,0(r2)
   85ef4:	10800617 	ldw	r2,24(r2)
   85ef8:	10001426 	beq	r2,zero,85f4c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   85efc:	e0bffb17 	ldw	r2,-20(fp)
   85f00:	10800017 	ldw	r2,0(r2)
   85f04:	10800617 	ldw	r2,24(r2)
   85f08:	e0ffff17 	ldw	r3,-4(fp)
   85f0c:	e13ffb17 	ldw	r4,-20(fp)
   85f10:	e17ffe17 	ldw	r5,-8(fp)
   85f14:	180d883a 	mov	r6,r3
   85f18:	103ee83a 	callr	r2
   85f1c:	e0bffc15 	stw	r2,-16(fp)
   85f20:	e0bffc17 	ldw	r2,-16(fp)
   85f24:	1000070e 	bge	r2,zero,85f44 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   85f28:	0085e400 	call	85e40 <alt_get_errno>
   85f2c:	1007883a 	mov	r3,r2
   85f30:	e0bffc17 	ldw	r2,-16(fp)
   85f34:	0085c83a 	sub	r2,zero,r2
   85f38:	18800015 	stw	r2,0(r3)
        return -1;
   85f3c:	00bfffc4 	movi	r2,-1
   85f40:	00000c06 	br	85f74 <write+0xe4>
      }
      return rval;
   85f44:	e0bffc17 	ldw	r2,-16(fp)
   85f48:	00000a06 	br	85f74 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   85f4c:	0085e400 	call	85e40 <alt_get_errno>
   85f50:	1007883a 	mov	r3,r2
   85f54:	00800344 	movi	r2,13
   85f58:	18800015 	stw	r2,0(r3)
   85f5c:	00000406 	br	85f70 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   85f60:	0085e400 	call	85e40 <alt_get_errno>
   85f64:	1007883a 	mov	r3,r2
   85f68:	00801444 	movi	r2,81
   85f6c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   85f70:	00bfffc4 	movi	r2,-1
}
   85f74:	e037883a 	mov	sp,fp
   85f78:	dfc00117 	ldw	ra,4(sp)
   85f7c:	df000017 	ldw	fp,0(sp)
   85f80:	dec00204 	addi	sp,sp,8
   85f84:	f800283a 	ret
