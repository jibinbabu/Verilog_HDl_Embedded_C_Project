
lab3.elf:     file format elf32-littlenios2
lab3.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00080240

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x00006024 memsz 0x00006024 flags r-x
    LOAD off    0x00007044 vaddr 0x00086044 paddr 0x00087b18 align 2**12
         filesz 0x00001ad4 memsz 0x00001ad4 flags rw-
    LOAD off    0x000095ec vaddr 0x000895ec paddr 0x000895ec align 2**12
         filesz 0x00000000 memsz 0x00000564 flags rw-
    LOAD off    0x00009000 vaddr 0x00100000 paddr 0x00089b50 align 2**12
         filesz 0x00000080 memsz 0x00000080 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000220  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005c88  00080240  00080240  00001240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000017c  00085ec8  00085ec8  00006ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ad4  00086044  00087b18  00007044  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000564  000895ec  000895ec  000095ec  2**2
                  ALLOC, SMALL_DATA
  6 .main_memory  00000000  00089b50  00089b50  00009080  2**0
                  CONTENTS
  7 .descriptor_memory 00000080  00100000  00089b50  00009000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .comment      00000023  00000000  00000000  00009080  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000978  00000000  00000000  000090a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000166fb  00000000  00000000  00009a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006021  00000000  00000000  0002011b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000655f  00000000  00000000  0002613c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000017dc  00000000  00000000  0002c69c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000028c9  00000000  00000000  0002de78  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00002d54  00000000  00000000  00030741  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00033498  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000001d0  00000000  00000000  000334c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0003612b  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0003612e  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00036133  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00036134  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  00036135  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0003613e  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  00036147  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000b  00000000  00000000  00036150  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000001e  00000000  00000000  0003615b  2**0
                  CONTENTS, READONLY
 27 .jdi          00004537  00000000  00000000  00036179  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0006d1f9  00000000  00000000  0003a6b0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
00080240 l    d  .text	00000000 .text
00085ec8 l    d  .rodata	00000000 .rodata
00086044 l    d  .rwdata	00000000 .rwdata
000895ec l    d  .bss	00000000 .bss
00089b50 l    d  .main_memory	00000000 .main_memory
00100000 l    d  .descriptor_memory	00000000 .descriptor_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab3_bsp//obj/HAL/src/crt0.o
00080288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 lab3.c
00000000 l    df *ABS*	00000000 alt_load.c
00080660 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00080a28 l     F .text	00000038 alt_dev_reg
00086044 l     O .rwdata	00001060 jtag_uart
000870a4 l     O .rwdata	00000030 sgdma_rx
000870d4 l     O .rwdata	00000030 sgdma_tx
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00080d2c l     F .text	00000204 altera_avalon_jtag_uart_irq
00080f30 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
00081550 l     F .text	00000050 alt_get_errno
00082164 l     F .text	000000b8 alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00082400 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000825d8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00082604 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00082b40 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00082c78 l     F .text	00000050 alt_get_errno
00082cc8 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
000872ac l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00083f98 l     F .text	00000008 __fp_lock
00083fa0 l     F .text	00000008 __fp_unlock
00083fb4 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0008582c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0008592c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00085a20 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00085b84 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
00087b14 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00085d80 l     F .text	00000050 alt_get_errno
00089614 g     O .bss	00000004 alt_instruction_exception_handler
000856ec g     F .text	00000054 _isatty_r
00080744 g     F .text	00000078 alt_main
000805ac g     F .text	000000b4 rx_ethernet_isr
00089a50 g     O .bss	00000100 alt_irq
00085740 g     F .text	0000005c _lseek_r
00087b18 g       *ABS*	00000000 __flash_rwdata_start
000895f0 g     O .bss	00000004 print
00089b50 g       *ABS*	00000000 __alt_heap_start
000816c4 g     F .text	00000110 alt_avalon_sgdma_do_sync_transfer
0008546c g     F .text	0000005c __sseek
000842e8 g     F .text	00000010 __sinit
000837f8 g     F .text	00000154 __swbuf_r
00084154 g     F .text	00000064 __sfmoreglue
00085b64 g     F .text	00000020 __malloc_unlock
00081db0 g     F .text	000003b4 alt_avalon_sgdma_construct_descriptor_burst
000842d0 g     F .text	00000018 _cleanup
000895ec g     O .bss	00000004 in
000830e8 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00080000 g     F .entry	0000001c __reset
00081920 g     F .text	00000074 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
00080020 g       *ABS*	00000000 __flash_exceptions_start
00085694 g     F .text	00000058 _fstat_r
00089618 g     O .bss	00000004 errno
000853e8 g     F .text	00000008 __seofread
00089600 g     O .bss	00000004 alt_argv
0008fad8 g       *ABS*	00000000 _gp
0008712c g     O .rwdata	00000180 alt_fd_list
000827b0 g     F .text	00000090 alt_find_dev
000834c0 g     F .text	00000138 memcpy
00083fa8 g     F .text	0000000c _cleanup_r
00082c00 g     F .text	00000078 alt_io_redirect
00085ec8 g       *ABS*	00000000 __DTOR_END__
0008335c g     F .text	0000009c alt_exception_cause_generated_bad_addr
00081a0c g     F .text	00000088 alt_avalon_sgdma_construct_mem_to_stream_desc_burst
0008112c g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0008597c g     F .text	000000a4 isatty
000832d0 g     F .text	0000008c alt_icache_flush
00089624 g     O .bss	00000004 __malloc_top_pad
00081b38 g     F .text	00000058 alt_avalon_sgdma_stop
00085340 g     F .text	00000054 _sbrk_r
0008579c g     F .text	0000005c _read_r
00082520 g     F .text	00000074 alt_dcache_flush
00087af0 g     O .rwdata	00000004 alt_max_fd
00085580 g     F .text	00000100 _fclose_r
00083f68 g     F .text	00000030 fflush
00089620 g     O .bss	00000004 __malloc_max_sbrked_mem
00080000 g       *ABS*	00000000 __alt_mem_main_memory
00085a70 g     F .text	000000d4 lseek
00087b04 g     O .rwdata	00000004 _global_impure_ptr
00089b50 g       *ABS*	00000000 __bss_end
00082a50 g     F .text	000000f0 alt_iic_isr_register
000815a0 g     F .text	00000124 alt_avalon_sgdma_do_async_transfer
00082fe4 g     F .text	00000104 alt_tick
00100060 g     O .descriptor_memory	00000020 rx_descriptor_end
00084308 g     F .text	00000018 __fp_lock_all
00082a04 g     F .text	0000004c alt_ic_irq_enabled
00082f4c g     F .text	00000098 alt_alarm_stop
00100000 g       *ABS*	00000000 __alt_mem_descriptor_memory
00089608 g     O .bss	00000004 alt_irq_active
000800fc g     F .exceptions	000000d0 alt_irq_handler
00087104 g     O .rwdata	00000028 alt_dev_null
00081b90 g     F .text	00000064 alt_avalon_sgdma_check_descriptor_status
00082594 g     F .text	00000044 alt_dcache_flush_all
00100040 g     O .descriptor_memory	00000020 rx_descriptor
00087b18 g       *ABS*	00000000 __ram_rwdata_end
00087ae8 g     O .rwdata	00000008 alt_dev_list
00085dd0 g     F .text	000000f8 write
00081cd0 g     F .text	00000080 alt_avalon_sgdma_enable_desc_poll
000835f8 g     F .text	000000a0 _putc_r
00086044 g       *ABS*	00000000 __ram_rodata_end
0008587c g     F .text	000000b0 fstat
00081994 g     F .text	00000078 alt_avalon_sgdma_construct_mem_to_stream_desc
00081a94 g     F .text	00000050 alt_avalon_sgdma_register_callback
00089b50 g       *ABS*	00000000 end
00080c68 g     F .text	000000c4 altera_avalon_jtag_uart_init
000801cc g     F .exceptions	00000074 alt_instruction_exception_entry
00085ec8 g       *ABS*	00000000 __CTOR_LIST__
000cb000 g       *ABS*	00000000 __alt_stack_pointer
00081d50 g     F .text	00000060 alt_avalon_sgdma_disable_desc_poll
00081338 g     F .text	00000218 altera_avalon_jtag_uart_write
000817d4 g     F .text	00000070 alt_avalon_sgdma_construct_mem_to_mem_desc
000842f8 g     F .text	00000004 __sfp_lock_acquire
000818c4 g     F .text	0000005c alt_avalon_sgdma_construct_stream_to_mem_desc
0008445c g     F .text	000002f0 _free_r
000807bc g     F .text	00000228 alt_printf
00083bac g     F .text	00000194 __call_exitprocs
00087b0c g     O .rwdata	00000004 __malloc_sbrk_base
00080240 g     F .text	0000004c _start
0008960c g     O .bss	00000004 _alt_tick_rate
000895f4 g     O .bss	00000004 sgdma_tx_dev
00081bf4 g     F .text	00000054 alt_avalon_sgdma_open
00089610 g     O .bss	00000004 _alt_nticks
00085bd4 g     F .text	000000fc read
00080a94 g     F .text	00000070 alt_sys_init
00083a98 g     F .text	00000114 __register_exitproc
00080fd8 g     F .text	00000068 altera_avalon_jtag_uart_close
00086044 g       *ABS*	00000000 __ram_rwdata_start
00085ec8 g       *ABS*	00000000 __ram_rodata_start
00089a28 g     O .bss	00000028 __malloc_current_mallinfo
00080b04 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0008321c g     F .text	000000b4 alt_get_fd
0008552c g     F .text	00000054 _close_r
00083444 g     F .text	0000007c memcmp
00080bc4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00089b50 g       *ABS*	00000000 __alt_stack_base
00080c14 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00083968 g     F .text	00000130 __swsetup_r
000841b8 g     F .text	00000118 __sfp
000876d0 g     O .rwdata	00000408 __malloc_av_
00084304 g     F .text	00000004 __sinit_lock_release
00085394 g     F .text	00000054 __sread
00083108 g     F .text	00000114 alt_find_file
00082654 g     F .text	000000a4 alt_dev_llist_insert
00085b44 g     F .text	00000020 __malloc_lock
00085cd0 g     F .text	000000b0 sbrk
00081ae4 g     F .text	00000054 alt_avalon_sgdma_start
00083d40 g     F .text	00000228 _fflush_r
000895ec g       *ABS*	00000000 __bss_start
0008521c g     F .text	00000124 memset
0008028c g     F .text	00000320 main
00089604 g     O .bss	00000004 alt_envp
0008961c g     O .bss	00000004 __malloc_max_total_mem
00080b64 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0008394c g     F .text	0000001c __swbuf
00087ad8 g     O .rwdata	00000008 alt_sgdma_list
000854c8 g     F .text	00000008 __sclose
000cb000 g       *ABS*	00000000 __alt_heap_limit
00085680 g     F .text	00000014 fclose
00084a74 g     F .text	000007a8 _malloc_r
00087af4 g     O .rwdata	00000004 alt_errno
00100000 g     O .descriptor_memory	00000020 tx_descriptor
00089628 g     O .bss	00000400 rx_frame
0008474c g     F .text	000000b8 _fwalk
00083698 g     F .text	000000c8 putc
00084338 g     F .text	00000124 _malloc_trim_r
00085ec8 g       *ABS*	00000000 __CTOR_END__
00085ec8 g       *ABS*	00000000 __flash_rodata_start
00085ec8 g       *ABS*	00000000 __DTOR_LIST__
00080a60 g     F .text	00000034 alt_irq_init
00082eec g     F .text	00000060 alt_release_fd
000833f8 g     F .text	00000014 atexit
000854d0 g     F .text	0000005c _write_r
00087b08 g     O .rwdata	00000004 _impure_ptr
000895fc g     O .bss	00000004 alt_argc
00082754 g     F .text	0000005c _do_dtors
00080020 g       .exceptions	00000000 alt_irq_entry
00084320 g     F .text	00000018 __fp_unlock_all
00087ae0 g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
00082870 g     F .text	00000050 alt_ic_isr_register
00087b18 g       *ABS*	00000000 _edata
00089b50 g       *ABS*	00000000 _end
00080240 g       *ABS*	00000000 __ram_exceptions_end
00081040 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00082960 g     F .text	000000a4 alt_ic_irq_disable
00100020 g     O .descriptor_memory	00000020 tx_descriptor_end
00081c48 g     F .text	00000088 alt_avalon_sgdma_construct_descriptor
000853f0 g     F .text	0000007c __swrite
00087b10 g     O .rwdata	00000004 __malloc_trim_threshold
0008340c g     F .text	00000038 exit
00084804 g     F .text	000000b8 _fwalk_reent
000cb000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
000842fc g     F .text	00000004 __sfp_lock_release
000895f8 g     O .bss	00000004 sgdma_rx_dev
000857f8 g     F .text	00000034 _exit
000822c0 g     F .text	00000140 alt_alarm_start
000848bc g     F .text	000001b8 __smakebuf_r
00083760 g     F .text	00000098 strlen
00082d94 g     F .text	00000158 open
000809e4 g     F .text	00000044 alt_putchar
00082840 g     F .text	00000030 alt_icache_flush_all
00087af8 g     O .rwdata	00000004 alt_priority_mask
000828c0 g     F .text	000000a0 alt_ic_irq_enable
00081844 g     F .text	00000080 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
00087afc g     O .rwdata	00000008 alt_alarm_list
000826f8 g     F .text	0000005c _do_ctors
00082450 g     F .text	000000d0 close
000806c4 g     F .text	00000080 alt_load
0008221c g     F .text	000000a4 alt_avalon_sgdma_init
00000000  w      *UND*	00000000 free
00084300 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   80000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   80004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   80008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   8000c:	00bffd16 	blt	zero,r2,80004 <rx_descriptor_end+0xfff7ffa4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80010:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80014:	08409014 	ori	at,at,576
    jmp r1
   80018:	0800683a 	jmp	at
   8001c:	00000000 	call	0 <__reset-0x80000>

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00800fc0 	call	800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00000706 	br	800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   80094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   80098:	00801cc0 	call	801cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   8009c:	1000021e 	bne	r2,zero,800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   800f8:	ef80083a 	eret

000800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   800fc:	defff904 	addi	sp,sp,-28
   80100:	dfc00615 	stw	ra,24(sp)
   80104:	df000515 	stw	fp,20(sp)
   80108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   8010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   80110:	0005313a 	rdctl	r2,ipending
   80114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   80118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   8011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   80120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   80124:	00800044 	movi	r2,1
   80128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   8012c:	e0fffb17 	ldw	r3,-20(fp)
   80130:	e0bffc17 	ldw	r2,-16(fp)
   80134:	1884703a 	and	r2,r3,r2
   80138:	10001426 	beq	r2,zero,8018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   8013c:	00800274 	movhi	r2,9
   80140:	10a69404 	addi	r2,r2,-26032
   80144:	e0fffd17 	ldw	r3,-12(fp)
   80148:	180690fa 	slli	r3,r3,3
   8014c:	10c5883a 	add	r2,r2,r3
   80150:	10c00017 	ldw	r3,0(r2)
   80154:	00800274 	movhi	r2,9
   80158:	10a69404 	addi	r2,r2,-26032
   8015c:	e13ffd17 	ldw	r4,-12(fp)
   80160:	200890fa 	slli	r4,r4,3
   80164:	1105883a 	add	r2,r2,r4
   80168:	10800104 	addi	r2,r2,4
   8016c:	10800017 	ldw	r2,0(r2)
   80170:	1009883a 	mov	r4,r2
   80174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   80178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   8017c:	0005313a 	rdctl	r2,ipending
   80180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   80184:	e0bfff17 	ldw	r2,-4(fp)
   80188:	00000706 	br	801a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   8018c:	e0bffc17 	ldw	r2,-16(fp)
   80190:	1085883a 	add	r2,r2,r2
   80194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   80198:	e0bffd17 	ldw	r2,-12(fp)
   8019c:	10800044 	addi	r2,r2,1
   801a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   801a4:	003fe106 	br	8012c <rx_descriptor_end+0xfff800cc>

    active = alt_irq_pending ();
   801a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   801ac:	e0bffb17 	ldw	r2,-20(fp)
   801b0:	103fdb1e 	bne	r2,zero,80120 <rx_descriptor_end+0xfff800c0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   801b4:	0001883a 	nop
}
   801b8:	e037883a 	mov	sp,fp
   801bc:	dfc00117 	ldw	ra,4(sp)
   801c0:	df000017 	ldw	fp,0(sp)
   801c4:	dec00204 	addi	sp,sp,8
   801c8:	f800283a 	ret

000801cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   801cc:	defffb04 	addi	sp,sp,-20
   801d0:	dfc00415 	stw	ra,16(sp)
   801d4:	df000315 	stw	fp,12(sp)
   801d8:	df000304 	addi	fp,sp,12
   801dc:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   801e0:	000531fa 	rdctl	r2,exception
   801e4:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   801e8:	e0bffd17 	ldw	r2,-12(fp)
   801ec:	10801f0c 	andi	r2,r2,124
   801f0:	1004d0ba 	srli	r2,r2,2
   801f4:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   801f8:	0005333a 	rdctl	r2,badaddr
   801fc:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   80200:	d0a6cf17 	ldw	r2,-25796(gp)
   80204:	10000726 	beq	r2,zero,80224 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   80208:	d0a6cf17 	ldw	r2,-25796(gp)
   8020c:	e0fffd17 	ldw	r3,-12(fp)
   80210:	1809883a 	mov	r4,r3
   80214:	e17fff17 	ldw	r5,-4(fp)
   80218:	e1bffe17 	ldw	r6,-8(fp)
   8021c:	103ee83a 	callr	r2
   80220:	00000206 	br	8022c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   80224:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   80228:	0005883a 	mov	r2,zero
}
   8022c:	e037883a 	mov	sp,fp
   80230:	dfc00117 	ldw	ra,4(sp)
   80234:	df000017 	ldw	fp,0(sp)
   80238:	dec00204 	addi	sp,sp,8
   8023c:	f800283a 	ret

Disassembly of section .text:

00080240 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   80240:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   80244:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   80248:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   8024c:	00bffd16 	blt	zero,r2,80244 <rx_descriptor_end+0xfff801e4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   80250:	06c00334 	movhi	sp,12
    ori sp, sp, %lo(__alt_stack_pointer)
   80254:	deec0014 	ori	sp,sp,45056
    movhi gp, %hi(_gp)
   80258:	06800234 	movhi	gp,8
    ori gp, gp, %lo(_gp)
   8025c:	d6beb614 	ori	gp,gp,64216
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   80260:	00800234 	movhi	r2,8
    ori r2, r2, %lo(__bss_start)
   80264:	10a57b14 	ori	r2,r2,38380

    movhi r3, %hi(__bss_end)
   80268:	00c00234 	movhi	r3,8
    ori r3, r3, %lo(__bss_end)
   8026c:	18e6d414 	ori	r3,r3,39760

    beq r2, r3, 1f
   80270:	10c00326 	beq	r2,r3,80280 <_start+0x40>

0:
    stw zero, (r2)
   80274:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   80278:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   8027c:	10fffd36 	bltu	r2,r3,80274 <rx_descriptor_end+0xfff80214>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   80280:	00806c40 	call	806c4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   80284:	00807440 	call	80744 <alt_main>

00080288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   80288:	003fff06 	br	80288 <rx_descriptor_end+0xfff80228>

0008028c <main>:


/********************************************************************************
 * This program demonstrates use of the Ethernet in the DE2i-150 board.
********************************************************************************/
int main(void){
   8028c:	defffc04 	addi	sp,sp,-16
   80290:	dfc00315 	stw	ra,12(sp)
   80294:	df000215 	stw	fp,8(sp)
   80298:	df000204 	addi	fp,sp,8

	// Open the sgdma transmit device
	sgdma_tx_dev = alt_avalon_sgdma_open ("/dev/sgdma_tx");
   8029c:	01000234 	movhi	r4,8
   802a0:	2117b204 	addi	r4,r4,24264
   802a4:	0081bf40 	call	81bf4 <alt_avalon_sgdma_open>
   802a8:	d0a6c715 	stw	r2,-25828(gp)
	if (sgdma_tx_dev == NULL) {
   802ac:	d0a6c717 	ldw	r2,-25828(gp)
   802b0:	1000041e 	bne	r2,zero,802c4 <main+0x38>
		alt_printf ("Error: could not open scatter-gather dma transmit device\n");
   802b4:	01000234 	movhi	r4,8
   802b8:	2117b604 	addi	r4,r4,24280
   802bc:	00807bc0 	call	807bc <alt_printf>
   802c0:	00000306 	br	802d0 <main+0x44>
		//return -1;
	} else alt_printf ("Opened scatter-gather dma transmit device\n");
   802c4:	01000234 	movhi	r4,8
   802c8:	2117c504 	addi	r4,r4,24340
   802cc:	00807bc0 	call	807bc <alt_printf>

	// Open the sgdma receive device
	sgdma_rx_dev = alt_avalon_sgdma_open ("/dev/sgdma_rx");
   802d0:	01000234 	movhi	r4,8
   802d4:	2117d004 	addi	r4,r4,24384
   802d8:	0081bf40 	call	81bf4 <alt_avalon_sgdma_open>
   802dc:	d0a6c815 	stw	r2,-25824(gp)
	if (sgdma_rx_dev == NULL) {
   802e0:	d0a6c817 	ldw	r2,-25824(gp)
   802e4:	1000041e 	bne	r2,zero,802f8 <main+0x6c>
		alt_printf ("Error: could not open scatter-gather dma receive device\n");
   802e8:	01000234 	movhi	r4,8
   802ec:	2117d404 	addi	r4,r4,24400
   802f0:	00807bc0 	call	807bc <alt_printf>
   802f4:	00000306 	br	80304 <main+0x78>
		//return -1;
	} else alt_printf ("Opened scatter-gather dma receive device\n");
   802f8:	01000234 	movhi	r4,8
   802fc:	2117e304 	addi	r4,r4,24460
   80300:	00807bc0 	call	807bc <alt_printf>



	// Set interrupts for the sgdma receive device
	alt_avalon_sgdma_register_callback( sgdma_rx_dev, (alt_avalon_sgdma_callback) rx_ethernet_isr, 0x00000014, NULL );
   80304:	d0a6c817 	ldw	r2,-25824(gp)
   80308:	1009883a 	mov	r4,r2
   8030c:	01400234 	movhi	r5,8
   80310:	29416b04 	addi	r5,r5,1452
   80314:	01800504 	movi	r6,20
   80318:	000f883a 	mov	r7,zero
   8031c:	0081a940 	call	81a94 <alt_avalon_sgdma_register_callback>

	// Create sgdma receive descriptor
	alt_avalon_sgdma_construct_stream_to_mem_desc( &rx_descriptor, &rx_descriptor_end, (alt_u32 *)rx_frame, 0, 0 );
   80320:	d8000015 	stw	zero,0(sp)
   80324:	01000434 	movhi	r4,16
   80328:	21001004 	addi	r4,r4,64
   8032c:	01400434 	movhi	r5,16
   80330:	29401804 	addi	r5,r5,96
   80334:	01800274 	movhi	r6,9
   80338:	31a58a04 	addi	r6,r6,-27096
   8033c:	000f883a 	mov	r7,zero
   80340:	00818c40 	call	818c4 <alt_avalon_sgdma_construct_stream_to_mem_desc>

	// Set up non-blocking transfer of sgdma receive descriptor
	alt_avalon_sgdma_do_async_transfer( sgdma_rx_dev, &rx_descriptor );
   80344:	d0a6c817 	ldw	r2,-25824(gp)
   80348:	1009883a 	mov	r4,r2
   8034c:	01400434 	movhi	r5,16
   80350:	29401004 	addi	r5,r5,64
   80354:	00815a00 	call	815a0 <alt_avalon_sgdma_do_async_transfer>



	// Triple-speed Ethernet MegaCore base address
	volatile int * tse = (int *) TSE_BASE;
   80358:	00800434 	movhi	r2,16
   8035c:	10880004 	addi	r2,r2,8192
   80360:	e0bfff15 	stw	r2,-4(fp)

	// Specify the addresses of the PHY devices to be accessed through MDIO interface
	*(tse + 0x0F) = 0x10;
   80364:	e0bfff17 	ldw	r2,-4(fp)
   80368:	10800f04 	addi	r2,r2,60
   8036c:	00c00404 	movi	r3,16
   80370:	10c00015 	stw	r3,0(r2)

	// Disable read and write transfers and wait
	*(tse + 0x02) = *(tse + 0x02) | 0x00800220;
   80374:	e0bfff17 	ldw	r2,-4(fp)
   80378:	10c00204 	addi	r3,r2,8
   8037c:	e0bfff17 	ldw	r2,-4(fp)
   80380:	10800204 	addi	r2,r2,8
   80384:	11000017 	ldw	r4,0(r2)
   80388:	00802034 	movhi	r2,128
   8038c:	10808804 	addi	r2,r2,544
   80390:	2084b03a 	or	r2,r4,r2
   80394:	18800015 	stw	r2,0(r3)
	while ( *(tse + 0x02) != ( *(tse + 0x02) | 0x00800220 ) );
   80398:	0001883a 	nop
   8039c:	e0bfff17 	ldw	r2,-4(fp)
   803a0:	10800204 	addi	r2,r2,8
   803a4:	10c00017 	ldw	r3,0(r2)
   803a8:	e0bfff17 	ldw	r2,-4(fp)
   803ac:	10800204 	addi	r2,r2,8
   803b0:	11000017 	ldw	r4,0(r2)
   803b4:	00802034 	movhi	r2,128
   803b8:	10808804 	addi	r2,r2,544
   803bc:	2084b03a 	or	r2,r4,r2
   803c0:	18bff61e 	bne	r3,r2,8039c <rx_descriptor_end+0xfff8033c>


	//MAC FIFO Configuration
	*(tse + 0x09 ) = TSE_TRANSMIT_FIFO_DEPTH-16;
   803c4:	e0bfff17 	ldw	r2,-4(fp)
   803c8:	10800904 	addi	r2,r2,36
   803cc:	00c1fc04 	movi	r3,2032
   803d0:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0E ) = 3;
   803d4:	e0bfff17 	ldw	r2,-4(fp)
   803d8:	10800e04 	addi	r2,r2,56
   803dc:	00c000c4 	movi	r3,3
   803e0:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0D ) = 8;
   803e4:	e0bfff17 	ldw	r2,-4(fp)
   803e8:	10800d04 	addi	r2,r2,52
   803ec:	00c00204 	movi	r3,8
   803f0:	10c00015 	stw	r3,0(r2)
	*(tse + 0x07 ) =TSE_RECEIVE_FIFO_DEPTH-16;
   803f4:	e0bfff17 	ldw	r2,-4(fp)
   803f8:	10800704 	addi	r2,r2,28
   803fc:	00c1fc04 	movi	r3,2032
   80400:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0C ) = 8;
   80404:	e0bfff17 	ldw	r2,-4(fp)
   80408:	10800c04 	addi	r2,r2,48
   8040c:	00c00204 	movi	r3,8
   80410:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0B ) = 8;
   80414:	e0bfff17 	ldw	r2,-4(fp)
   80418:	10800b04 	addi	r2,r2,44
   8041c:	00c00204 	movi	r3,8
   80420:	10c00015 	stw	r3,0(r2)
	*(tse + 0x0A ) = 0;
   80424:	e0bfff17 	ldw	r2,-4(fp)
   80428:	10800a04 	addi	r2,r2,40
   8042c:	10000015 	stw	zero,0(r2)
	*(tse + 0x08 ) = 0;
   80430:	e0bfff17 	ldw	r2,-4(fp)
   80434:	10800804 	addi	r2,r2,32
   80438:	10000015 	stw	zero,0(r2)

	// Initialize the MAC address
	*(tse + 0x18) = 0x17231C00;
   8043c:	e0bfff17 	ldw	r2,-4(fp)
   80440:	10c01804 	addi	r3,r2,96
   80444:	0085c8f4 	movhi	r2,5923
   80448:	10870004 	addi	r2,r2,7168
   8044c:	18800015 	stw	r2,0(r3)
	*(tse + 0x19) = 0x0000CB4A;
   80450:	e0bfff17 	ldw	r2,-4(fp)
   80454:	10801904 	addi	r2,r2,100
   80458:	00f2d294 	movui	r3,52042
   8045c:	10c00015 	stw	r3,0(r2)

	// MAC function configuration
	*(tse + 0x05) = 1518;
   80460:	e0bfff17 	ldw	r2,-4(fp)
   80464:	10800504 	addi	r2,r2,20
   80468:	00c17b84 	movi	r3,1518
   8046c:	10c00015 	stw	r3,0(r2)
	*(tse + 0x17) = 12;
   80470:	e0bfff17 	ldw	r2,-4(fp)
   80474:	10801704 	addi	r2,r2,92
   80478:	00c00304 	movi	r3,12
   8047c:	10c00015 	stw	r3,0(r2)
	*(tse + 0x06) = 0xFFFF;
   80480:	e0bfff17 	ldw	r2,-4(fp)
   80484:	10800604 	addi	r2,r2,24
   80488:	00ffffd4 	movui	r3,65535
   8048c:	10c00015 	stw	r3,0(r2)
	*(tse + 0x02) = 0x00800220;
   80490:	e0bfff17 	ldw	r2,-4(fp)
   80494:	10c00204 	addi	r3,r2,8
   80498:	00802034 	movhi	r2,128
   8049c:	10808804 	addi	r2,r2,544
   804a0:	18800015 	stw	r2,0(r3)


	// Software reset the PHY chip and wait
	*(tse + 0x02) =  0x00802220;
   804a4:	e0bfff17 	ldw	r2,-4(fp)
   804a8:	10c00204 	addi	r3,r2,8
   804ac:	00802034 	movhi	r2,128
   804b0:	10888804 	addi	r2,r2,8736
   804b4:	18800015 	stw	r2,0(r3)
	while ( *(tse + 0x02) != ( 0x00800220 ) );
   804b8:	0001883a 	nop
   804bc:	e0bfff17 	ldw	r2,-4(fp)
   804c0:	10800204 	addi	r2,r2,8
   804c4:	10c00017 	ldw	r3,0(r2)
   804c8:	00802034 	movhi	r2,128
   804cc:	10808804 	addi	r2,r2,544
   804d0:	18bffa1e 	bne	r3,r2,804bc <rx_descriptor_end+0xfff8045c>

	// Enable read and write transfers, gigabit Ethernet operation and promiscuous mode
	
	*(tse + 0x02) = *(tse + 0x02) | 0x0080023B;
   804d4:	e0bfff17 	ldw	r2,-4(fp)
   804d8:	10c00204 	addi	r3,r2,8
   804dc:	e0bfff17 	ldw	r2,-4(fp)
   804e0:	10800204 	addi	r2,r2,8
   804e4:	11000017 	ldw	r4,0(r2)
   804e8:	00802034 	movhi	r2,128
   804ec:	10808ec4 	addi	r2,r2,571
   804f0:	2084b03a 	or	r2,r4,r2
   804f4:	18800015 	stw	r2,0(r3)

	while ( *(tse + 0x02) != ( *(tse + 0x02) | 0x0080023B ) );
   804f8:	0001883a 	nop
   804fc:	e0bfff17 	ldw	r2,-4(fp)
   80500:	10800204 	addi	r2,r2,8
   80504:	10c00017 	ldw	r3,0(r2)
   80508:	e0bfff17 	ldw	r2,-4(fp)
   8050c:	10800204 	addi	r2,r2,8
   80510:	11000017 	ldw	r4,0(r2)
   80514:	00802034 	movhi	r2,128
   80518:	10808ec4 	addi	r2,r2,571
   8051c:	2084b03a 	or	r2,r4,r2
   80520:	18bff61e 	bne	r3,r2,804fc <rx_descriptor_end+0xfff8049c>


	while (1) {

		print=in;
   80524:	d0a6c517 	ldw	r2,-25836(gp)
   80528:	d0a6c615 	stw	r2,-25832(gp)
		in= SWITCH_BASE; //read the input from the switch
   8052c:	00800434 	movhi	r2,16
   80530:	10892004 	addi	r2,r2,9344
   80534:	d0a6c515 	stw	r2,-25836(gp)
		IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x0100); //switch on or switch off the LED
   80538:	00c04004 	movi	r3,256
   8053c:	00800434 	movhi	r2,16
   80540:	10892404 	addi	r2,r2,9360
   80544:	10c00035 	stwio	r3,0(r2)

		if (in==1){
   80548:	d0a6c517 	ldw	r2,-25836(gp)
   8054c:	10800058 	cmpnei	r2,r2,1
   80550:	10000b1e 	bne	r2,zero,80580 <main+0x2f4>

			if (print != in){
   80554:	d0e6c617 	ldw	r3,-25832(gp)
   80558:	d0a6c517 	ldw	r2,-25836(gp)
   8055c:	18801226 	beq	r3,r2,805a8 <main+0x31c>
				IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x0100);
   80560:	00c04004 	movi	r3,256
   80564:	00800434 	movhi	r2,16
   80568:	10892404 	addi	r2,r2,9360
   8056c:	10c00035 	stwio	r3,0(r2)
				alt_printf( "Switch on LED \n" );		
   80570:	01000234 	movhi	r4,8
   80574:	2117ee04 	addi	r4,r4,24504
   80578:	00807bc0 	call	807bc <alt_printf>
   8057c:	003fe906 	br	80524 <rx_descriptor_end+0xfff804c4>
			}
		}
		else{
			if (print != in) {
   80580:	d0e6c617 	ldw	r3,-25832(gp)
   80584:	d0a6c517 	ldw	r2,-25836(gp)
   80588:	18800726 	beq	r3,r2,805a8 <main+0x31c>
				IOWR_ALTERA_AVALON_PIO_DATA(LED_BASE, 0x0000);
   8058c:	0007883a 	mov	r3,zero
   80590:	00800434 	movhi	r2,16
   80594:	10892404 	addi	r2,r2,9360
   80598:	10c00035 	stwio	r3,0(r2)
				alt_printf( "Switch off LED \n" );
   8059c:	01000234 	movhi	r4,8
   805a0:	2117f204 	addi	r4,r4,24520
   805a4:	00807bc0 	call	807bc <alt_printf>
			}
		}
	}
   805a8:	003fde06 	br	80524 <rx_descriptor_end+0xfff804c4>

000805ac <rx_ethernet_isr>:

/****************************************************************************************
 * Subroutine to read incoming Ethernet frames
****************************************************************************************/
void rx_ethernet_isr (void *context)
{
   805ac:	defffc04 	addi	sp,sp,-16
   805b0:	dfc00315 	stw	ra,12(sp)
   805b4:	df000215 	stw	fp,8(sp)
   805b8:	df000204 	addi	fp,sp,8
   805bc:	e13fff15 	stw	r4,-4(fp)

	//Include your code to show the values of the source and destination addresses of the received frame. For example:
	if(in==1){
   805c0:	d0a6c517 	ldw	r2,-25836(gp)
   805c4:	10800058 	cmpnei	r2,r2,1
   805c8:	10000d1e 	bne	r2,zero,80600 <rx_ethernet_isr+0x54>
		alt_printf( "Source address: %x,%x \n", rx_frame[112], rx_frame[64]);
   805cc:	00800274 	movhi	r2,9
   805d0:	10a58a04 	addi	r2,r2,-27096
   805d4:	10801c03 	ldbu	r2,112(r2)
   805d8:	10c03fcc 	andi	r3,r2,255
   805dc:	00800274 	movhi	r2,9
   805e0:	10a58a04 	addi	r2,r2,-27096
   805e4:	10801003 	ldbu	r2,64(r2)
   805e8:	10803fcc 	andi	r2,r2,255
   805ec:	01000234 	movhi	r4,8
   805f0:	2117f704 	addi	r4,r4,24540
   805f4:	180b883a 	mov	r5,r3
   805f8:	100d883a 	mov	r6,r2
   805fc:	00807bc0 	call	807bc <alt_printf>
	}



	// Wait until receive descriptor transfer is complete
	while (alt_avalon_sgdma_check_descriptor_status(&rx_descriptor) != 0)
   80600:	0001883a 	nop
   80604:	01000434 	movhi	r4,16
   80608:	21001004 	addi	r4,r4,64
   8060c:	0081b900 	call	81b90 <alt_avalon_sgdma_check_descriptor_status>
   80610:	103ffc1e 	bne	r2,zero,80604 <rx_descriptor_end+0xfff805a4>
		;

	// Create new receive sgdma descriptor
	alt_avalon_sgdma_construct_stream_to_mem_desc( &rx_descriptor, &rx_descriptor_end, (alt_u32 *)rx_frame, 0, 0 );
   80614:	d8000015 	stw	zero,0(sp)
   80618:	01000434 	movhi	r4,16
   8061c:	21001004 	addi	r4,r4,64
   80620:	01400434 	movhi	r5,16
   80624:	29401804 	addi	r5,r5,96
   80628:	01800274 	movhi	r6,9
   8062c:	31a58a04 	addi	r6,r6,-27096
   80630:	000f883a 	mov	r7,zero
   80634:	00818c40 	call	818c4 <alt_avalon_sgdma_construct_stream_to_mem_desc>

	// Set up non-blocking transfer of sgdma receive descriptor
	alt_avalon_sgdma_do_async_transfer( sgdma_rx_dev, &rx_descriptor );
   80638:	d0a6c817 	ldw	r2,-25824(gp)
   8063c:	1009883a 	mov	r4,r2
   80640:	01400434 	movhi	r5,16
   80644:	29401004 	addi	r5,r5,64
   80648:	00815a00 	call	815a0 <alt_avalon_sgdma_do_async_transfer>
}
   8064c:	e037883a 	mov	sp,fp
   80650:	dfc00117 	ldw	ra,4(sp)
   80654:	df000017 	ldw	fp,0(sp)
   80658:	dec00204 	addi	sp,sp,8
   8065c:	f800283a 	ret

00080660 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   80660:	defffc04 	addi	sp,sp,-16
   80664:	df000315 	stw	fp,12(sp)
   80668:	df000304 	addi	fp,sp,12
   8066c:	e13ffd15 	stw	r4,-12(fp)
   80670:	e17ffe15 	stw	r5,-8(fp)
   80674:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   80678:	e0fffe17 	ldw	r3,-8(fp)
   8067c:	e0bffd17 	ldw	r2,-12(fp)
   80680:	18800c26 	beq	r3,r2,806b4 <alt_load_section+0x54>
  {
    while( to != end )
   80684:	00000806 	br	806a8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   80688:	e0bffe17 	ldw	r2,-8(fp)
   8068c:	10c00104 	addi	r3,r2,4
   80690:	e0fffe15 	stw	r3,-8(fp)
   80694:	e0fffd17 	ldw	r3,-12(fp)
   80698:	19000104 	addi	r4,r3,4
   8069c:	e13ffd15 	stw	r4,-12(fp)
   806a0:	18c00017 	ldw	r3,0(r3)
   806a4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   806a8:	e0fffe17 	ldw	r3,-8(fp)
   806ac:	e0bfff17 	ldw	r2,-4(fp)
   806b0:	18bff51e 	bne	r3,r2,80688 <rx_descriptor_end+0xfff80628>
    {
      *to++ = *from++;
    }
  }
}
   806b4:	e037883a 	mov	sp,fp
   806b8:	df000017 	ldw	fp,0(sp)
   806bc:	dec00104 	addi	sp,sp,4
   806c0:	f800283a 	ret

000806c4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   806c4:	defffe04 	addi	sp,sp,-8
   806c8:	dfc00115 	stw	ra,4(sp)
   806cc:	df000015 	stw	fp,0(sp)
   806d0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   806d4:	01000234 	movhi	r4,8
   806d8:	211ec604 	addi	r4,r4,31512
   806dc:	01400234 	movhi	r5,8
   806e0:	29581104 	addi	r5,r5,24644
   806e4:	01800234 	movhi	r6,8
   806e8:	319ec604 	addi	r6,r6,31512
   806ec:	00806600 	call	80660 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   806f0:	01000234 	movhi	r4,8
   806f4:	21000804 	addi	r4,r4,32
   806f8:	01400234 	movhi	r5,8
   806fc:	29400804 	addi	r5,r5,32
   80700:	01800234 	movhi	r6,8
   80704:	31809004 	addi	r6,r6,576
   80708:	00806600 	call	80660 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   8070c:	01000234 	movhi	r4,8
   80710:	2117b204 	addi	r4,r4,24264
   80714:	01400234 	movhi	r5,8
   80718:	2957b204 	addi	r5,r5,24264
   8071c:	01800234 	movhi	r6,8
   80720:	31981104 	addi	r6,r6,24644
   80724:	00806600 	call	80660 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   80728:	00825940 	call	82594 <alt_dcache_flush_all>
  alt_icache_flush_all();
   8072c:	00828400 	call	82840 <alt_icache_flush_all>
}
   80730:	e037883a 	mov	sp,fp
   80734:	dfc00117 	ldw	ra,4(sp)
   80738:	df000017 	ldw	fp,0(sp)
   8073c:	dec00204 	addi	sp,sp,8
   80740:	f800283a 	ret

00080744 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   80744:	defffd04 	addi	sp,sp,-12
   80748:	dfc00215 	stw	ra,8(sp)
   8074c:	df000115 	stw	fp,4(sp)
   80750:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   80754:	0009883a 	mov	r4,zero
   80758:	0080a600 	call	80a60 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   8075c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   80760:	0080a940 	call	80a94 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   80764:	01000234 	movhi	r4,8
   80768:	2117fd04 	addi	r4,r4,24564
   8076c:	01400234 	movhi	r5,8
   80770:	2957fd04 	addi	r5,r5,24564
   80774:	01800234 	movhi	r6,8
   80778:	3197fd04 	addi	r6,r6,24564
   8077c:	0082c000 	call	82c00 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   80780:	00826f80 	call	826f8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   80784:	01000234 	movhi	r4,8
   80788:	2109d504 	addi	r4,r4,10068
   8078c:	00833f80 	call	833f8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   80790:	d126c917 	ldw	r4,-25820(gp)
   80794:	d0e6ca17 	ldw	r3,-25816(gp)
   80798:	d0a6cb17 	ldw	r2,-25812(gp)
   8079c:	180b883a 	mov	r5,r3
   807a0:	100d883a 	mov	r6,r2
   807a4:	008028c0 	call	8028c <main>
   807a8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   807ac:	01000044 	movi	r4,1
   807b0:	00824500 	call	82450 <close>
  exit (result);
   807b4:	e13fff17 	ldw	r4,-4(fp)
   807b8:	008340c0 	call	8340c <exit>

000807bc <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   807bc:	defff204 	addi	sp,sp,-56
   807c0:	dfc00a15 	stw	ra,40(sp)
   807c4:	df000915 	stw	fp,36(sp)
   807c8:	df000904 	addi	fp,sp,36
   807cc:	e1400215 	stw	r5,8(fp)
   807d0:	e1800315 	stw	r6,12(fp)
   807d4:	e1c00415 	stw	r7,16(fp)
   807d8:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
   807dc:	e0800204 	addi	r2,fp,8
   807e0:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   807e4:	e0bfff17 	ldw	r2,-4(fp)
   807e8:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   807ec:	00007106 	br	809b4 <alt_printf+0x1f8>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   807f0:	e0bff807 	ldb	r2,-32(fp)
   807f4:	10800960 	cmpeqi	r2,r2,37
   807f8:	1000041e 	bne	r2,zero,8080c <alt_printf+0x50>
        {
            alt_putchar(c);
   807fc:	e0bff807 	ldb	r2,-32(fp)
   80800:	1009883a 	mov	r4,r2
   80804:	00809e40 	call	809e4 <alt_putchar>
   80808:	00006a06 	br	809b4 <alt_printf+0x1f8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   8080c:	e0bff717 	ldw	r2,-36(fp)
   80810:	10c00044 	addi	r3,r2,1
   80814:	e0fff715 	stw	r3,-36(fp)
   80818:	10800003 	ldbu	r2,0(r2)
   8081c:	e0bff805 	stb	r2,-32(fp)
   80820:	e0bff807 	ldb	r2,-32(fp)
   80824:	10006226 	beq	r2,zero,809b0 <alt_printf+0x1f4>
            {
                if (c == '%')
   80828:	e0bff807 	ldb	r2,-32(fp)
   8082c:	10800958 	cmpnei	r2,r2,37
   80830:	1000041e 	bne	r2,zero,80844 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   80834:	e0bff807 	ldb	r2,-32(fp)
   80838:	1009883a 	mov	r4,r2
   8083c:	00809e40 	call	809e4 <alt_putchar>
   80840:	00005c06 	br	809b4 <alt_printf+0x1f8>
                } 
                else if (c == 'c')
   80844:	e0bff807 	ldb	r2,-32(fp)
   80848:	108018d8 	cmpnei	r2,r2,99
   8084c:	1000081e 	bne	r2,zero,80870 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   80850:	e0bffe17 	ldw	r2,-8(fp)
   80854:	10c00104 	addi	r3,r2,4
   80858:	e0fffe15 	stw	r3,-8(fp)
   8085c:	10800017 	ldw	r2,0(r2)
   80860:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   80864:	e13ffd17 	ldw	r4,-12(fp)
   80868:	00809e40 	call	809e4 <alt_putchar>
   8086c:	00005106 	br	809b4 <alt_printf+0x1f8>
                }
                else if (c == 'x')
   80870:	e0bff807 	ldb	r2,-32(fp)
   80874:	10801e18 	cmpnei	r2,r2,120
   80878:	1000341e 	bne	r2,zero,8094c <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   8087c:	e0bffe17 	ldw	r2,-8(fp)
   80880:	10c00104 	addi	r3,r2,4
   80884:	e0fffe15 	stw	r3,-8(fp)
   80888:	10800017 	ldw	r2,0(r2)
   8088c:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   80890:	e0bffb17 	ldw	r2,-20(fp)
   80894:	1000031e 	bne	r2,zero,808a4 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   80898:	01000c04 	movi	r4,48
   8089c:	00809e40 	call	809e4 <alt_putchar>
                        continue;
   808a0:	00004406 	br	809b4 <alt_printf+0x1f8>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   808a4:	00800704 	movi	r2,28
   808a8:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   808ac:	00000306 	br	808bc <alt_printf+0x100>
                        digit_shift -= 4;
   808b0:	e0bff917 	ldw	r2,-28(fp)
   808b4:	10bfff04 	addi	r2,r2,-4
   808b8:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   808bc:	00c003c4 	movi	r3,15
   808c0:	e0bff917 	ldw	r2,-28(fp)
   808c4:	1884983a 	sll	r2,r3,r2
   808c8:	1007883a 	mov	r3,r2
   808cc:	e0bffb17 	ldw	r2,-20(fp)
   808d0:	1884703a 	and	r2,r3,r2
   808d4:	103ff626 	beq	r2,zero,808b0 <rx_descriptor_end+0xfff80850>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   808d8:	00001906 	br	80940 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   808dc:	00c003c4 	movi	r3,15
   808e0:	e0bff917 	ldw	r2,-28(fp)
   808e4:	1884983a 	sll	r2,r3,r2
   808e8:	1007883a 	mov	r3,r2
   808ec:	e0bffb17 	ldw	r2,-20(fp)
   808f0:	1886703a 	and	r3,r3,r2
   808f4:	e0bff917 	ldw	r2,-28(fp)
   808f8:	1884d83a 	srl	r2,r3,r2
   808fc:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   80900:	e0bffc17 	ldw	r2,-16(fp)
   80904:	108002a8 	cmpgeui	r2,r2,10
   80908:	1000041e 	bne	r2,zero,8091c <alt_printf+0x160>
                            c = '0' + digit;
   8090c:	e0bffc17 	ldw	r2,-16(fp)
   80910:	10800c04 	addi	r2,r2,48
   80914:	e0bff805 	stb	r2,-32(fp)
   80918:	00000306 	br	80928 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   8091c:	e0bffc17 	ldw	r2,-16(fp)
   80920:	108015c4 	addi	r2,r2,87
   80924:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   80928:	e0bff807 	ldb	r2,-32(fp)
   8092c:	1009883a 	mov	r4,r2
   80930:	00809e40 	call	809e4 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   80934:	e0bff917 	ldw	r2,-28(fp)
   80938:	10bfff04 	addi	r2,r2,-4
   8093c:	e0bff915 	stw	r2,-28(fp)
   80940:	e0bff917 	ldw	r2,-28(fp)
   80944:	103fe50e 	bge	r2,zero,808dc <rx_descriptor_end+0xfff8087c>
   80948:	00001a06 	br	809b4 <alt_printf+0x1f8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   8094c:	e0bff807 	ldb	r2,-32(fp)
   80950:	10801cd8 	cmpnei	r2,r2,115
   80954:	1000151e 	bne	r2,zero,809ac <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   80958:	e0bffe17 	ldw	r2,-8(fp)
   8095c:	10c00104 	addi	r3,r2,4
   80960:	e0fffe15 	stw	r3,-8(fp)
   80964:	10800017 	ldw	r2,0(r2)
   80968:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   8096c:	00000906 	br	80994 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   80970:	e0bffa17 	ldw	r2,-24(fp)
   80974:	10c00044 	addi	r3,r2,1
   80978:	e0fffa15 	stw	r3,-24(fp)
   8097c:	10800003 	ldbu	r2,0(r2)
   80980:	10803fcc 	andi	r2,r2,255
   80984:	1080201c 	xori	r2,r2,128
   80988:	10bfe004 	addi	r2,r2,-128
   8098c:	1009883a 	mov	r4,r2
   80990:	00809e40 	call	809e4 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   80994:	e0bffa17 	ldw	r2,-24(fp)
   80998:	10800003 	ldbu	r2,0(r2)
   8099c:	10803fcc 	andi	r2,r2,255
   809a0:	1080201c 	xori	r2,r2,128
   809a4:	10bfe004 	addi	r2,r2,-128
   809a8:	103ff11e 	bne	r2,zero,80970 <rx_descriptor_end+0xfff80910>
   809ac:	00000106 	br	809b4 <alt_printf+0x1f8>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   809b0:	00000706 	br	809d0 <alt_printf+0x214>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   809b4:	e0bff717 	ldw	r2,-36(fp)
   809b8:	10c00044 	addi	r3,r2,1
   809bc:	e0fff715 	stw	r3,-36(fp)
   809c0:	10800003 	ldbu	r2,0(r2)
   809c4:	e0bff805 	stb	r2,-32(fp)
   809c8:	e0bff807 	ldb	r2,-32(fp)
   809cc:	103f881e 	bne	r2,zero,807f0 <rx_descriptor_end+0xfff80790>
            {
                break;
            }
        }
    }
}
   809d0:	e037883a 	mov	sp,fp
   809d4:	dfc00117 	ldw	ra,4(sp)
   809d8:	df000017 	ldw	fp,0(sp)
   809dc:	dec00504 	addi	sp,sp,20
   809e0:	f800283a 	ret

000809e4 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   809e4:	defffd04 	addi	sp,sp,-12
   809e8:	dfc00215 	stw	ra,8(sp)
   809ec:	df000115 	stw	fp,4(sp)
   809f0:	df000104 	addi	fp,sp,4
   809f4:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   809f8:	00800234 	movhi	r2,8
   809fc:	109ec204 	addi	r2,r2,31496
   80a00:	10800017 	ldw	r2,0(r2)
   80a04:	10800217 	ldw	r2,8(r2)
   80a08:	e13fff17 	ldw	r4,-4(fp)
   80a0c:	100b883a 	mov	r5,r2
   80a10:	00836980 	call	83698 <putc>
#endif
}
   80a14:	e037883a 	mov	sp,fp
   80a18:	dfc00117 	ldw	ra,4(sp)
   80a1c:	df000017 	ldw	fp,0(sp)
   80a20:	dec00204 	addi	sp,sp,8
   80a24:	f800283a 	ret

00080a28 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   80a28:	defffd04 	addi	sp,sp,-12
   80a2c:	dfc00215 	stw	ra,8(sp)
   80a30:	df000115 	stw	fp,4(sp)
   80a34:	df000104 	addi	fp,sp,4
   80a38:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   80a3c:	e13fff17 	ldw	r4,-4(fp)
   80a40:	01400234 	movhi	r5,8
   80a44:	295eba04 	addi	r5,r5,31464
   80a48:	00826540 	call	82654 <alt_dev_llist_insert>
}
   80a4c:	e037883a 	mov	sp,fp
   80a50:	dfc00117 	ldw	ra,4(sp)
   80a54:	df000017 	ldw	fp,0(sp)
   80a58:	dec00204 	addi	sp,sp,8
   80a5c:	f800283a 	ret

00080a60 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   80a60:	defffd04 	addi	sp,sp,-12
   80a64:	dfc00215 	stw	ra,8(sp)
   80a68:	df000115 	stw	fp,4(sp)
   80a6c:	df000104 	addi	fp,sp,4
   80a70:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2, nios2);
   80a74:	00830e80 	call	830e8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   80a78:	00800044 	movi	r2,1
   80a7c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   80a80:	e037883a 	mov	sp,fp
   80a84:	dfc00117 	ldw	ra,4(sp)
   80a88:	df000017 	ldw	fp,0(sp)
   80a8c:	dec00204 	addi	sp,sp,8
   80a90:	f800283a 	ret

00080a94 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   80a94:	defffe04 	addi	sp,sp,-8
   80a98:	dfc00115 	stw	ra,4(sp)
   80a9c:	df000015 	stw	fp,0(sp)
   80aa0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   80aa4:	01000234 	movhi	r4,8
   80aa8:	21181b04 	addi	r4,r4,24684
   80aac:	000b883a 	mov	r5,zero
   80ab0:	000d883a 	mov	r6,zero
   80ab4:	0080c680 	call	80c68 <altera_avalon_jtag_uart_init>
   80ab8:	01000234 	movhi	r4,8
   80abc:	21181104 	addi	r4,r4,24644
   80ac0:	0080a280 	call	80a28 <alt_dev_reg>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX, sgdma_rx);
   80ac4:	01000234 	movhi	r4,8
   80ac8:	211c2904 	addi	r4,r4,28836
   80acc:	000b883a 	mov	r5,zero
   80ad0:	01800044 	movi	r6,1
   80ad4:	008221c0 	call	8221c <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TX, sgdma_tx);
   80ad8:	01000234 	movhi	r4,8
   80adc:	211c3504 	addi	r4,r4,28884
   80ae0:	000b883a 	mov	r5,zero
   80ae4:	01800084 	movi	r6,2
   80ae8:	008221c0 	call	8221c <alt_avalon_sgdma_init>
    ALTERA_ETH_TSE_INIT ( TSE, tse);
   80aec:	0001883a 	nop
}
   80af0:	e037883a 	mov	sp,fp
   80af4:	dfc00117 	ldw	ra,4(sp)
   80af8:	df000017 	ldw	fp,0(sp)
   80afc:	dec00204 	addi	sp,sp,8
   80b00:	f800283a 	ret

00080b04 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   80b04:	defffa04 	addi	sp,sp,-24
   80b08:	dfc00515 	stw	ra,20(sp)
   80b0c:	df000415 	stw	fp,16(sp)
   80b10:	df000404 	addi	fp,sp,16
   80b14:	e13ffd15 	stw	r4,-12(fp)
   80b18:	e17ffe15 	stw	r5,-8(fp)
   80b1c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   80b20:	e0bffd17 	ldw	r2,-12(fp)
   80b24:	10800017 	ldw	r2,0(r2)
   80b28:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   80b2c:	e0bffc17 	ldw	r2,-16(fp)
   80b30:	10c00a04 	addi	r3,r2,40
   80b34:	e0bffd17 	ldw	r2,-12(fp)
   80b38:	10800217 	ldw	r2,8(r2)
   80b3c:	1809883a 	mov	r4,r3
   80b40:	e17ffe17 	ldw	r5,-8(fp)
   80b44:	e1bfff17 	ldw	r6,-4(fp)
   80b48:	100f883a 	mov	r7,r2
   80b4c:	008112c0 	call	8112c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   80b50:	e037883a 	mov	sp,fp
   80b54:	dfc00117 	ldw	ra,4(sp)
   80b58:	df000017 	ldw	fp,0(sp)
   80b5c:	dec00204 	addi	sp,sp,8
   80b60:	f800283a 	ret

00080b64 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   80b64:	defffa04 	addi	sp,sp,-24
   80b68:	dfc00515 	stw	ra,20(sp)
   80b6c:	df000415 	stw	fp,16(sp)
   80b70:	df000404 	addi	fp,sp,16
   80b74:	e13ffd15 	stw	r4,-12(fp)
   80b78:	e17ffe15 	stw	r5,-8(fp)
   80b7c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   80b80:	e0bffd17 	ldw	r2,-12(fp)
   80b84:	10800017 	ldw	r2,0(r2)
   80b88:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   80b8c:	e0bffc17 	ldw	r2,-16(fp)
   80b90:	10c00a04 	addi	r3,r2,40
   80b94:	e0bffd17 	ldw	r2,-12(fp)
   80b98:	10800217 	ldw	r2,8(r2)
   80b9c:	1809883a 	mov	r4,r3
   80ba0:	e17ffe17 	ldw	r5,-8(fp)
   80ba4:	e1bfff17 	ldw	r6,-4(fp)
   80ba8:	100f883a 	mov	r7,r2
   80bac:	00813380 	call	81338 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   80bb0:	e037883a 	mov	sp,fp
   80bb4:	dfc00117 	ldw	ra,4(sp)
   80bb8:	df000017 	ldw	fp,0(sp)
   80bbc:	dec00204 	addi	sp,sp,8
   80bc0:	f800283a 	ret

00080bc4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   80bc4:	defffc04 	addi	sp,sp,-16
   80bc8:	dfc00315 	stw	ra,12(sp)
   80bcc:	df000215 	stw	fp,8(sp)
   80bd0:	df000204 	addi	fp,sp,8
   80bd4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   80bd8:	e0bfff17 	ldw	r2,-4(fp)
   80bdc:	10800017 	ldw	r2,0(r2)
   80be0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   80be4:	e0bffe17 	ldw	r2,-8(fp)
   80be8:	10c00a04 	addi	r3,r2,40
   80bec:	e0bfff17 	ldw	r2,-4(fp)
   80bf0:	10800217 	ldw	r2,8(r2)
   80bf4:	1809883a 	mov	r4,r3
   80bf8:	100b883a 	mov	r5,r2
   80bfc:	0080fd80 	call	80fd8 <altera_avalon_jtag_uart_close>
}
   80c00:	e037883a 	mov	sp,fp
   80c04:	dfc00117 	ldw	ra,4(sp)
   80c08:	df000017 	ldw	fp,0(sp)
   80c0c:	dec00204 	addi	sp,sp,8
   80c10:	f800283a 	ret

00080c14 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   80c14:	defffa04 	addi	sp,sp,-24
   80c18:	dfc00515 	stw	ra,20(sp)
   80c1c:	df000415 	stw	fp,16(sp)
   80c20:	df000404 	addi	fp,sp,16
   80c24:	e13ffd15 	stw	r4,-12(fp)
   80c28:	e17ffe15 	stw	r5,-8(fp)
   80c2c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   80c30:	e0bffd17 	ldw	r2,-12(fp)
   80c34:	10800017 	ldw	r2,0(r2)
   80c38:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   80c3c:	e0bffc17 	ldw	r2,-16(fp)
   80c40:	10800a04 	addi	r2,r2,40
   80c44:	1009883a 	mov	r4,r2
   80c48:	e17ffe17 	ldw	r5,-8(fp)
   80c4c:	e1bfff17 	ldw	r6,-4(fp)
   80c50:	00810400 	call	81040 <altera_avalon_jtag_uart_ioctl>
}
   80c54:	e037883a 	mov	sp,fp
   80c58:	dfc00117 	ldw	ra,4(sp)
   80c5c:	df000017 	ldw	fp,0(sp)
   80c60:	dec00204 	addi	sp,sp,8
   80c64:	f800283a 	ret

00080c68 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   80c68:	defffa04 	addi	sp,sp,-24
   80c6c:	dfc00515 	stw	ra,20(sp)
   80c70:	df000415 	stw	fp,16(sp)
   80c74:	df000404 	addi	fp,sp,16
   80c78:	e13ffd15 	stw	r4,-12(fp)
   80c7c:	e17ffe15 	stw	r5,-8(fp)
   80c80:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   80c84:	e0bffd17 	ldw	r2,-12(fp)
   80c88:	00c00044 	movi	r3,1
   80c8c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   80c90:	e0bffd17 	ldw	r2,-12(fp)
   80c94:	10800017 	ldw	r2,0(r2)
   80c98:	10800104 	addi	r2,r2,4
   80c9c:	1007883a 	mov	r3,r2
   80ca0:	e0bffd17 	ldw	r2,-12(fp)
   80ca4:	10800817 	ldw	r2,32(r2)
   80ca8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   80cac:	e0fffe17 	ldw	r3,-8(fp)
   80cb0:	e0bfff17 	ldw	r2,-4(fp)
   80cb4:	d8000015 	stw	zero,0(sp)
   80cb8:	1809883a 	mov	r4,r3
   80cbc:	100b883a 	mov	r5,r2
   80cc0:	01800234 	movhi	r6,8
   80cc4:	31834b04 	addi	r6,r6,3372
   80cc8:	e1fffd17 	ldw	r7,-12(fp)
   80ccc:	00828700 	call	82870 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   80cd0:	e0bffd17 	ldw	r2,-12(fp)
   80cd4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   80cd8:	e0bffd17 	ldw	r2,-12(fp)
   80cdc:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   80ce0:	00800274 	movhi	r2,9
   80ce4:	10a58304 	addi	r2,r2,-27124
   80ce8:	10800017 	ldw	r2,0(r2)
   80cec:	1809883a 	mov	r4,r3
   80cf0:	100b883a 	mov	r5,r2
   80cf4:	01800234 	movhi	r6,8
   80cf8:	3183cc04 	addi	r6,r6,3888
   80cfc:	e1fffd17 	ldw	r7,-12(fp)
   80d00:	00822c00 	call	822c0 <alt_alarm_start>
   80d04:	1000040e 	bge	r2,zero,80d18 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   80d08:	e0fffd17 	ldw	r3,-12(fp)
   80d0c:	00a00034 	movhi	r2,32768
   80d10:	10bfffc4 	addi	r2,r2,-1
   80d14:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   80d18:	e037883a 	mov	sp,fp
   80d1c:	dfc00117 	ldw	ra,4(sp)
   80d20:	df000017 	ldw	fp,0(sp)
   80d24:	dec00204 	addi	sp,sp,8
   80d28:	f800283a 	ret

00080d2c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   80d2c:	defff804 	addi	sp,sp,-32
   80d30:	df000715 	stw	fp,28(sp)
   80d34:	df000704 	addi	fp,sp,28
   80d38:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   80d3c:	e0bfff17 	ldw	r2,-4(fp)
   80d40:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   80d44:	e0bffb17 	ldw	r2,-20(fp)
   80d48:	10800017 	ldw	r2,0(r2)
   80d4c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   80d50:	e0bffc17 	ldw	r2,-16(fp)
   80d54:	10800104 	addi	r2,r2,4
   80d58:	10800037 	ldwio	r2,0(r2)
   80d5c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   80d60:	e0bffd17 	ldw	r2,-12(fp)
   80d64:	1080c00c 	andi	r2,r2,768
   80d68:	1000011e 	bne	r2,zero,80d70 <altera_avalon_jtag_uart_irq+0x44>
      break;
   80d6c:	00006c06 	br	80f20 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   80d70:	e0bffd17 	ldw	r2,-12(fp)
   80d74:	1080400c 	andi	r2,r2,256
   80d78:	10003426 	beq	r2,zero,80e4c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   80d7c:	00800074 	movhi	r2,1
   80d80:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80d84:	e0bffb17 	ldw	r2,-20(fp)
   80d88:	10800a17 	ldw	r2,40(r2)
   80d8c:	10800044 	addi	r2,r2,1
   80d90:	1081ffcc 	andi	r2,r2,2047
   80d94:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   80d98:	e0bffb17 	ldw	r2,-20(fp)
   80d9c:	10c00b17 	ldw	r3,44(r2)
   80da0:	e0bffe17 	ldw	r2,-8(fp)
   80da4:	1880011e 	bne	r3,r2,80dac <altera_avalon_jtag_uart_irq+0x80>
          break;
   80da8:	00001606 	br	80e04 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   80dac:	e0bffc17 	ldw	r2,-16(fp)
   80db0:	10800037 	ldwio	r2,0(r2)
   80db4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   80db8:	e0bff917 	ldw	r2,-28(fp)
   80dbc:	10a0000c 	andi	r2,r2,32768
   80dc0:	1000011e 	bne	r2,zero,80dc8 <altera_avalon_jtag_uart_irq+0x9c>
          break;
   80dc4:	00000f06 	br	80e04 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   80dc8:	e0bffb17 	ldw	r2,-20(fp)
   80dcc:	10800a17 	ldw	r2,40(r2)
   80dd0:	e0fff917 	ldw	r3,-28(fp)
   80dd4:	1809883a 	mov	r4,r3
   80dd8:	e0fffb17 	ldw	r3,-20(fp)
   80ddc:	1885883a 	add	r2,r3,r2
   80de0:	10800e04 	addi	r2,r2,56
   80de4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80de8:	e0bffb17 	ldw	r2,-20(fp)
   80dec:	10800a17 	ldw	r2,40(r2)
   80df0:	10800044 	addi	r2,r2,1
   80df4:	10c1ffcc 	andi	r3,r2,2047
   80df8:	e0bffb17 	ldw	r2,-20(fp)
   80dfc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   80e00:	003fe006 	br	80d84 <rx_descriptor_end+0xfff80d24>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   80e04:	e0bff917 	ldw	r2,-28(fp)
   80e08:	10bfffec 	andhi	r2,r2,65535
   80e0c:	10000f26 	beq	r2,zero,80e4c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   80e10:	e0bffb17 	ldw	r2,-20(fp)
   80e14:	10c00817 	ldw	r3,32(r2)
   80e18:	00bfff84 	movi	r2,-2
   80e1c:	1886703a 	and	r3,r3,r2
   80e20:	e0bffb17 	ldw	r2,-20(fp)
   80e24:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   80e28:	e0bffc17 	ldw	r2,-16(fp)
   80e2c:	10800104 	addi	r2,r2,4
   80e30:	1007883a 	mov	r3,r2
   80e34:	e0bffb17 	ldw	r2,-20(fp)
   80e38:	10800817 	ldw	r2,32(r2)
   80e3c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   80e40:	e0bffc17 	ldw	r2,-16(fp)
   80e44:	10800104 	addi	r2,r2,4
   80e48:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   80e4c:	e0bffd17 	ldw	r2,-12(fp)
   80e50:	1080800c 	andi	r2,r2,512
   80e54:	10003126 	beq	r2,zero,80f1c <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   80e58:	e0bffd17 	ldw	r2,-12(fp)
   80e5c:	1004d43a 	srli	r2,r2,16
   80e60:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   80e64:	00001406 	br	80eb8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   80e68:	e0bffc17 	ldw	r2,-16(fp)
   80e6c:	e0fffb17 	ldw	r3,-20(fp)
   80e70:	18c00d17 	ldw	r3,52(r3)
   80e74:	e13ffb17 	ldw	r4,-20(fp)
   80e78:	20c7883a 	add	r3,r4,r3
   80e7c:	18c20e04 	addi	r3,r3,2104
   80e80:	18c00003 	ldbu	r3,0(r3)
   80e84:	18c03fcc 	andi	r3,r3,255
   80e88:	18c0201c 	xori	r3,r3,128
   80e8c:	18ffe004 	addi	r3,r3,-128
   80e90:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   80e94:	e0bffb17 	ldw	r2,-20(fp)
   80e98:	10800d17 	ldw	r2,52(r2)
   80e9c:	10800044 	addi	r2,r2,1
   80ea0:	10c1ffcc 	andi	r3,r2,2047
   80ea4:	e0bffb17 	ldw	r2,-20(fp)
   80ea8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   80eac:	e0bffa17 	ldw	r2,-24(fp)
   80eb0:	10bfffc4 	addi	r2,r2,-1
   80eb4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   80eb8:	e0bffa17 	ldw	r2,-24(fp)
   80ebc:	10000526 	beq	r2,zero,80ed4 <altera_avalon_jtag_uart_irq+0x1a8>
   80ec0:	e0bffb17 	ldw	r2,-20(fp)
   80ec4:	10c00d17 	ldw	r3,52(r2)
   80ec8:	e0bffb17 	ldw	r2,-20(fp)
   80ecc:	10800c17 	ldw	r2,48(r2)
   80ed0:	18bfe51e 	bne	r3,r2,80e68 <rx_descriptor_end+0xfff80e08>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   80ed4:	e0bffa17 	ldw	r2,-24(fp)
   80ed8:	10001026 	beq	r2,zero,80f1c <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   80edc:	e0bffb17 	ldw	r2,-20(fp)
   80ee0:	10c00817 	ldw	r3,32(r2)
   80ee4:	00bfff44 	movi	r2,-3
   80ee8:	1886703a 	and	r3,r3,r2
   80eec:	e0bffb17 	ldw	r2,-20(fp)
   80ef0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   80ef4:	e0bffb17 	ldw	r2,-20(fp)
   80ef8:	10800017 	ldw	r2,0(r2)
   80efc:	10800104 	addi	r2,r2,4
   80f00:	1007883a 	mov	r3,r2
   80f04:	e0bffb17 	ldw	r2,-20(fp)
   80f08:	10800817 	ldw	r2,32(r2)
   80f0c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   80f10:	e0bffc17 	ldw	r2,-16(fp)
   80f14:	10800104 	addi	r2,r2,4
   80f18:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   80f1c:	003f8c06 	br	80d50 <rx_descriptor_end+0xfff80cf0>
}
   80f20:	e037883a 	mov	sp,fp
   80f24:	df000017 	ldw	fp,0(sp)
   80f28:	dec00104 	addi	sp,sp,4
   80f2c:	f800283a 	ret

00080f30 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   80f30:	defff804 	addi	sp,sp,-32
   80f34:	df000715 	stw	fp,28(sp)
   80f38:	df000704 	addi	fp,sp,28
   80f3c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   80f40:	e0bffb17 	ldw	r2,-20(fp)
   80f44:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   80f48:	e0bff917 	ldw	r2,-28(fp)
   80f4c:	10800017 	ldw	r2,0(r2)
   80f50:	10800104 	addi	r2,r2,4
   80f54:	10800037 	ldwio	r2,0(r2)
   80f58:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   80f5c:	e0bffa17 	ldw	r2,-24(fp)
   80f60:	1081000c 	andi	r2,r2,1024
   80f64:	10000b26 	beq	r2,zero,80f94 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   80f68:	e0bff917 	ldw	r2,-28(fp)
   80f6c:	10800017 	ldw	r2,0(r2)
   80f70:	10800104 	addi	r2,r2,4
   80f74:	1007883a 	mov	r3,r2
   80f78:	e0bff917 	ldw	r2,-28(fp)
   80f7c:	10800817 	ldw	r2,32(r2)
   80f80:	10810014 	ori	r2,r2,1024
   80f84:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   80f88:	e0bff917 	ldw	r2,-28(fp)
   80f8c:	10000915 	stw	zero,36(r2)
   80f90:	00000a06 	br	80fbc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   80f94:	e0bff917 	ldw	r2,-28(fp)
   80f98:	10c00917 	ldw	r3,36(r2)
   80f9c:	00a00034 	movhi	r2,32768
   80fa0:	10bfff04 	addi	r2,r2,-4
   80fa4:	10c00536 	bltu	r2,r3,80fbc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   80fa8:	e0bff917 	ldw	r2,-28(fp)
   80fac:	10800917 	ldw	r2,36(r2)
   80fb0:	10c00044 	addi	r3,r2,1
   80fb4:	e0bff917 	ldw	r2,-28(fp)
   80fb8:	10c00915 	stw	r3,36(r2)
   80fbc:	00800274 	movhi	r2,9
   80fc0:	10a58304 	addi	r2,r2,-27124
   80fc4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   80fc8:	e037883a 	mov	sp,fp
   80fcc:	df000017 	ldw	fp,0(sp)
   80fd0:	dec00104 	addi	sp,sp,4
   80fd4:	f800283a 	ret

00080fd8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   80fd8:	defffd04 	addi	sp,sp,-12
   80fdc:	df000215 	stw	fp,8(sp)
   80fe0:	df000204 	addi	fp,sp,8
   80fe4:	e13ffe15 	stw	r4,-8(fp)
   80fe8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   80fec:	00000506 	br	81004 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   80ff0:	e0bfff17 	ldw	r2,-4(fp)
   80ff4:	1090000c 	andi	r2,r2,16384
   80ff8:	10000226 	beq	r2,zero,81004 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   80ffc:	00bffd44 	movi	r2,-11
   81000:	00000b06 	br	81030 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   81004:	e0bffe17 	ldw	r2,-8(fp)
   81008:	10c00d17 	ldw	r3,52(r2)
   8100c:	e0bffe17 	ldw	r2,-8(fp)
   81010:	10800c17 	ldw	r2,48(r2)
   81014:	18800526 	beq	r3,r2,8102c <altera_avalon_jtag_uart_close+0x54>
   81018:	e0bffe17 	ldw	r2,-8(fp)
   8101c:	10c00917 	ldw	r3,36(r2)
   81020:	e0bffe17 	ldw	r2,-8(fp)
   81024:	10800117 	ldw	r2,4(r2)
   81028:	18bff136 	bltu	r3,r2,80ff0 <rx_descriptor_end+0xfff80f90>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   8102c:	0005883a 	mov	r2,zero
}
   81030:	e037883a 	mov	sp,fp
   81034:	df000017 	ldw	fp,0(sp)
   81038:	dec00104 	addi	sp,sp,4
   8103c:	f800283a 	ret

00081040 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   81040:	defffa04 	addi	sp,sp,-24
   81044:	df000515 	stw	fp,20(sp)
   81048:	df000504 	addi	fp,sp,20
   8104c:	e13ffd15 	stw	r4,-12(fp)
   81050:	e17ffe15 	stw	r5,-8(fp)
   81054:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   81058:	00bff9c4 	movi	r2,-25
   8105c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   81060:	e0bffe17 	ldw	r2,-8(fp)
   81064:	10da8060 	cmpeqi	r3,r2,27137
   81068:	1800031e 	bne	r3,zero,81078 <altera_avalon_jtag_uart_ioctl+0x38>
   8106c:	109a80a0 	cmpeqi	r2,r2,27138
   81070:	1000191e 	bne	r2,zero,810d8 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   81074:	00002806 	br	81118 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   81078:	e0bffd17 	ldw	r2,-12(fp)
   8107c:	10c00117 	ldw	r3,4(r2)
   81080:	00a00034 	movhi	r2,32768
   81084:	10bfffc4 	addi	r2,r2,-1
   81088:	18801226 	beq	r3,r2,810d4 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   8108c:	e0bfff17 	ldw	r2,-4(fp)
   81090:	10800017 	ldw	r2,0(r2)
   81094:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   81098:	e0bffc17 	ldw	r2,-16(fp)
   8109c:	10800090 	cmplti	r2,r2,2
   810a0:	1000061e 	bne	r2,zero,810bc <altera_avalon_jtag_uart_ioctl+0x7c>
   810a4:	e0fffc17 	ldw	r3,-16(fp)
   810a8:	00a00034 	movhi	r2,32768
   810ac:	10bfffc4 	addi	r2,r2,-1
   810b0:	18800226 	beq	r3,r2,810bc <altera_avalon_jtag_uart_ioctl+0x7c>
   810b4:	e0bffc17 	ldw	r2,-16(fp)
   810b8:	00000206 	br	810c4 <altera_avalon_jtag_uart_ioctl+0x84>
   810bc:	00a00034 	movhi	r2,32768
   810c0:	10bfff84 	addi	r2,r2,-2
   810c4:	e0fffd17 	ldw	r3,-12(fp)
   810c8:	18800115 	stw	r2,4(r3)
      rc = 0;
   810cc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   810d0:	00001106 	br	81118 <altera_avalon_jtag_uart_ioctl+0xd8>
   810d4:	00001006 	br	81118 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   810d8:	e0bffd17 	ldw	r2,-12(fp)
   810dc:	10c00117 	ldw	r3,4(r2)
   810e0:	00a00034 	movhi	r2,32768
   810e4:	10bfffc4 	addi	r2,r2,-1
   810e8:	18800a26 	beq	r3,r2,81114 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   810ec:	e0bffd17 	ldw	r2,-12(fp)
   810f0:	10c00917 	ldw	r3,36(r2)
   810f4:	e0bffd17 	ldw	r2,-12(fp)
   810f8:	10800117 	ldw	r2,4(r2)
   810fc:	1885803a 	cmpltu	r2,r3,r2
   81100:	10c03fcc 	andi	r3,r2,255
   81104:	e0bfff17 	ldw	r2,-4(fp)
   81108:	10c00015 	stw	r3,0(r2)
      rc = 0;
   8110c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   81110:	00000006 	br	81114 <altera_avalon_jtag_uart_ioctl+0xd4>
   81114:	0001883a 	nop

  default:
    break;
  }

  return rc;
   81118:	e0bffb17 	ldw	r2,-20(fp)
}
   8111c:	e037883a 	mov	sp,fp
   81120:	df000017 	ldw	fp,0(sp)
   81124:	dec00104 	addi	sp,sp,4
   81128:	f800283a 	ret

0008112c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   8112c:	defff304 	addi	sp,sp,-52
   81130:	dfc00c15 	stw	ra,48(sp)
   81134:	df000b15 	stw	fp,44(sp)
   81138:	df000b04 	addi	fp,sp,44
   8113c:	e13ffc15 	stw	r4,-16(fp)
   81140:	e17ffd15 	stw	r5,-12(fp)
   81144:	e1bffe15 	stw	r6,-8(fp)
   81148:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   8114c:	e0bffd17 	ldw	r2,-12(fp)
   81150:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   81154:	00004906 	br	8127c <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   81158:	e0bffc17 	ldw	r2,-16(fp)
   8115c:	10800a17 	ldw	r2,40(r2)
   81160:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   81164:	e0bffc17 	ldw	r2,-16(fp)
   81168:	10800b17 	ldw	r2,44(r2)
   8116c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   81170:	e0fff717 	ldw	r3,-36(fp)
   81174:	e0bff817 	ldw	r2,-32(fp)
   81178:	18800536 	bltu	r3,r2,81190 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   8117c:	e0fff717 	ldw	r3,-36(fp)
   81180:	e0bff817 	ldw	r2,-32(fp)
   81184:	1885c83a 	sub	r2,r3,r2
   81188:	e0bff615 	stw	r2,-40(fp)
   8118c:	00000406 	br	811a0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   81190:	00c20004 	movi	r3,2048
   81194:	e0bff817 	ldw	r2,-32(fp)
   81198:	1885c83a 	sub	r2,r3,r2
   8119c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   811a0:	e0bff617 	ldw	r2,-40(fp)
   811a4:	1000011e 	bne	r2,zero,811ac <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   811a8:	00001d06 	br	81220 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   811ac:	e0fffe17 	ldw	r3,-8(fp)
   811b0:	e0bff617 	ldw	r2,-40(fp)
   811b4:	1880022e 	bgeu	r3,r2,811c0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   811b8:	e0bffe17 	ldw	r2,-8(fp)
   811bc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   811c0:	e0bff817 	ldw	r2,-32(fp)
   811c4:	10800e04 	addi	r2,r2,56
   811c8:	e0fffc17 	ldw	r3,-16(fp)
   811cc:	1885883a 	add	r2,r3,r2
   811d0:	e13ff517 	ldw	r4,-44(fp)
   811d4:	100b883a 	mov	r5,r2
   811d8:	e1bff617 	ldw	r6,-40(fp)
   811dc:	00834c00 	call	834c0 <memcpy>
      ptr   += n;
   811e0:	e0fff517 	ldw	r3,-44(fp)
   811e4:	e0bff617 	ldw	r2,-40(fp)
   811e8:	1885883a 	add	r2,r3,r2
   811ec:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   811f0:	e0fffe17 	ldw	r3,-8(fp)
   811f4:	e0bff617 	ldw	r2,-40(fp)
   811f8:	1885c83a 	sub	r2,r3,r2
   811fc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   81200:	e0fff817 	ldw	r3,-32(fp)
   81204:	e0bff617 	ldw	r2,-40(fp)
   81208:	1885883a 	add	r2,r3,r2
   8120c:	10c1ffcc 	andi	r3,r2,2047
   81210:	e0bffc17 	ldw	r2,-16(fp)
   81214:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   81218:	e0bffe17 	ldw	r2,-8(fp)
   8121c:	00bfce16 	blt	zero,r2,81158 <rx_descriptor_end+0xfff810f8>

    /* If we read any data then return it */
    if (ptr != buffer)
   81220:	e0fff517 	ldw	r3,-44(fp)
   81224:	e0bffd17 	ldw	r2,-12(fp)
   81228:	18800126 	beq	r3,r2,81230 <altera_avalon_jtag_uart_read+0x104>
      break;
   8122c:	00001506 	br	81284 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   81230:	e0bfff17 	ldw	r2,-4(fp)
   81234:	1090000c 	andi	r2,r2,16384
   81238:	10000126 	beq	r2,zero,81240 <altera_avalon_jtag_uart_read+0x114>
      break;
   8123c:	00001106 	br	81284 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   81240:	0001883a 	nop
   81244:	e0bffc17 	ldw	r2,-16(fp)
   81248:	10c00a17 	ldw	r3,40(r2)
   8124c:	e0bff717 	ldw	r2,-36(fp)
   81250:	1880051e 	bne	r3,r2,81268 <altera_avalon_jtag_uart_read+0x13c>
   81254:	e0bffc17 	ldw	r2,-16(fp)
   81258:	10c00917 	ldw	r3,36(r2)
   8125c:	e0bffc17 	ldw	r2,-16(fp)
   81260:	10800117 	ldw	r2,4(r2)
   81264:	18bff736 	bltu	r3,r2,81244 <rx_descriptor_end+0xfff811e4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   81268:	e0bffc17 	ldw	r2,-16(fp)
   8126c:	10c00a17 	ldw	r3,40(r2)
   81270:	e0bff717 	ldw	r2,-36(fp)
   81274:	1880011e 	bne	r3,r2,8127c <altera_avalon_jtag_uart_read+0x150>
      break;
   81278:	00000206 	br	81284 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8127c:	e0bffe17 	ldw	r2,-8(fp)
   81280:	00bfb516 	blt	zero,r2,81158 <rx_descriptor_end+0xfff810f8>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   81284:	e0fff517 	ldw	r3,-44(fp)
   81288:	e0bffd17 	ldw	r2,-12(fp)
   8128c:	18801826 	beq	r3,r2,812f0 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81290:	0005303a 	rdctl	r2,status
   81294:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81298:	e0fffa17 	ldw	r3,-24(fp)
   8129c:	00bfff84 	movi	r2,-2
   812a0:	1884703a 	and	r2,r3,r2
   812a4:	1001703a 	wrctl	status,r2
  
  return context;
   812a8:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   812ac:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   812b0:	e0bffc17 	ldw	r2,-16(fp)
   812b4:	10800817 	ldw	r2,32(r2)
   812b8:	10c00054 	ori	r3,r2,1
   812bc:	e0bffc17 	ldw	r2,-16(fp)
   812c0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   812c4:	e0bffc17 	ldw	r2,-16(fp)
   812c8:	10800017 	ldw	r2,0(r2)
   812cc:	10800104 	addi	r2,r2,4
   812d0:	1007883a 	mov	r3,r2
   812d4:	e0bffc17 	ldw	r2,-16(fp)
   812d8:	10800817 	ldw	r2,32(r2)
   812dc:	18800035 	stwio	r2,0(r3)
   812e0:	e0bff917 	ldw	r2,-28(fp)
   812e4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   812e8:	e0bffb17 	ldw	r2,-20(fp)
   812ec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   812f0:	e0fff517 	ldw	r3,-44(fp)
   812f4:	e0bffd17 	ldw	r2,-12(fp)
   812f8:	18800426 	beq	r3,r2,8130c <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   812fc:	e0fff517 	ldw	r3,-44(fp)
   81300:	e0bffd17 	ldw	r2,-12(fp)
   81304:	1885c83a 	sub	r2,r3,r2
   81308:	00000606 	br	81324 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   8130c:	e0bfff17 	ldw	r2,-4(fp)
   81310:	1090000c 	andi	r2,r2,16384
   81314:	10000226 	beq	r2,zero,81320 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   81318:	00bffd44 	movi	r2,-11
   8131c:	00000106 	br	81324 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   81320:	00bffec4 	movi	r2,-5
}
   81324:	e037883a 	mov	sp,fp
   81328:	dfc00117 	ldw	ra,4(sp)
   8132c:	df000017 	ldw	fp,0(sp)
   81330:	dec00204 	addi	sp,sp,8
   81334:	f800283a 	ret

00081338 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   81338:	defff304 	addi	sp,sp,-52
   8133c:	dfc00c15 	stw	ra,48(sp)
   81340:	df000b15 	stw	fp,44(sp)
   81344:	df000b04 	addi	fp,sp,44
   81348:	e13ffc15 	stw	r4,-16(fp)
   8134c:	e17ffd15 	stw	r5,-12(fp)
   81350:	e1bffe15 	stw	r6,-8(fp)
   81354:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   81358:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   8135c:	e0bffd17 	ldw	r2,-12(fp)
   81360:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   81364:	00003806 	br	81448 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   81368:	e0bffc17 	ldw	r2,-16(fp)
   8136c:	10800c17 	ldw	r2,48(r2)
   81370:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   81374:	e0bffc17 	ldw	r2,-16(fp)
   81378:	10800d17 	ldw	r2,52(r2)
   8137c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   81380:	e0fff817 	ldw	r3,-32(fp)
   81384:	e0bff517 	ldw	r2,-44(fp)
   81388:	1880062e 	bgeu	r3,r2,813a4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   8138c:	e0fff517 	ldw	r3,-44(fp)
   81390:	e0bff817 	ldw	r2,-32(fp)
   81394:	1885c83a 	sub	r2,r3,r2
   81398:	10bfffc4 	addi	r2,r2,-1
   8139c:	e0bff615 	stw	r2,-40(fp)
   813a0:	00000b06 	br	813d0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   813a4:	e0bff517 	ldw	r2,-44(fp)
   813a8:	10000526 	beq	r2,zero,813c0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   813ac:	00c20004 	movi	r3,2048
   813b0:	e0bff817 	ldw	r2,-32(fp)
   813b4:	1885c83a 	sub	r2,r3,r2
   813b8:	e0bff615 	stw	r2,-40(fp)
   813bc:	00000406 	br	813d0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   813c0:	00c1ffc4 	movi	r3,2047
   813c4:	e0bff817 	ldw	r2,-32(fp)
   813c8:	1885c83a 	sub	r2,r3,r2
   813cc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   813d0:	e0bff617 	ldw	r2,-40(fp)
   813d4:	1000011e 	bne	r2,zero,813dc <altera_avalon_jtag_uart_write+0xa4>
        break;
   813d8:	00001d06 	br	81450 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   813dc:	e0fffe17 	ldw	r3,-8(fp)
   813e0:	e0bff617 	ldw	r2,-40(fp)
   813e4:	1880022e 	bgeu	r3,r2,813f0 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   813e8:	e0bffe17 	ldw	r2,-8(fp)
   813ec:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   813f0:	e0bff817 	ldw	r2,-32(fp)
   813f4:	10820e04 	addi	r2,r2,2104
   813f8:	e0fffc17 	ldw	r3,-16(fp)
   813fc:	1885883a 	add	r2,r3,r2
   81400:	1009883a 	mov	r4,r2
   81404:	e17ffd17 	ldw	r5,-12(fp)
   81408:	e1bff617 	ldw	r6,-40(fp)
   8140c:	00834c00 	call	834c0 <memcpy>
      ptr   += n;
   81410:	e0fffd17 	ldw	r3,-12(fp)
   81414:	e0bff617 	ldw	r2,-40(fp)
   81418:	1885883a 	add	r2,r3,r2
   8141c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   81420:	e0fffe17 	ldw	r3,-8(fp)
   81424:	e0bff617 	ldw	r2,-40(fp)
   81428:	1885c83a 	sub	r2,r3,r2
   8142c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   81430:	e0fff817 	ldw	r3,-32(fp)
   81434:	e0bff617 	ldw	r2,-40(fp)
   81438:	1885883a 	add	r2,r3,r2
   8143c:	10c1ffcc 	andi	r3,r2,2047
   81440:	e0bffc17 	ldw	r2,-16(fp)
   81444:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   81448:	e0bffe17 	ldw	r2,-8(fp)
   8144c:	00bfc616 	blt	zero,r2,81368 <rx_descriptor_end+0xfff81308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   81450:	0005303a 	rdctl	r2,status
   81454:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   81458:	e0fffa17 	ldw	r3,-24(fp)
   8145c:	00bfff84 	movi	r2,-2
   81460:	1884703a 	and	r2,r3,r2
   81464:	1001703a 	wrctl	status,r2
  
  return context;
   81468:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   8146c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   81470:	e0bffc17 	ldw	r2,-16(fp)
   81474:	10800817 	ldw	r2,32(r2)
   81478:	10c00094 	ori	r3,r2,2
   8147c:	e0bffc17 	ldw	r2,-16(fp)
   81480:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   81484:	e0bffc17 	ldw	r2,-16(fp)
   81488:	10800017 	ldw	r2,0(r2)
   8148c:	10800104 	addi	r2,r2,4
   81490:	1007883a 	mov	r3,r2
   81494:	e0bffc17 	ldw	r2,-16(fp)
   81498:	10800817 	ldw	r2,32(r2)
   8149c:	18800035 	stwio	r2,0(r3)
   814a0:	e0bff917 	ldw	r2,-28(fp)
   814a4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   814a8:	e0bffb17 	ldw	r2,-20(fp)
   814ac:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   814b0:	e0bffe17 	ldw	r2,-8(fp)
   814b4:	0080120e 	bge	zero,r2,81500 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   814b8:	e0bfff17 	ldw	r2,-4(fp)
   814bc:	1090000c 	andi	r2,r2,16384
   814c0:	10000126 	beq	r2,zero,814c8 <altera_avalon_jtag_uart_write+0x190>
        break;
   814c4:	00001006 	br	81508 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   814c8:	0001883a 	nop
   814cc:	e0bffc17 	ldw	r2,-16(fp)
   814d0:	10c00d17 	ldw	r3,52(r2)
   814d4:	e0bff517 	ldw	r2,-44(fp)
   814d8:	1880051e 	bne	r3,r2,814f0 <altera_avalon_jtag_uart_write+0x1b8>
   814dc:	e0bffc17 	ldw	r2,-16(fp)
   814e0:	10c00917 	ldw	r3,36(r2)
   814e4:	e0bffc17 	ldw	r2,-16(fp)
   814e8:	10800117 	ldw	r2,4(r2)
   814ec:	18bff736 	bltu	r3,r2,814cc <rx_descriptor_end+0xfff8146c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   814f0:	e0bffc17 	ldw	r2,-16(fp)
   814f4:	10800917 	ldw	r2,36(r2)
   814f8:	10000126 	beq	r2,zero,81500 <altera_avalon_jtag_uart_write+0x1c8>
         break;
   814fc:	00000206 	br	81508 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   81500:	e0bffe17 	ldw	r2,-8(fp)
   81504:	00bf9716 	blt	zero,r2,81364 <rx_descriptor_end+0xfff81304>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   81508:	e0fffd17 	ldw	r3,-12(fp)
   8150c:	e0bff717 	ldw	r2,-36(fp)
   81510:	18800426 	beq	r3,r2,81524 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   81514:	e0fffd17 	ldw	r3,-12(fp)
   81518:	e0bff717 	ldw	r2,-36(fp)
   8151c:	1885c83a 	sub	r2,r3,r2
   81520:	00000606 	br	8153c <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   81524:	e0bfff17 	ldw	r2,-4(fp)
   81528:	1090000c 	andi	r2,r2,16384
   8152c:	10000226 	beq	r2,zero,81538 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   81530:	00bffd44 	movi	r2,-11
   81534:	00000106 	br	8153c <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   81538:	00bffec4 	movi	r2,-5
}
   8153c:	e037883a 	mov	sp,fp
   81540:	dfc00117 	ldw	ra,4(sp)
   81544:	df000017 	ldw	fp,0(sp)
   81548:	dec00204 	addi	sp,sp,8
   8154c:	f800283a 	ret

00081550 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   81550:	defffe04 	addi	sp,sp,-8
   81554:	dfc00115 	stw	ra,4(sp)
   81558:	df000015 	stw	fp,0(sp)
   8155c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   81560:	00800234 	movhi	r2,8
   81564:	109ebd04 	addi	r2,r2,31476
   81568:	10800017 	ldw	r2,0(r2)
   8156c:	10000526 	beq	r2,zero,81584 <alt_get_errno+0x34>
   81570:	00800234 	movhi	r2,8
   81574:	109ebd04 	addi	r2,r2,31476
   81578:	10800017 	ldw	r2,0(r2)
   8157c:	103ee83a 	callr	r2
   81580:	00000206 	br	8158c <alt_get_errno+0x3c>
   81584:	00800274 	movhi	r2,9
   81588:	10a58604 	addi	r2,r2,-27112
}
   8158c:	e037883a 	mov	sp,fp
   81590:	dfc00117 	ldw	ra,4(sp)
   81594:	df000017 	ldw	fp,0(sp)
   81598:	dec00204 	addi	sp,sp,8
   8159c:	f800283a 	ret

000815a0 <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
   815a0:	defffc04 	addi	sp,sp,-16
   815a4:	df000315 	stw	fp,12(sp)
   815a8:	df000304 	addi	fp,sp,12
   815ac:	e13ffe15 	stw	r4,-8(fp)
   815b0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   815b4:	e0bffe17 	ldw	r2,-8(fp)
   815b8:	10800317 	ldw	r2,12(r2)
   815bc:	10800037 	ldwio	r2,0(r2)
   815c0:	1080040c 	andi	r2,r2,16
   815c4:	10000226 	beq	r2,zero,815d0 <alt_avalon_sgdma_do_async_transfer+0x30>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
   815c8:	00bffc04 	movi	r2,-16
   815cc:	00003906 	br	816b4 <alt_avalon_sgdma_do_async_transfer+0x114>
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   815d0:	e0bffe17 	ldw	r2,-8(fp)
   815d4:	10800317 	ldw	r2,12(r2)
   815d8:	10800404 	addi	r2,r2,16
   815dc:	e0fffe17 	ldw	r3,-8(fp)
   815e0:	18c00317 	ldw	r3,12(r3)
   815e4:	18c00404 	addi	r3,r3,16
   815e8:	19000037 	ldwio	r4,0(r3)
   815ec:	00fff7c4 	movi	r3,-33
   815f0:	20c6703a 	and	r3,r4,r3
   815f4:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   815f8:	e0bffe17 	ldw	r2,-8(fp)
   815fc:	10800317 	ldw	r2,12(r2)
   81600:	00c03fc4 	movi	r3,255
   81604:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
   81608:	e0bffe17 	ldw	r2,-8(fp)
   8160c:	10800317 	ldw	r2,12(r2)
   81610:	10800804 	addi	r2,r2,32
   81614:	e0ffff17 	ldw	r3,-4(fp)
   81618:	10c00035 	stwio	r3,0(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
   8161c:	e0bffe17 	ldw	r2,-8(fp)
   81620:	10800917 	ldw	r2,36(r2)
   81624:	10001126 	beq	r2,zero,8166c <alt_avalon_sgdma_do_async_transfer+0xcc>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   81628:	e0bffe17 	ldw	r2,-8(fp)
   8162c:	10800317 	ldw	r2,12(r2)
   81630:	10800404 	addi	r2,r2,16
   81634:	10800037 	ldwio	r2,0(r2)
   81638:	e0bffd15 	stw	r2,-12(fp)

    control |= (dev->chain_control                          |
   8163c:	e0bffe17 	ldw	r2,-8(fp)
   81640:	10c00b17 	ldw	r3,44(r2)
   81644:	e0bffd17 	ldw	r2,-12(fp)
   81648:	1884b03a 	or	r2,r3,r2
   8164c:	10801814 	ori	r2,r2,96
   81650:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   81654:	e0bffe17 	ldw	r2,-8(fp)
   81658:	10800317 	ldw	r2,12(r2)
   8165c:	10800404 	addi	r2,r2,16
   81660:	e0fffd17 	ldw	r3,-12(fp)
   81664:	10c00035 	stwio	r3,0(r2)
   81668:	00001106 	br	816b0 <alt_avalon_sgdma_do_async_transfer+0x110>
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   8166c:	e0bffe17 	ldw	r2,-8(fp)
   81670:	10800317 	ldw	r2,12(r2)
   81674:	10800404 	addi	r2,r2,16
   81678:	10800037 	ldwio	r2,0(r2)
   8167c:	e0bffd15 	stw	r2,-12(fp)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
   81680:	e0bffd17 	ldw	r2,-12(fp)
   81684:	10801814 	ori	r2,r2,96
   81688:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;
   8168c:	e0fffd17 	ldw	r3,-12(fp)
   81690:	00bffbc4 	movi	r2,-17
   81694:	1884703a 	and	r2,r3,r2
   81698:	e0bffd15 	stw	r2,-12(fp)

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   8169c:	e0bffe17 	ldw	r2,-8(fp)
   816a0:	10800317 	ldw	r2,12(r2)
   816a4:	10800404 	addi	r2,r2,16
   816a8:	e0fffd17 	ldw	r3,-12(fp)
   816ac:	10c00035 	stwio	r3,0(r2)

  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
   816b0:	0005883a 	mov	r2,zero
}
   816b4:	e037883a 	mov	sp,fp
   816b8:	df000017 	ldw	fp,0(sp)
   816bc:	dec00104 	addi	sp,sp,4
   816c0:	f800283a 	ret

000816c4 <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
   816c4:	defffc04 	addi	sp,sp,-16
   816c8:	df000315 	stw	fp,12(sp)
   816cc:	df000304 	addi	fp,sp,12
   816d0:	e13ffe15 	stw	r4,-8(fp)
   816d4:	e17fff15 	stw	r5,-4(fp)
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   816d8:	0001883a 	nop
   816dc:	e0bffe17 	ldw	r2,-8(fp)
   816e0:	10800317 	ldw	r2,12(r2)
   816e4:	10800037 	ldwio	r2,0(r2)
   816e8:	1080040c 	andi	r2,r2,16
   816ec:	103ffb1e 	bne	r2,zero,816dc <rx_descriptor_end+0xfff8167c>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   816f0:	e0bffe17 	ldw	r2,-8(fp)
   816f4:	10800317 	ldw	r2,12(r2)
   816f8:	10800404 	addi	r2,r2,16
   816fc:	e0fffe17 	ldw	r3,-8(fp)
   81700:	18c00317 	ldw	r3,12(r3)
   81704:	18c00404 	addi	r3,r3,16
   81708:	19000037 	ldwio	r4,0(r3)
   8170c:	00fff7c4 	movi	r3,-33
   81710:	20c6703a 	and	r3,r4,r3
   81714:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   81718:	e0bffe17 	ldw	r2,-8(fp)
   8171c:	10800317 	ldw	r2,12(r2)
   81720:	00c03fc4 	movi	r3,255
   81724:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
   81728:	e0bffe17 	ldw	r2,-8(fp)
   8172c:	10800317 	ldw	r2,12(r2)
   81730:	10800804 	addi	r2,r2,32
   81734:	e0ffff17 	ldw	r3,-4(fp)
   81738:	10c00035 	stwio	r3,0(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   8173c:	e0bffe17 	ldw	r2,-8(fp)
   81740:	10800317 	ldw	r2,12(r2)
   81744:	10800404 	addi	r2,r2,16
   81748:	e0fffe17 	ldw	r3,-8(fp)
   8174c:	18c00317 	ldw	r3,12(r3)
   81750:	18c00404 	addi	r3,r3,16
   81754:	18c00037 	ldwio	r3,0(r3)
   81758:	18c01814 	ori	r3,r3,96
   8175c:	10c00035 	stwio	r3,0(r2)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
   81760:	0001883a 	nop
   81764:	e0bffe17 	ldw	r2,-8(fp)
   81768:	10800317 	ldw	r2,12(r2)
   8176c:	10800037 	ldwio	r2,0(r2)
   81770:	1080040c 	andi	r2,r2,16
   81774:	103ffb1e 	bne	r2,zero,81764 <rx_descriptor_end+0xfff81704>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
   81778:	e0bffe17 	ldw	r2,-8(fp)
   8177c:	10800317 	ldw	r2,12(r2)
   81780:	10800404 	addi	r2,r2,16
   81784:	e0fffe17 	ldw	r3,-8(fp)
   81788:	18c00317 	ldw	r3,12(r3)
   8178c:	18c00404 	addi	r3,r3,16
   81790:	19000037 	ldwio	r4,0(r3)
   81794:	00fff7c4 	movi	r3,-33
   81798:	20c6703a 	and	r3,r4,r3
   8179c:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
   817a0:	e0bffe17 	ldw	r2,-8(fp)
   817a4:	10800317 	ldw	r2,12(r2)
   817a8:	10800037 	ldwio	r2,0(r2)
   817ac:	e0bffd05 	stb	r2,-12(fp)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   817b0:	e0bffe17 	ldw	r2,-8(fp)
   817b4:	10800317 	ldw	r2,12(r2)
   817b8:	00c03fc4 	movi	r3,255
   817bc:	10c00035 	stwio	r3,0(r2)

  return status;
   817c0:	e0bffd03 	ldbu	r2,-12(fp)
}
   817c4:	e037883a 	mov	sp,fp
   817c8:	df000017 	ldw	fp,0(sp)
   817cc:	dec00104 	addi	sp,sp,4
   817d0:	f800283a 	ret

000817d4 <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
   817d4:	defff404 	addi	sp,sp,-48
   817d8:	dfc00b15 	stw	ra,44(sp)
   817dc:	df000a15 	stw	fp,40(sp)
   817e0:	df000a04 	addi	fp,sp,40
   817e4:	e13ffb15 	stw	r4,-20(fp)
   817e8:	e17ffc15 	stw	r5,-16(fp)
   817ec:	e1bffd15 	stw	r6,-12(fp)
   817f0:	e1fffe15 	stw	r7,-8(fp)
   817f4:	e0800217 	ldw	r2,8(fp)
   817f8:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
   817fc:	e0bfff0b 	ldhu	r2,-4(fp)
   81800:	d8800015 	stw	r2,0(sp)
   81804:	e0800317 	ldw	r2,12(fp)
   81808:	d8800115 	stw	r2,4(sp)
   8180c:	e0800417 	ldw	r2,16(fp)
   81810:	d8800215 	stw	r2,8(sp)
   81814:	d8000315 	stw	zero,12(sp)
   81818:	d8000415 	stw	zero,16(sp)
   8181c:	e13ffb17 	ldw	r4,-20(fp)
   81820:	e17ffc17 	ldw	r5,-16(fp)
   81824:	e1bffd17 	ldw	r6,-12(fp)
   81828:	e1fffe17 	ldw	r7,-8(fp)
   8182c:	00818440 	call	81844 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
   81830:	e037883a 	mov	sp,fp
   81834:	dfc00117 	ldw	ra,4(sp)
   81838:	df000017 	ldw	fp,0(sp)
   8183c:	dec00204 	addi	sp,sp,8
   81840:	f800283a 	ret

00081844 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
   81844:	defff204 	addi	sp,sp,-56
   81848:	dfc00d15 	stw	ra,52(sp)
   8184c:	df000c15 	stw	fp,48(sp)
   81850:	df000c04 	addi	fp,sp,48
   81854:	e13ffb15 	stw	r4,-20(fp)
   81858:	e17ffc15 	stw	r5,-16(fp)
   8185c:	e1bffd15 	stw	r6,-12(fp)
   81860:	e1fffe15 	stw	r7,-8(fp)
   81864:	e0800217 	ldw	r2,8(fp)
   81868:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
   8186c:	e0bfff0b 	ldhu	r2,-4(fp)
   81870:	d8800015 	stw	r2,0(sp)
   81874:	d8000115 	stw	zero,4(sp)
   81878:	e0800317 	ldw	r2,12(fp)
   8187c:	d8800215 	stw	r2,8(sp)
   81880:	e0800417 	ldw	r2,16(fp)
   81884:	d8800315 	stw	r2,12(sp)
   81888:	e0800517 	ldw	r2,20(fp)
   8188c:	d8800415 	stw	r2,16(sp)
   81890:	e0800617 	ldw	r2,24(fp)
   81894:	d8800515 	stw	r2,20(sp)
   81898:	d8000615 	stw	zero,24(sp)
   8189c:	e13ffb17 	ldw	r4,-20(fp)
   818a0:	e17ffc17 	ldw	r5,-16(fp)
   818a4:	e1bffd17 	ldw	r6,-12(fp)
   818a8:	e1fffe17 	ldw	r7,-8(fp)
   818ac:	0081db00 	call	81db0 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
   818b0:	e037883a 	mov	sp,fp
   818b4:	dfc00117 	ldw	ra,4(sp)
   818b8:	df000017 	ldw	fp,0(sp)
   818bc:	dec00204 	addi	sp,sp,8
   818c0:	f800283a 	ret

000818c4 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
   818c4:	defff804 	addi	sp,sp,-32
   818c8:	dfc00715 	stw	ra,28(sp)
   818cc:	df000615 	stw	fp,24(sp)
   818d0:	df000604 	addi	fp,sp,24
   818d4:	e13ffc15 	stw	r4,-16(fp)
   818d8:	e17ffd15 	stw	r5,-12(fp)
   818dc:	e1bffe15 	stw	r6,-8(fp)
   818e0:	3805883a 	mov	r2,r7
   818e4:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
   818e8:	e0ffff0b 	ldhu	r3,-4(fp)
   818ec:	e0800217 	ldw	r2,8(fp)
   818f0:	d8800015 	stw	r2,0(sp)
   818f4:	d8000115 	stw	zero,4(sp)
   818f8:	e13ffc17 	ldw	r4,-16(fp)
   818fc:	e17ffd17 	ldw	r5,-12(fp)
   81900:	e1bffe17 	ldw	r6,-8(fp)
   81904:	180f883a 	mov	r7,r3
   81908:	00819200 	call	81920 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
   8190c:	e037883a 	mov	sp,fp
   81910:	dfc00117 	ldw	ra,4(sp)
   81914:	df000017 	ldw	fp,0(sp)
   81918:	dec00204 	addi	sp,sp,8
   8191c:	f800283a 	ret

00081920 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
   81920:	defff304 	addi	sp,sp,-52
   81924:	dfc00c15 	stw	ra,48(sp)
   81928:	df000b15 	stw	fp,44(sp)
   8192c:	df000b04 	addi	fp,sp,44
   81930:	e13ffc15 	stw	r4,-16(fp)
   81934:	e17ffd15 	stw	r5,-12(fp)
   81938:	e1bffe15 	stw	r6,-8(fp)
   8193c:	3805883a 	mov	r2,r7
   81940:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
   81944:	e0bfff0b 	ldhu	r2,-4(fp)
   81948:	d8800015 	stw	r2,0(sp)
   8194c:	d8000115 	stw	zero,4(sp)
   81950:	d8000215 	stw	zero,8(sp)
   81954:	e0800217 	ldw	r2,8(fp)
   81958:	d8800315 	stw	r2,12(sp)
   8195c:	d8000415 	stw	zero,16(sp)
   81960:	e0800317 	ldw	r2,12(fp)
   81964:	d8800515 	stw	r2,20(sp)
   81968:	d8000615 	stw	zero,24(sp)
   8196c:	e13ffc17 	ldw	r4,-16(fp)
   81970:	e17ffd17 	ldw	r5,-12(fp)
   81974:	000d883a 	mov	r6,zero
   81978:	e1fffe17 	ldw	r7,-8(fp)
   8197c:	0081db00 	call	81db0 <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
   81980:	e037883a 	mov	sp,fp
   81984:	dfc00117 	ldw	ra,4(sp)
   81988:	df000017 	ldw	fp,0(sp)
   8198c:	dec00204 	addi	sp,sp,8
   81990:	f800283a 	ret

00081994 <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
   81994:	defff404 	addi	sp,sp,-48
   81998:	dfc00b15 	stw	ra,44(sp)
   8199c:	df000a15 	stw	fp,40(sp)
   819a0:	df000a04 	addi	fp,sp,40
   819a4:	e13ffb15 	stw	r4,-20(fp)
   819a8:	e17ffc15 	stw	r5,-16(fp)
   819ac:	e1bffd15 	stw	r6,-12(fp)
   819b0:	3807883a 	mov	r3,r7
   819b4:	e0800517 	ldw	r2,20(fp)
   819b8:	e0fffe0d 	sth	r3,-8(fp)
   819bc:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
   819c0:	e1fffe0b 	ldhu	r7,-8(fp)
   819c4:	e0bfff03 	ldbu	r2,-4(fp)
   819c8:	e0c00217 	ldw	r3,8(fp)
   819cc:	d8c00015 	stw	r3,0(sp)
   819d0:	e0c00317 	ldw	r3,12(fp)
   819d4:	d8c00115 	stw	r3,4(sp)
   819d8:	e0c00417 	ldw	r3,16(fp)
   819dc:	d8c00215 	stw	r3,8(sp)
   819e0:	d8000315 	stw	zero,12(sp)
   819e4:	d8800415 	stw	r2,16(sp)
   819e8:	e13ffb17 	ldw	r4,-20(fp)
   819ec:	e17ffc17 	ldw	r5,-16(fp)
   819f0:	e1bffd17 	ldw	r6,-12(fp)
   819f4:	0081a0c0 	call	81a0c <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
   819f8:	e037883a 	mov	sp,fp
   819fc:	dfc00117 	ldw	ra,4(sp)
   81a00:	df000017 	ldw	fp,0(sp)
   81a04:	dec00204 	addi	sp,sp,8
   81a08:	f800283a 	ret

00081a0c <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
   81a0c:	defff204 	addi	sp,sp,-56
   81a10:	dfc00d15 	stw	ra,52(sp)
   81a14:	df000c15 	stw	fp,48(sp)
   81a18:	df000c04 	addi	fp,sp,48
   81a1c:	e13ffb15 	stw	r4,-20(fp)
   81a20:	e17ffc15 	stw	r5,-16(fp)
   81a24:	e1bffd15 	stw	r6,-12(fp)
   81a28:	3807883a 	mov	r3,r7
   81a2c:	e0800617 	ldw	r2,24(fp)
   81a30:	e0fffe0d 	sth	r3,-8(fp)
   81a34:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
   81a38:	e0fffe0b 	ldhu	r3,-8(fp)
   81a3c:	e0bfff03 	ldbu	r2,-4(fp)
   81a40:	d8c00015 	stw	r3,0(sp)
   81a44:	e0c00417 	ldw	r3,16(fp)
   81a48:	d8c00115 	stw	r3,4(sp)
   81a4c:	e0c00217 	ldw	r3,8(fp)
   81a50:	d8c00215 	stw	r3,8(sp)
   81a54:	e0c00317 	ldw	r3,12(fp)
   81a58:	d8c00315 	stw	r3,12(sp)
   81a5c:	e0c00517 	ldw	r3,20(fp)
   81a60:	d8c00415 	stw	r3,16(sp)
   81a64:	d8000515 	stw	zero,20(sp)
   81a68:	d8800615 	stw	r2,24(sp)
   81a6c:	e13ffb17 	ldw	r4,-20(fp)
   81a70:	e17ffc17 	ldw	r5,-16(fp)
   81a74:	e1bffd17 	ldw	r6,-12(fp)
   81a78:	000f883a 	mov	r7,zero
   81a7c:	0081db00 	call	81db0 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
   81a80:	e037883a 	mov	sp,fp
   81a84:	dfc00117 	ldw	ra,4(sp)
   81a88:	df000017 	ldw	fp,0(sp)
   81a8c:	dec00204 	addi	sp,sp,8
   81a90:	f800283a 	ret

00081a94 <alt_avalon_sgdma_register_callback>:
void alt_avalon_sgdma_register_callback(
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
   81a94:	defffb04 	addi	sp,sp,-20
   81a98:	df000415 	stw	fp,16(sp)
   81a9c:	df000404 	addi	fp,sp,16
   81aa0:	e13ffc15 	stw	r4,-16(fp)
   81aa4:	e17ffd15 	stw	r5,-12(fp)
   81aa8:	e1bffe15 	stw	r6,-8(fp)
   81aac:	e1ffff15 	stw	r7,-4(fp)
  dev->callback         = callback;
   81ab0:	e0bffc17 	ldw	r2,-16(fp)
   81ab4:	e0fffd17 	ldw	r3,-12(fp)
   81ab8:	10c00915 	stw	r3,36(r2)
  dev->callback_context = context;
   81abc:	e0bffc17 	ldw	r2,-16(fp)
   81ac0:	e0ffff17 	ldw	r3,-4(fp)
   81ac4:	10c00a15 	stw	r3,40(r2)
  dev->chain_control    = chain_control;
   81ac8:	e0bffc17 	ldw	r2,-16(fp)
   81acc:	e0fffe17 	ldw	r3,-8(fp)
   81ad0:	10c00b15 	stw	r3,44(r2)
}
   81ad4:	e037883a 	mov	sp,fp
   81ad8:	df000017 	ldw	fp,0(sp)
   81adc:	dec00104 	addi	sp,sp,4
   81ae0:	f800283a 	ret

00081ae4 <alt_avalon_sgdma_start>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct.
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
   81ae4:	defffd04 	addi	sp,sp,-12
   81ae8:	df000215 	stw	fp,8(sp)
   81aec:	df000204 	addi	fp,sp,8
   81af0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   81af4:	e0bfff17 	ldw	r2,-4(fp)
   81af8:	10800317 	ldw	r2,12(r2)
   81afc:	10800404 	addi	r2,r2,16
   81b00:	10800037 	ldwio	r2,0(r2)
   81b04:	e0bffe15 	stw	r2,-8(fp)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
   81b08:	e0bffe17 	ldw	r2,-8(fp)
   81b0c:	10800814 	ori	r2,r2,32
   81b10:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   81b14:	e0bfff17 	ldw	r2,-4(fp)
   81b18:	10800317 	ldw	r2,12(r2)
   81b1c:	10800404 	addi	r2,r2,16
   81b20:	e0fffe17 	ldw	r3,-8(fp)
   81b24:	10c00035 	stwio	r3,0(r2)
}
   81b28:	e037883a 	mov	sp,fp
   81b2c:	df000017 	ldw	fp,0(sp)
   81b30:	dec00104 	addi	sp,sp,4
   81b34:	f800283a 	ret

00081b38 <alt_avalon_sgdma_stop>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
   81b38:	defffd04 	addi	sp,sp,-12
   81b3c:	df000215 	stw	fp,8(sp)
   81b40:	df000204 	addi	fp,sp,8
   81b44:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   81b48:	e0bfff17 	ldw	r2,-4(fp)
   81b4c:	10800317 	ldw	r2,12(r2)
   81b50:	10800404 	addi	r2,r2,16
   81b54:	10800037 	ldwio	r2,0(r2)
   81b58:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
   81b5c:	e0fffe17 	ldw	r3,-8(fp)
   81b60:	00bff7c4 	movi	r2,-33
   81b64:	1884703a 	and	r2,r3,r2
   81b68:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   81b6c:	e0bfff17 	ldw	r2,-4(fp)
   81b70:	10800317 	ldw	r2,12(r2)
   81b74:	10800404 	addi	r2,r2,16
   81b78:	e0fffe17 	ldw	r3,-8(fp)
   81b7c:	10c00035 	stwio	r3,0(r2)
}
   81b80:	e037883a 	mov	sp,fp
   81b84:	df000017 	ldw	fp,0(sp)
   81b88:	dec00104 	addi	sp,sp,4
   81b8c:	f800283a 	ret

00081b90 <alt_avalon_sgdma_check_descriptor_status>:
 * - 0 if the descriptor is error-free, not "owned by hardware", or
 *   a previously requested transfer has appeared to have completed
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
   81b90:	defffe04 	addi	sp,sp,-8
   81b94:	df000115 	stw	fp,4(sp)
   81b98:	df000104 	addi	fp,sp,4
   81b9c:	e13fff15 	stw	r4,-4(fp)
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
   81ba0:	e0bfff17 	ldw	r2,-4(fp)
   81ba4:	10800784 	addi	r2,r2,30
   81ba8:	10800023 	ldbuio	r2,0(r2)
   81bac:	10803fcc 	andi	r2,r2,255
   81bb0:	10801fcc 	andi	r2,r2,127
   81bb4:	10000226 	beq	r2,zero,81bc0 <alt_avalon_sgdma_check_descriptor_status+0x30>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
   81bb8:	00bffec4 	movi	r2,-5
   81bbc:	00000906 	br	81be4 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

  if( IORD_8DIRECT(&desc->control, 0) &
   81bc0:	e0bfff17 	ldw	r2,-4(fp)
   81bc4:	108007c4 	addi	r2,r2,31
   81bc8:	10800023 	ldbuio	r2,0(r2)
   81bcc:	10803fcc 	andi	r2,r2,255
   81bd0:	1080200c 	andi	r2,r2,128
   81bd4:	10000226 	beq	r2,zero,81be0 <alt_avalon_sgdma_check_descriptor_status+0x50>
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
   81bd8:	00bfe244 	movi	r2,-119
   81bdc:	00000106 	br	81be4 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

    return 0;
   81be0:	0005883a 	mov	r2,zero
}
   81be4:	e037883a 	mov	sp,fp
   81be8:	df000017 	ldw	fp,0(sp)
   81bec:	dec00104 	addi	sp,sp,4
   81bf0:	f800283a 	ret

00081bf4 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
   81bf4:	defffc04 	addi	sp,sp,-16
   81bf8:	dfc00315 	stw	ra,12(sp)
   81bfc:	df000215 	stw	fp,8(sp)
   81c00:	df000204 	addi	fp,sp,8
   81c04:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
   81c08:	e13fff17 	ldw	r4,-4(fp)
   81c0c:	d1600004 	addi	r5,gp,-32768
   81c10:	00827b00 	call	827b0 <alt_find_dev>
   81c14:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev) {
   81c18:	e0bffe17 	ldw	r2,-8(fp)
   81c1c:	1000041e 	bne	r2,zero,81c30 <alt_avalon_sgdma_open+0x3c>
    ALT_ERRNO = ENODEV;
   81c20:	00815500 	call	81550 <alt_get_errno>
   81c24:	1007883a 	mov	r3,r2
   81c28:	008004c4 	movi	r2,19
   81c2c:	18800015 	stw	r2,0(r3)
  }

  return dev;
   81c30:	e0bffe17 	ldw	r2,-8(fp)
}
   81c34:	e037883a 	mov	sp,fp
   81c38:	dfc00117 	ldw	ra,4(sp)
   81c3c:	df000017 	ldw	fp,0(sp)
   81c40:	dec00204 	addi	sp,sp,8
   81c44:	f800283a 	ret

00081c48 <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
   81c48:	defff104 	addi	sp,sp,-60
   81c4c:	dfc00e15 	stw	ra,56(sp)
   81c50:	df000d15 	stw	fp,52(sp)
   81c54:	df000d04 	addi	fp,sp,52
   81c58:	e13ffa15 	stw	r4,-24(fp)
   81c5c:	e17ffb15 	stw	r5,-20(fp)
   81c60:	e1bffc15 	stw	r6,-16(fp)
   81c64:	e1fffd15 	stw	r7,-12(fp)
   81c68:	e0c00217 	ldw	r3,8(fp)
   81c6c:	e0800617 	ldw	r2,24(fp)
   81c70:	e0fffe0d 	sth	r3,-8(fp)
   81c74:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
   81c78:	e0fffe0b 	ldhu	r3,-8(fp)
   81c7c:	e0bfff03 	ldbu	r2,-4(fp)
   81c80:	d8c00015 	stw	r3,0(sp)
   81c84:	e0c00317 	ldw	r3,12(fp)
   81c88:	d8c00115 	stw	r3,4(sp)
   81c8c:	e0c00417 	ldw	r3,16(fp)
   81c90:	d8c00215 	stw	r3,8(sp)
   81c94:	e0c00517 	ldw	r3,20(fp)
   81c98:	d8c00315 	stw	r3,12(sp)
   81c9c:	d8000415 	stw	zero,16(sp)
   81ca0:	d8000515 	stw	zero,20(sp)
   81ca4:	d8800615 	stw	r2,24(sp)
   81ca8:	e13ffa17 	ldw	r4,-24(fp)
   81cac:	e17ffb17 	ldw	r5,-20(fp)
   81cb0:	e1bffc17 	ldw	r6,-16(fp)
   81cb4:	e1fffd17 	ldw	r7,-12(fp)
   81cb8:	0081db00 	call	81db0 <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
   81cbc:	e037883a 	mov	sp,fp
   81cc0:	dfc00117 	ldw	ra,4(sp)
   81cc4:	df000017 	ldw	fp,0(sp)
   81cc8:	dec00204 	addi	sp,sp,8
   81ccc:	f800283a 	ret

00081cd0 <alt_avalon_sgdma_enable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
   81cd0:	defffc04 	addi	sp,sp,-16
   81cd4:	df000315 	stw	fp,12(sp)
   81cd8:	df000304 	addi	fp,sp,12
   81cdc:	e13ffe15 	stw	r4,-8(fp)
   81ce0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   81ce4:	e0bffe17 	ldw	r2,-8(fp)
   81ce8:	10800317 	ldw	r2,12(r2)
   81cec:	10800404 	addi	r2,r2,16
   81cf0:	10800037 	ldwio	r2,0(r2)
   81cf4:	e0bffd15 	stw	r2,-12(fp)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
   81cf8:	e0fffd17 	ldw	r3,-12(fp)
   81cfc:	00a00434 	movhi	r2,32784
   81d00:	10bfffc4 	addi	r2,r2,-1
   81d04:	1884703a 	and	r2,r3,r2
   81d08:	e0bffd15 	stw	r2,-12(fp)
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
   81d0c:	e0bfff17 	ldw	r2,-4(fp)
   81d10:	1004953a 	slli	r2,r2,20
   81d14:	10dffc2c 	andhi	r3,r2,32752

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
   81d18:	e0bffd17 	ldw	r2,-12(fp)
   81d1c:	1884b03a 	or	r2,r3,r2
   81d20:	10800134 	orhi	r2,r2,4
   81d24:	e0bffd15 	stw	r2,-12(fp)
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   81d28:	e0bffe17 	ldw	r2,-8(fp)
   81d2c:	10800317 	ldw	r2,12(r2)
   81d30:	10800404 	addi	r2,r2,16
   81d34:	e0fffd17 	ldw	r3,-12(fp)
   81d38:	10c00035 	stwio	r3,0(r2)
  
  return;
   81d3c:	0001883a 	nop
}
   81d40:	e037883a 	mov	sp,fp
   81d44:	df000017 	ldw	fp,0(sp)
   81d48:	dec00104 	addi	sp,sp,4
   81d4c:	f800283a 	ret

00081d50 <alt_avalon_sgdma_disable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
   81d50:	defffd04 	addi	sp,sp,-12
   81d54:	df000215 	stw	fp,8(sp)
   81d58:	df000204 	addi	fp,sp,8
   81d5c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   81d60:	e0bfff17 	ldw	r2,-4(fp)
   81d64:	10800317 	ldw	r2,12(r2)
   81d68:	10800404 	addi	r2,r2,16
   81d6c:	10800037 	ldwio	r2,0(r2)
   81d70:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;
   81d74:	e0fffe17 	ldw	r3,-8(fp)
   81d78:	00bfff34 	movhi	r2,65532
   81d7c:	10bfffc4 	addi	r2,r2,-1
   81d80:	1884703a 	and	r2,r3,r2
   81d84:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
   81d88:	e0bfff17 	ldw	r2,-4(fp)
   81d8c:	10800317 	ldw	r2,12(r2)
   81d90:	10800404 	addi	r2,r2,16
   81d94:	e0fffe17 	ldw	r3,-8(fp)
   81d98:	10c00035 	stwio	r3,0(r2)
  
  return;
   81d9c:	0001883a 	nop
}
   81da0:	e037883a 	mov	sp,fp
   81da4:	df000017 	ldw	fp,0(sp)
   81da8:	dec00104 	addi	sp,sp,4
   81dac:	f800283a 	ret

00081db0 <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
   81db0:	defff804 	addi	sp,sp,-32
   81db4:	dfc00715 	stw	ra,28(sp)
   81db8:	df000615 	stw	fp,24(sp)
   81dbc:	df000604 	addi	fp,sp,24
   81dc0:	e13ffa15 	stw	r4,-24(fp)
   81dc4:	e17ffb15 	stw	r5,-20(fp)
   81dc8:	e1bffc15 	stw	r6,-16(fp)
   81dcc:	e1fffd15 	stw	r7,-12(fp)
   81dd0:	e0c00217 	ldw	r3,8(fp)
   81dd4:	e0800817 	ldw	r2,32(fp)
   81dd8:	e0fffe0d 	sth	r3,-8(fp)
   81ddc:	e0bfff05 	stb	r2,-4(fp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
   81de0:	e0bffb17 	ldw	r2,-20(fp)
   81de4:	108007c4 	addi	r2,r2,31
   81de8:	e0fffb17 	ldw	r3,-20(fp)
   81dec:	18c007c3 	ldbu	r3,31(r3)
   81df0:	19003fcc 	andi	r4,r3,255
   81df4:	00ffdfc4 	movi	r3,-129
   81df8:	20c6703a 	and	r3,r4,r3
   81dfc:	10c00025 	stbio	r3,0(r2)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
   81e00:	e0bffa17 	ldw	r2,-24(fp)
   81e04:	e0fffc17 	ldw	r3,-16(fp)
   81e08:	19403fcc 	andi	r5,r3,255
   81e0c:	10c00003 	ldbu	r3,0(r2)
   81e10:	1806703a 	and	r3,r3,zero
   81e14:	1809883a 	mov	r4,r3
   81e18:	2807883a 	mov	r3,r5
   81e1c:	20c6b03a 	or	r3,r4,r3
   81e20:	10c00005 	stb	r3,0(r2)
   81e24:	e0fffc17 	ldw	r3,-16(fp)
   81e28:	1806d23a 	srli	r3,r3,8
   81e2c:	19403fcc 	andi	r5,r3,255
   81e30:	10c00043 	ldbu	r3,1(r2)
   81e34:	1806703a 	and	r3,r3,zero
   81e38:	1809883a 	mov	r4,r3
   81e3c:	2807883a 	mov	r3,r5
   81e40:	20c6b03a 	or	r3,r4,r3
   81e44:	10c00045 	stb	r3,1(r2)
   81e48:	e0fffc17 	ldw	r3,-16(fp)
   81e4c:	1806d43a 	srli	r3,r3,16
   81e50:	19403fcc 	andi	r5,r3,255
   81e54:	10c00083 	ldbu	r3,2(r2)
   81e58:	1806703a 	and	r3,r3,zero
   81e5c:	1809883a 	mov	r4,r3
   81e60:	2807883a 	mov	r3,r5
   81e64:	20c6b03a 	or	r3,r4,r3
   81e68:	10c00085 	stb	r3,2(r2)
   81e6c:	e0fffc17 	ldw	r3,-16(fp)
   81e70:	180ad63a 	srli	r5,r3,24
   81e74:	10c000c3 	ldbu	r3,3(r2)
   81e78:	1806703a 	and	r3,r3,zero
   81e7c:	1809883a 	mov	r4,r3
   81e80:	2807883a 	mov	r3,r5
   81e84:	20c6b03a 	or	r3,r4,r3
   81e88:	10c000c5 	stb	r3,3(r2)
  desc->write_addr               = write_addr;
   81e8c:	e0bffa17 	ldw	r2,-24(fp)
   81e90:	e0fffd17 	ldw	r3,-12(fp)
   81e94:	19403fcc 	andi	r5,r3,255
   81e98:	10c00203 	ldbu	r3,8(r2)
   81e9c:	1806703a 	and	r3,r3,zero
   81ea0:	1809883a 	mov	r4,r3
   81ea4:	2807883a 	mov	r3,r5
   81ea8:	20c6b03a 	or	r3,r4,r3
   81eac:	10c00205 	stb	r3,8(r2)
   81eb0:	e0fffd17 	ldw	r3,-12(fp)
   81eb4:	1806d23a 	srli	r3,r3,8
   81eb8:	19403fcc 	andi	r5,r3,255
   81ebc:	10c00243 	ldbu	r3,9(r2)
   81ec0:	1806703a 	and	r3,r3,zero
   81ec4:	1809883a 	mov	r4,r3
   81ec8:	2807883a 	mov	r3,r5
   81ecc:	20c6b03a 	or	r3,r4,r3
   81ed0:	10c00245 	stb	r3,9(r2)
   81ed4:	e0fffd17 	ldw	r3,-12(fp)
   81ed8:	1806d43a 	srli	r3,r3,16
   81edc:	19403fcc 	andi	r5,r3,255
   81ee0:	10c00283 	ldbu	r3,10(r2)
   81ee4:	1806703a 	and	r3,r3,zero
   81ee8:	1809883a 	mov	r4,r3
   81eec:	2807883a 	mov	r3,r5
   81ef0:	20c6b03a 	or	r3,r4,r3
   81ef4:	10c00285 	stb	r3,10(r2)
   81ef8:	e0fffd17 	ldw	r3,-12(fp)
   81efc:	180ad63a 	srli	r5,r3,24
   81f00:	10c002c3 	ldbu	r3,11(r2)
   81f04:	1806703a 	and	r3,r3,zero
   81f08:	1809883a 	mov	r4,r3
   81f0c:	2807883a 	mov	r3,r5
   81f10:	20c6b03a 	or	r3,r4,r3
   81f14:	10c002c5 	stb	r3,11(r2)
  desc->next                     = (alt_u32 *) next;
   81f18:	e0bffa17 	ldw	r2,-24(fp)
   81f1c:	e0fffb17 	ldw	r3,-20(fp)
   81f20:	19403fcc 	andi	r5,r3,255
   81f24:	10c00403 	ldbu	r3,16(r2)
   81f28:	1806703a 	and	r3,r3,zero
   81f2c:	1809883a 	mov	r4,r3
   81f30:	2807883a 	mov	r3,r5
   81f34:	20c6b03a 	or	r3,r4,r3
   81f38:	10c00405 	stb	r3,16(r2)
   81f3c:	e0fffb17 	ldw	r3,-20(fp)
   81f40:	1806d23a 	srli	r3,r3,8
   81f44:	19403fcc 	andi	r5,r3,255
   81f48:	10c00443 	ldbu	r3,17(r2)
   81f4c:	1806703a 	and	r3,r3,zero
   81f50:	1809883a 	mov	r4,r3
   81f54:	2807883a 	mov	r3,r5
   81f58:	20c6b03a 	or	r3,r4,r3
   81f5c:	10c00445 	stb	r3,17(r2)
   81f60:	e0fffb17 	ldw	r3,-20(fp)
   81f64:	1806d43a 	srli	r3,r3,16
   81f68:	19403fcc 	andi	r5,r3,255
   81f6c:	10c00483 	ldbu	r3,18(r2)
   81f70:	1806703a 	and	r3,r3,zero
   81f74:	1809883a 	mov	r4,r3
   81f78:	2807883a 	mov	r3,r5
   81f7c:	20c6b03a 	or	r3,r4,r3
   81f80:	10c00485 	stb	r3,18(r2)
   81f84:	e0fffb17 	ldw	r3,-20(fp)
   81f88:	180ad63a 	srli	r5,r3,24
   81f8c:	10c004c3 	ldbu	r3,19(r2)
   81f90:	1806703a 	and	r3,r3,zero
   81f94:	1809883a 	mov	r4,r3
   81f98:	2807883a 	mov	r3,r5
   81f9c:	20c6b03a 	or	r3,r4,r3
   81fa0:	10c004c5 	stb	r3,19(r2)
  desc->read_addr_pad            = 0x0;
   81fa4:	e0bffa17 	ldw	r2,-24(fp)
   81fa8:	10c00103 	ldbu	r3,4(r2)
   81fac:	1806703a 	and	r3,r3,zero
   81fb0:	10c00105 	stb	r3,4(r2)
   81fb4:	10c00143 	ldbu	r3,5(r2)
   81fb8:	1806703a 	and	r3,r3,zero
   81fbc:	10c00145 	stb	r3,5(r2)
   81fc0:	10c00183 	ldbu	r3,6(r2)
   81fc4:	1806703a 	and	r3,r3,zero
   81fc8:	10c00185 	stb	r3,6(r2)
   81fcc:	10c001c3 	ldbu	r3,7(r2)
   81fd0:	1806703a 	and	r3,r3,zero
   81fd4:	10c001c5 	stb	r3,7(r2)
  desc->write_addr_pad           = 0x0;
   81fd8:	e0bffa17 	ldw	r2,-24(fp)
   81fdc:	10c00303 	ldbu	r3,12(r2)
   81fe0:	1806703a 	and	r3,r3,zero
   81fe4:	10c00305 	stb	r3,12(r2)
   81fe8:	10c00343 	ldbu	r3,13(r2)
   81fec:	1806703a 	and	r3,r3,zero
   81ff0:	10c00345 	stb	r3,13(r2)
   81ff4:	10c00383 	ldbu	r3,14(r2)
   81ff8:	1806703a 	and	r3,r3,zero
   81ffc:	10c00385 	stb	r3,14(r2)
   82000:	10c003c3 	ldbu	r3,15(r2)
   82004:	1806703a 	and	r3,r3,zero
   82008:	10c003c5 	stb	r3,15(r2)
  desc->next_pad                 = 0x0;
   8200c:	e0bffa17 	ldw	r2,-24(fp)
   82010:	10c00503 	ldbu	r3,20(r2)
   82014:	1806703a 	and	r3,r3,zero
   82018:	10c00505 	stb	r3,20(r2)
   8201c:	10c00543 	ldbu	r3,21(r2)
   82020:	1806703a 	and	r3,r3,zero
   82024:	10c00545 	stb	r3,21(r2)
   82028:	10c00583 	ldbu	r3,22(r2)
   8202c:	1806703a 	and	r3,r3,zero
   82030:	10c00585 	stb	r3,22(r2)
   82034:	10c005c3 	ldbu	r3,23(r2)
   82038:	1806703a 	and	r3,r3,zero
   8203c:	10c005c5 	stb	r3,23(r2)
  desc->bytes_to_transfer        = length_or_eop;
   82040:	e0bffa17 	ldw	r2,-24(fp)
   82044:	e0fffe17 	ldw	r3,-8(fp)
   82048:	19403fcc 	andi	r5,r3,255
   8204c:	10c00603 	ldbu	r3,24(r2)
   82050:	1806703a 	and	r3,r3,zero
   82054:	1809883a 	mov	r4,r3
   82058:	2807883a 	mov	r3,r5
   8205c:	20c6b03a 	or	r3,r4,r3
   82060:	10c00605 	stb	r3,24(r2)
   82064:	e0fffe17 	ldw	r3,-8(fp)
   82068:	1806d23a 	srli	r3,r3,8
   8206c:	19403fcc 	andi	r5,r3,255
   82070:	10c00643 	ldbu	r3,25(r2)
   82074:	1806703a 	and	r3,r3,zero
   82078:	1809883a 	mov	r4,r3
   8207c:	2807883a 	mov	r3,r5
   82080:	20c6b03a 	or	r3,r4,r3
   82084:	10c00645 	stb	r3,25(r2)
  desc->actual_bytes_transferred = 0;
   82088:	e0bffa17 	ldw	r2,-24(fp)
   8208c:	10c00703 	ldbu	r3,28(r2)
   82090:	1806703a 	and	r3,r3,zero
   82094:	10c00705 	stb	r3,28(r2)
   82098:	10c00743 	ldbu	r3,29(r2)
   8209c:	1806703a 	and	r3,r3,zero
   820a0:	10c00745 	stb	r3,29(r2)
  desc->status                   = 0x0;
   820a4:	e0bffa17 	ldw	r2,-24(fp)
   820a8:	10000785 	stb	zero,30(r2)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
   820ac:	e0800617 	ldw	r2,24(fp)
   820b0:	1007883a 	mov	r3,r2
   820b4:	e0bffa17 	ldw	r2,-24(fp)
   820b8:	10c00685 	stb	r3,26(r2)
  desc->write_burst              = write_burst;
   820bc:	e0800717 	ldw	r2,28(fp)
   820c0:	1007883a 	mov	r3,r2
   820c4:	e0bffa17 	ldw	r2,-24(fp)
   820c8:	10c006c5 	stb	r3,27(r2)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
   820cc:	e0800317 	ldw	r2,12(fp)
   820d0:	10000226 	beq	r2,zero,820dc <alt_avalon_sgdma_construct_descriptor_burst+0x32c>
   820d4:	00bfe044 	movi	r2,-127
   820d8:	00000106 	br	820e0 <alt_avalon_sgdma_construct_descriptor_burst+0x330>
   820dc:	00bfe004 	movi	r2,-128
   820e0:	e0c00417 	ldw	r3,16(fp)
   820e4:	18000226 	beq	r3,zero,820f0 <alt_avalon_sgdma_construct_descriptor_burst+0x340>
   820e8:	00c00084 	movi	r3,2
   820ec:	00000106 	br	820f4 <alt_avalon_sgdma_construct_descriptor_burst+0x344>
   820f0:	0007883a 	mov	r3,zero
   820f4:	10c4b03a 	or	r2,r2,r3
   820f8:	1007883a 	mov	r3,r2
   820fc:	e0800517 	ldw	r2,20(fp)
   82100:	10000226 	beq	r2,zero,8210c <alt_avalon_sgdma_construct_descriptor_burst+0x35c>
   82104:	00800104 	movi	r2,4
   82108:	00000106 	br	82110 <alt_avalon_sgdma_construct_descriptor_burst+0x360>
   8210c:	0005883a 	mov	r2,zero
   82110:	1884b03a 	or	r2,r3,r2
   82114:	1007883a 	mov	r3,r2
   82118:	e0bfff03 	ldbu	r2,-4(fp)
   8211c:	10000426 	beq	r2,zero,82130 <alt_avalon_sgdma_construct_descriptor_burst+0x380>
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_GENERATE_EOP_MSK : 0x0)        |
    (read_fixed ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_READ_FIXED_ADDRESS_MSK : 0x0)  |
    (write_fixed_or_sop ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_WRITE_FIXED_ADDRESS_MSK : 0x0) |
    (atlantic_channel ? ( (atlantic_channel & 0x0F) << 3) : 0)
   82120:	e0bfff03 	ldbu	r2,-4(fp)
   82124:	108003cc 	andi	r2,r2,15
   82128:	100490fa 	slli	r2,r2,3
   8212c:	00000106 	br	82134 <alt_avalon_sgdma_construct_descriptor_burst+0x384>
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
   82130:	0005883a 	mov	r2,zero
   82134:	1884b03a 	or	r2,r3,r2
   82138:	1007883a 	mov	r3,r2
   8213c:	e0bffa17 	ldw	r2,-24(fp)
   82140:	10c007c5 	stb	r3,31(r2)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
   82144:	e13ffa17 	ldw	r4,-24(fp)
   82148:	01400804 	movi	r5,32
   8214c:	00825200 	call	82520 <alt_dcache_flush>
}
   82150:	e037883a 	mov	sp,fp
   82154:	dfc00117 	ldw	ra,4(sp)
   82158:	df000017 	ldw	fp,0(sp)
   8215c:	dec00204 	addi	sp,sp,8
   82160:	f800283a 	ret

00082164 <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
   82164:	defff904 	addi	sp,sp,-28
   82168:	dfc00615 	stw	ra,24(sp)
   8216c:	df000515 	stw	fp,20(sp)
   82170:	df000504 	addi	fp,sp,20
   82174:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev *dev = (alt_sgdma_dev *) context;
   82178:	e0bfff17 	ldw	r2,-4(fp)
   8217c:	e0bffb15 	stw	r2,-20(fp)
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
   82180:	e0bffb17 	ldw	r2,-20(fp)
   82184:	10800317 	ldw	r2,12(r2)
   82188:	10800404 	addi	r2,r2,16
   8218c:	e0fffb17 	ldw	r3,-20(fp)
   82190:	18c00317 	ldw	r3,12(r3)
   82194:	18c00404 	addi	r3,r3,16
   82198:	18c00037 	ldwio	r3,0(r3)
   8219c:	18e00034 	orhi	r3,r3,32768
   821a0:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
   821a4:	e0bffb17 	ldw	r2,-20(fp)
   821a8:	10800317 	ldw	r2,12(r2)
   821ac:	10800404 	addi	r2,r2,16
   821b0:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
   821b4:	e0bffb17 	ldw	r2,-20(fp)
   821b8:	10800917 	ldw	r2,36(r2)
   821bc:	10001226 	beq	r2,zero,82208 <alt_avalon_sgdma_irq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   821c0:	0005303a 	rdctl	r2,status
   821c4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   821c8:	e0fffd17 	ldw	r3,-12(fp)
   821cc:	00bfff84 	movi	r2,-2
   821d0:	1884703a 	and	r2,r3,r2
   821d4:	1001703a 	wrctl	status,r2
  
  return context;
   821d8:	e0bffd17 	ldw	r2,-12(fp)
    cpu_sr = alt_irq_disable_all();
   821dc:	e0bffc15 	stw	r2,-16(fp)
    (dev->callback)(dev->callback_context);
   821e0:	e0bffb17 	ldw	r2,-20(fp)
   821e4:	10800917 	ldw	r2,36(r2)
   821e8:	e0fffb17 	ldw	r3,-20(fp)
   821ec:	18c00a17 	ldw	r3,40(r3)
   821f0:	1809883a 	mov	r4,r3
   821f4:	103ee83a 	callr	r2
   821f8:	e0bffc17 	ldw	r2,-16(fp)
   821fc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   82200:	e0bffe17 	ldw	r2,-8(fp)
   82204:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
   82208:	e037883a 	mov	sp,fp
   8220c:	dfc00117 	ldw	ra,4(sp)
   82210:	df000017 	ldw	fp,0(sp)
   82214:	dec00204 	addi	sp,sp,8
   82218:	f800283a 	ret

0008221c <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
   8221c:	defffa04 	addi	sp,sp,-24
   82220:	dfc00515 	stw	ra,20(sp)
   82224:	df000415 	stw	fp,16(sp)
   82228:	df000404 	addi	fp,sp,16
   8222c:	e13ffd15 	stw	r4,-12(fp)
   82230:	e17ffe15 	stw	r5,-8(fp)
   82234:	e1bfff15 	stw	r6,-4(fp)

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   82238:	e0bffd17 	ldw	r2,-12(fp)
   8223c:	10800317 	ldw	r2,12(r2)
   82240:	10800404 	addi	r2,r2,16
   82244:	00c00074 	movhi	r3,1
   82248:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
   8224c:	e0bffd17 	ldw	r2,-12(fp)
   82250:	10800317 	ldw	r2,12(r2)
   82254:	10800404 	addi	r2,r2,16
   82258:	00c00074 	movhi	r3,1
   8225c:	10c00035 	stwio	r3,0(r2)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
   82260:	e0bffd17 	ldw	r2,-12(fp)
   82264:	10800317 	ldw	r2,12(r2)
   82268:	10800404 	addi	r2,r2,16
   8226c:	0007883a 	mov	r3,zero
   82270:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
   82274:	e0bffd17 	ldw	r2,-12(fp)
   82278:	10800317 	ldw	r2,12(r2)
   8227c:	00c03fc4 	movi	r3,255
   82280:	10c00035 	stwio	r3,0(r2)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
   82284:	e13ffd17 	ldw	r4,-12(fp)
   82288:	d1600004 	addi	r5,gp,-32768
   8228c:	00826540 	call	82654 <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
   82290:	d8000015 	stw	zero,0(sp)
   82294:	e13ffe17 	ldw	r4,-8(fp)
   82298:	e17fff17 	ldw	r5,-4(fp)
   8229c:	01800234 	movhi	r6,8
   822a0:	31885904 	addi	r6,r6,8548
   822a4:	e1fffd17 	ldw	r7,-12(fp)
   822a8:	00828700 	call	82870 <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
   822ac:	e037883a 	mov	sp,fp
   822b0:	dfc00117 	ldw	ra,4(sp)
   822b4:	df000017 	ldw	fp,0(sp)
   822b8:	dec00204 	addi	sp,sp,8
   822bc:	f800283a 	ret

000822c0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   822c0:	defff504 	addi	sp,sp,-44
   822c4:	df000a15 	stw	fp,40(sp)
   822c8:	df000a04 	addi	fp,sp,40
   822cc:	e13ffc15 	stw	r4,-16(fp)
   822d0:	e17ffd15 	stw	r5,-12(fp)
   822d4:	e1bffe15 	stw	r6,-8(fp)
   822d8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   822dc:	e03ff615 	stw	zero,-40(fp)
   822e0:	00800274 	movhi	r2,9
   822e4:	10a58304 	addi	r2,r2,-27124
   822e8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   822ec:	10003f26 	beq	r2,zero,823ec <alt_alarm_start+0x12c>
  {
    if (alarm)
   822f0:	e0bffc17 	ldw	r2,-16(fp)
   822f4:	10003b26 	beq	r2,zero,823e4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   822f8:	e0bffc17 	ldw	r2,-16(fp)
   822fc:	e0fffe17 	ldw	r3,-8(fp)
   82300:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   82304:	e0bffc17 	ldw	r2,-16(fp)
   82308:	e0ffff17 	ldw	r3,-4(fp)
   8230c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   82310:	0005303a 	rdctl	r2,status
   82314:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   82318:	e0fff817 	ldw	r3,-32(fp)
   8231c:	00bfff84 	movi	r2,-2
   82320:	1884703a 	and	r2,r3,r2
   82324:	1001703a 	wrctl	status,r2
  
  return context;
   82328:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   8232c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   82330:	00800274 	movhi	r2,9
   82334:	10a58404 	addi	r2,r2,-27120
   82338:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   8233c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   82340:	e0fffd17 	ldw	r3,-12(fp)
   82344:	e0bff617 	ldw	r2,-40(fp)
   82348:	1885883a 	add	r2,r3,r2
   8234c:	10c00044 	addi	r3,r2,1
   82350:	e0bffc17 	ldw	r2,-16(fp)
   82354:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   82358:	e0bffc17 	ldw	r2,-16(fp)
   8235c:	10c00217 	ldw	r3,8(r2)
   82360:	e0bff617 	ldw	r2,-40(fp)
   82364:	1880042e 	bgeu	r3,r2,82378 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   82368:	e0bffc17 	ldw	r2,-16(fp)
   8236c:	00c00044 	movi	r3,1
   82370:	10c00405 	stb	r3,16(r2)
   82374:	00000206 	br	82380 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   82378:	e0bffc17 	ldw	r2,-16(fp)
   8237c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   82380:	e0fffc17 	ldw	r3,-16(fp)
   82384:	00800234 	movhi	r2,8
   82388:	109ebf04 	addi	r2,r2,31484
   8238c:	e0bff915 	stw	r2,-28(fp)
   82390:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   82394:	e0bffa17 	ldw	r2,-24(fp)
   82398:	e0fff917 	ldw	r3,-28(fp)
   8239c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   823a0:	e0bff917 	ldw	r2,-28(fp)
   823a4:	10c00017 	ldw	r3,0(r2)
   823a8:	e0bffa17 	ldw	r2,-24(fp)
   823ac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   823b0:	e0bff917 	ldw	r2,-28(fp)
   823b4:	10800017 	ldw	r2,0(r2)
   823b8:	e0fffa17 	ldw	r3,-24(fp)
   823bc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   823c0:	e0bff917 	ldw	r2,-28(fp)
   823c4:	e0fffa17 	ldw	r3,-24(fp)
   823c8:	10c00015 	stw	r3,0(r2)
   823cc:	e0bff717 	ldw	r2,-36(fp)
   823d0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   823d4:	e0bffb17 	ldw	r2,-20(fp)
   823d8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   823dc:	0005883a 	mov	r2,zero
   823e0:	00000306 	br	823f0 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   823e4:	00bffa84 	movi	r2,-22
   823e8:	00000106 	br	823f0 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   823ec:	00bfde84 	movi	r2,-134
  }
}
   823f0:	e037883a 	mov	sp,fp
   823f4:	df000017 	ldw	fp,0(sp)
   823f8:	dec00104 	addi	sp,sp,4
   823fc:	f800283a 	ret

00082400 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   82400:	defffe04 	addi	sp,sp,-8
   82404:	dfc00115 	stw	ra,4(sp)
   82408:	df000015 	stw	fp,0(sp)
   8240c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   82410:	00800234 	movhi	r2,8
   82414:	109ebd04 	addi	r2,r2,31476
   82418:	10800017 	ldw	r2,0(r2)
   8241c:	10000526 	beq	r2,zero,82434 <alt_get_errno+0x34>
   82420:	00800234 	movhi	r2,8
   82424:	109ebd04 	addi	r2,r2,31476
   82428:	10800017 	ldw	r2,0(r2)
   8242c:	103ee83a 	callr	r2
   82430:	00000206 	br	8243c <alt_get_errno+0x3c>
   82434:	00800274 	movhi	r2,9
   82438:	10a58604 	addi	r2,r2,-27112
}
   8243c:	e037883a 	mov	sp,fp
   82440:	dfc00117 	ldw	ra,4(sp)
   82444:	df000017 	ldw	fp,0(sp)
   82448:	dec00204 	addi	sp,sp,8
   8244c:	f800283a 	ret

00082450 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   82450:	defffb04 	addi	sp,sp,-20
   82454:	dfc00415 	stw	ra,16(sp)
   82458:	df000315 	stw	fp,12(sp)
   8245c:	df000304 	addi	fp,sp,12
   82460:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   82464:	e0bfff17 	ldw	r2,-4(fp)
   82468:	10000616 	blt	r2,zero,82484 <close+0x34>
   8246c:	e0bfff17 	ldw	r2,-4(fp)
   82470:	10c00324 	muli	r3,r2,12
   82474:	00800234 	movhi	r2,8
   82478:	109c4b04 	addi	r2,r2,28972
   8247c:	1885883a 	add	r2,r3,r2
   82480:	00000106 	br	82488 <close+0x38>
   82484:	0005883a 	mov	r2,zero
   82488:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   8248c:	e0bffd17 	ldw	r2,-12(fp)
   82490:	10001926 	beq	r2,zero,824f8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   82494:	e0bffd17 	ldw	r2,-12(fp)
   82498:	10800017 	ldw	r2,0(r2)
   8249c:	10800417 	ldw	r2,16(r2)
   824a0:	10000626 	beq	r2,zero,824bc <close+0x6c>
   824a4:	e0bffd17 	ldw	r2,-12(fp)
   824a8:	10800017 	ldw	r2,0(r2)
   824ac:	10800417 	ldw	r2,16(r2)
   824b0:	e13ffd17 	ldw	r4,-12(fp)
   824b4:	103ee83a 	callr	r2
   824b8:	00000106 	br	824c0 <close+0x70>
   824bc:	0005883a 	mov	r2,zero
   824c0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   824c4:	e13fff17 	ldw	r4,-4(fp)
   824c8:	0082eec0 	call	82eec <alt_release_fd>
    if (rval < 0)
   824cc:	e0bffe17 	ldw	r2,-8(fp)
   824d0:	1000070e 	bge	r2,zero,824f0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   824d4:	00824000 	call	82400 <alt_get_errno>
   824d8:	1007883a 	mov	r3,r2
   824dc:	e0bffe17 	ldw	r2,-8(fp)
   824e0:	0085c83a 	sub	r2,zero,r2
   824e4:	18800015 	stw	r2,0(r3)
      return -1;
   824e8:	00bfffc4 	movi	r2,-1
   824ec:	00000706 	br	8250c <close+0xbc>
    }
    return 0;
   824f0:	0005883a 	mov	r2,zero
   824f4:	00000506 	br	8250c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   824f8:	00824000 	call	82400 <alt_get_errno>
   824fc:	1007883a 	mov	r3,r2
   82500:	00801444 	movi	r2,81
   82504:	18800015 	stw	r2,0(r3)
    return -1;
   82508:	00bfffc4 	movi	r2,-1
  }
}
   8250c:	e037883a 	mov	sp,fp
   82510:	dfc00117 	ldw	ra,4(sp)
   82514:	df000017 	ldw	fp,0(sp)
   82518:	dec00204 	addi	sp,sp,8
   8251c:	f800283a 	ret

00082520 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
   82520:	defffb04 	addi	sp,sp,-20
   82524:	df000415 	stw	fp,16(sp)
   82528:	df000404 	addi	fp,sp,16
   8252c:	e13ffe15 	stw	r4,-8(fp)
   82530:	e17fff15 	stw	r5,-4(fp)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
   82534:	e0fffe17 	ldw	r3,-8(fp)
   82538:	e0bfff17 	ldw	r2,-4(fp)
   8253c:	1885883a 	add	r2,r3,r2
   82540:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   82544:	e0bffe17 	ldw	r2,-8(fp)
   82548:	e0bffc15 	stw	r2,-16(fp)
   8254c:	00000506 	br	82564 <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
   82550:	e0bffc17 	ldw	r2,-16(fp)
   82554:	1000001b 	flushda	0(r2)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
   82558:	e0bffc17 	ldw	r2,-16(fp)
   8255c:	10800804 	addi	r2,r2,32
   82560:	e0bffc15 	stw	r2,-16(fp)
   82564:	e0fffc17 	ldw	r3,-16(fp)
   82568:	e0bffd17 	ldw	r2,-12(fp)
   8256c:	18bff836 	bltu	r3,r2,82550 <rx_descriptor_end+0xfff824f0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
   82570:	e0bffe17 	ldw	r2,-8(fp)
   82574:	108007cc 	andi	r2,r2,31
   82578:	10000226 	beq	r2,zero,82584 <alt_dcache_flush+0x64>
  {
    ALT_FLUSH_DATA(i);
   8257c:	e0bffc17 	ldw	r2,-16(fp)
   82580:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   82584:	e037883a 	mov	sp,fp
   82588:	df000017 	ldw	fp,0(sp)
   8258c:	dec00104 	addi	sp,sp,4
   82590:	f800283a 	ret

00082594 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   82594:	defffe04 	addi	sp,sp,-8
   82598:	df000115 	stw	fp,4(sp)
   8259c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   825a0:	e03fff15 	stw	zero,-4(fp)
   825a4:	00000506 	br	825bc <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   825a8:	e0bfff17 	ldw	r2,-4(fp)
   825ac:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   825b0:	e0bfff17 	ldw	r2,-4(fp)
   825b4:	10800804 	addi	r2,r2,32
   825b8:	e0bfff15 	stw	r2,-4(fp)
   825bc:	e0bfff17 	ldw	r2,-4(fp)
   825c0:	10820030 	cmpltui	r2,r2,2048
   825c4:	103ff81e 	bne	r2,zero,825a8 <rx_descriptor_end+0xfff82548>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   825c8:	e037883a 	mov	sp,fp
   825cc:	df000017 	ldw	fp,0(sp)
   825d0:	dec00104 	addi	sp,sp,4
   825d4:	f800283a 	ret

000825d8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   825d8:	defffc04 	addi	sp,sp,-16
   825dc:	df000315 	stw	fp,12(sp)
   825e0:	df000304 	addi	fp,sp,12
   825e4:	e13ffd15 	stw	r4,-12(fp)
   825e8:	e17ffe15 	stw	r5,-8(fp)
   825ec:	e1bfff15 	stw	r6,-4(fp)
  return len;
   825f0:	e0bfff17 	ldw	r2,-4(fp)
}
   825f4:	e037883a 	mov	sp,fp
   825f8:	df000017 	ldw	fp,0(sp)
   825fc:	dec00104 	addi	sp,sp,4
   82600:	f800283a 	ret

00082604 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   82604:	defffe04 	addi	sp,sp,-8
   82608:	dfc00115 	stw	ra,4(sp)
   8260c:	df000015 	stw	fp,0(sp)
   82610:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   82614:	00800234 	movhi	r2,8
   82618:	109ebd04 	addi	r2,r2,31476
   8261c:	10800017 	ldw	r2,0(r2)
   82620:	10000526 	beq	r2,zero,82638 <alt_get_errno+0x34>
   82624:	00800234 	movhi	r2,8
   82628:	109ebd04 	addi	r2,r2,31476
   8262c:	10800017 	ldw	r2,0(r2)
   82630:	103ee83a 	callr	r2
   82634:	00000206 	br	82640 <alt_get_errno+0x3c>
   82638:	00800274 	movhi	r2,9
   8263c:	10a58604 	addi	r2,r2,-27112
}
   82640:	e037883a 	mov	sp,fp
   82644:	dfc00117 	ldw	ra,4(sp)
   82648:	df000017 	ldw	fp,0(sp)
   8264c:	dec00204 	addi	sp,sp,8
   82650:	f800283a 	ret

00082654 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   82654:	defffa04 	addi	sp,sp,-24
   82658:	dfc00515 	stw	ra,20(sp)
   8265c:	df000415 	stw	fp,16(sp)
   82660:	df000404 	addi	fp,sp,16
   82664:	e13ffe15 	stw	r4,-8(fp)
   82668:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   8266c:	e0bffe17 	ldw	r2,-8(fp)
   82670:	10000326 	beq	r2,zero,82680 <alt_dev_llist_insert+0x2c>
   82674:	e0bffe17 	ldw	r2,-8(fp)
   82678:	10800217 	ldw	r2,8(r2)
   8267c:	1000061e 	bne	r2,zero,82698 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   82680:	00826040 	call	82604 <alt_get_errno>
   82684:	1007883a 	mov	r3,r2
   82688:	00800584 	movi	r2,22
   8268c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   82690:	00bffa84 	movi	r2,-22
   82694:	00001306 	br	826e4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   82698:	e0bffe17 	ldw	r2,-8(fp)
   8269c:	e0ffff17 	ldw	r3,-4(fp)
   826a0:	e0fffc15 	stw	r3,-16(fp)
   826a4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   826a8:	e0bffd17 	ldw	r2,-12(fp)
   826ac:	e0fffc17 	ldw	r3,-16(fp)
   826b0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   826b4:	e0bffc17 	ldw	r2,-16(fp)
   826b8:	10c00017 	ldw	r3,0(r2)
   826bc:	e0bffd17 	ldw	r2,-12(fp)
   826c0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   826c4:	e0bffc17 	ldw	r2,-16(fp)
   826c8:	10800017 	ldw	r2,0(r2)
   826cc:	e0fffd17 	ldw	r3,-12(fp)
   826d0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   826d4:	e0bffc17 	ldw	r2,-16(fp)
   826d8:	e0fffd17 	ldw	r3,-12(fp)
   826dc:	10c00015 	stw	r3,0(r2)

  return 0;  
   826e0:	0005883a 	mov	r2,zero
}
   826e4:	e037883a 	mov	sp,fp
   826e8:	dfc00117 	ldw	ra,4(sp)
   826ec:	df000017 	ldw	fp,0(sp)
   826f0:	dec00204 	addi	sp,sp,8
   826f4:	f800283a 	ret

000826f8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   826f8:	defffd04 	addi	sp,sp,-12
   826fc:	dfc00215 	stw	ra,8(sp)
   82700:	df000115 	stw	fp,4(sp)
   82704:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   82708:	00800234 	movhi	r2,8
   8270c:	1097b104 	addi	r2,r2,24260
   82710:	e0bfff15 	stw	r2,-4(fp)
   82714:	00000606 	br	82730 <_do_ctors+0x38>
        (*ctor) (); 
   82718:	e0bfff17 	ldw	r2,-4(fp)
   8271c:	10800017 	ldw	r2,0(r2)
   82720:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   82724:	e0bfff17 	ldw	r2,-4(fp)
   82728:	10bfff04 	addi	r2,r2,-4
   8272c:	e0bfff15 	stw	r2,-4(fp)
   82730:	e0ffff17 	ldw	r3,-4(fp)
   82734:	00800234 	movhi	r2,8
   82738:	1097b204 	addi	r2,r2,24264
   8273c:	18bff62e 	bgeu	r3,r2,82718 <rx_descriptor_end+0xfff826b8>
        (*ctor) (); 
}
   82740:	e037883a 	mov	sp,fp
   82744:	dfc00117 	ldw	ra,4(sp)
   82748:	df000017 	ldw	fp,0(sp)
   8274c:	dec00204 	addi	sp,sp,8
   82750:	f800283a 	ret

00082754 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   82754:	defffd04 	addi	sp,sp,-12
   82758:	dfc00215 	stw	ra,8(sp)
   8275c:	df000115 	stw	fp,4(sp)
   82760:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   82764:	00800234 	movhi	r2,8
   82768:	1097b104 	addi	r2,r2,24260
   8276c:	e0bfff15 	stw	r2,-4(fp)
   82770:	00000606 	br	8278c <_do_dtors+0x38>
        (*dtor) (); 
   82774:	e0bfff17 	ldw	r2,-4(fp)
   82778:	10800017 	ldw	r2,0(r2)
   8277c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   82780:	e0bfff17 	ldw	r2,-4(fp)
   82784:	10bfff04 	addi	r2,r2,-4
   82788:	e0bfff15 	stw	r2,-4(fp)
   8278c:	e0ffff17 	ldw	r3,-4(fp)
   82790:	00800234 	movhi	r2,8
   82794:	1097b204 	addi	r2,r2,24264
   82798:	18bff62e 	bgeu	r3,r2,82774 <rx_descriptor_end+0xfff82714>
        (*dtor) (); 
}
   8279c:	e037883a 	mov	sp,fp
   827a0:	dfc00117 	ldw	ra,4(sp)
   827a4:	df000017 	ldw	fp,0(sp)
   827a8:	dec00204 	addi	sp,sp,8
   827ac:	f800283a 	ret

000827b0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   827b0:	defffa04 	addi	sp,sp,-24
   827b4:	dfc00515 	stw	ra,20(sp)
   827b8:	df000415 	stw	fp,16(sp)
   827bc:	df000404 	addi	fp,sp,16
   827c0:	e13ffe15 	stw	r4,-8(fp)
   827c4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   827c8:	e0bfff17 	ldw	r2,-4(fp)
   827cc:	10800017 	ldw	r2,0(r2)
   827d0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   827d4:	e13ffe17 	ldw	r4,-8(fp)
   827d8:	00837600 	call	83760 <strlen>
   827dc:	10800044 	addi	r2,r2,1
   827e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   827e4:	00000d06 	br	8281c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   827e8:	e0bffc17 	ldw	r2,-16(fp)
   827ec:	10c00217 	ldw	r3,8(r2)
   827f0:	e0bffd17 	ldw	r2,-12(fp)
   827f4:	1809883a 	mov	r4,r3
   827f8:	e17ffe17 	ldw	r5,-8(fp)
   827fc:	100d883a 	mov	r6,r2
   82800:	00834440 	call	83444 <memcmp>
   82804:	1000021e 	bne	r2,zero,82810 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   82808:	e0bffc17 	ldw	r2,-16(fp)
   8280c:	00000706 	br	8282c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   82810:	e0bffc17 	ldw	r2,-16(fp)
   82814:	10800017 	ldw	r2,0(r2)
   82818:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8281c:	e0fffc17 	ldw	r3,-16(fp)
   82820:	e0bfff17 	ldw	r2,-4(fp)
   82824:	18bff01e 	bne	r3,r2,827e8 <rx_descriptor_end+0xfff82788>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   82828:	0005883a 	mov	r2,zero
}
   8282c:	e037883a 	mov	sp,fp
   82830:	dfc00117 	ldw	ra,4(sp)
   82834:	df000017 	ldw	fp,0(sp)
   82838:	dec00204 	addi	sp,sp,8
   8283c:	f800283a 	ret

00082840 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   82840:	defffe04 	addi	sp,sp,-8
   82844:	dfc00115 	stw	ra,4(sp)
   82848:	df000015 	stw	fp,0(sp)
   8284c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   82850:	0009883a 	mov	r4,zero
   82854:	01440004 	movi	r5,4096
   82858:	00832d00 	call	832d0 <alt_icache_flush>
#endif
}
   8285c:	e037883a 	mov	sp,fp
   82860:	dfc00117 	ldw	ra,4(sp)
   82864:	df000017 	ldw	fp,0(sp)
   82868:	dec00204 	addi	sp,sp,8
   8286c:	f800283a 	ret

00082870 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   82870:	defff904 	addi	sp,sp,-28
   82874:	dfc00615 	stw	ra,24(sp)
   82878:	df000515 	stw	fp,20(sp)
   8287c:	df000504 	addi	fp,sp,20
   82880:	e13ffc15 	stw	r4,-16(fp)
   82884:	e17ffd15 	stw	r5,-12(fp)
   82888:	e1bffe15 	stw	r6,-8(fp)
   8288c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   82890:	e0800217 	ldw	r2,8(fp)
   82894:	d8800015 	stw	r2,0(sp)
   82898:	e13ffc17 	ldw	r4,-16(fp)
   8289c:	e17ffd17 	ldw	r5,-12(fp)
   828a0:	e1bffe17 	ldw	r6,-8(fp)
   828a4:	e1ffff17 	ldw	r7,-4(fp)
   828a8:	0082a500 	call	82a50 <alt_iic_isr_register>
}  
   828ac:	e037883a 	mov	sp,fp
   828b0:	dfc00117 	ldw	ra,4(sp)
   828b4:	df000017 	ldw	fp,0(sp)
   828b8:	dec00204 	addi	sp,sp,8
   828bc:	f800283a 	ret

000828c0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   828c0:	defff904 	addi	sp,sp,-28
   828c4:	df000615 	stw	fp,24(sp)
   828c8:	df000604 	addi	fp,sp,24
   828cc:	e13ffe15 	stw	r4,-8(fp)
   828d0:	e17fff15 	stw	r5,-4(fp)
   828d4:	e0bfff17 	ldw	r2,-4(fp)
   828d8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   828dc:	0005303a 	rdctl	r2,status
   828e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   828e4:	e0fffb17 	ldw	r3,-20(fp)
   828e8:	00bfff84 	movi	r2,-2
   828ec:	1884703a 	and	r2,r3,r2
   828f0:	1001703a 	wrctl	status,r2
  
  return context;
   828f4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   828f8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   828fc:	e0bffa17 	ldw	r2,-24(fp)
   82900:	00c00044 	movi	r3,1
   82904:	1884983a 	sll	r2,r3,r2
   82908:	1007883a 	mov	r3,r2
   8290c:	00800274 	movhi	r2,9
   82910:	10a58204 	addi	r2,r2,-27128
   82914:	10800017 	ldw	r2,0(r2)
   82918:	1886b03a 	or	r3,r3,r2
   8291c:	00800274 	movhi	r2,9
   82920:	10a58204 	addi	r2,r2,-27128
   82924:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   82928:	00800274 	movhi	r2,9
   8292c:	10a58204 	addi	r2,r2,-27128
   82930:	10800017 	ldw	r2,0(r2)
   82934:	100170fa 	wrctl	ienable,r2
   82938:	e0bffc17 	ldw	r2,-16(fp)
   8293c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   82940:	e0bffd17 	ldw	r2,-12(fp)
   82944:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   82948:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   8294c:	0001883a 	nop
}
   82950:	e037883a 	mov	sp,fp
   82954:	df000017 	ldw	fp,0(sp)
   82958:	dec00104 	addi	sp,sp,4
   8295c:	f800283a 	ret

00082960 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   82960:	defff904 	addi	sp,sp,-28
   82964:	df000615 	stw	fp,24(sp)
   82968:	df000604 	addi	fp,sp,24
   8296c:	e13ffe15 	stw	r4,-8(fp)
   82970:	e17fff15 	stw	r5,-4(fp)
   82974:	e0bfff17 	ldw	r2,-4(fp)
   82978:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8297c:	0005303a 	rdctl	r2,status
   82980:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   82984:	e0fffb17 	ldw	r3,-20(fp)
   82988:	00bfff84 	movi	r2,-2
   8298c:	1884703a 	and	r2,r3,r2
   82990:	1001703a 	wrctl	status,r2
  
  return context;
   82994:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   82998:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   8299c:	e0bffa17 	ldw	r2,-24(fp)
   829a0:	00c00044 	movi	r3,1
   829a4:	1884983a 	sll	r2,r3,r2
   829a8:	0084303a 	nor	r2,zero,r2
   829ac:	1007883a 	mov	r3,r2
   829b0:	00800274 	movhi	r2,9
   829b4:	10a58204 	addi	r2,r2,-27128
   829b8:	10800017 	ldw	r2,0(r2)
   829bc:	1886703a 	and	r3,r3,r2
   829c0:	00800274 	movhi	r2,9
   829c4:	10a58204 	addi	r2,r2,-27128
   829c8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   829cc:	00800274 	movhi	r2,9
   829d0:	10a58204 	addi	r2,r2,-27128
   829d4:	10800017 	ldw	r2,0(r2)
   829d8:	100170fa 	wrctl	ienable,r2
   829dc:	e0bffc17 	ldw	r2,-16(fp)
   829e0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   829e4:	e0bffd17 	ldw	r2,-12(fp)
   829e8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   829ec:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   829f0:	0001883a 	nop
}
   829f4:	e037883a 	mov	sp,fp
   829f8:	df000017 	ldw	fp,0(sp)
   829fc:	dec00104 	addi	sp,sp,4
   82a00:	f800283a 	ret

00082a04 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   82a04:	defffc04 	addi	sp,sp,-16
   82a08:	df000315 	stw	fp,12(sp)
   82a0c:	df000304 	addi	fp,sp,12
   82a10:	e13ffe15 	stw	r4,-8(fp)
   82a14:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   82a18:	000530fa 	rdctl	r2,ienable
   82a1c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   82a20:	e0bfff17 	ldw	r2,-4(fp)
   82a24:	00c00044 	movi	r3,1
   82a28:	1884983a 	sll	r2,r3,r2
   82a2c:	1007883a 	mov	r3,r2
   82a30:	e0bffd17 	ldw	r2,-12(fp)
   82a34:	1884703a 	and	r2,r3,r2
   82a38:	1004c03a 	cmpne	r2,r2,zero
   82a3c:	10803fcc 	andi	r2,r2,255
}
   82a40:	e037883a 	mov	sp,fp
   82a44:	df000017 	ldw	fp,0(sp)
   82a48:	dec00104 	addi	sp,sp,4
   82a4c:	f800283a 	ret

00082a50 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   82a50:	defff504 	addi	sp,sp,-44
   82a54:	dfc00a15 	stw	ra,40(sp)
   82a58:	df000915 	stw	fp,36(sp)
   82a5c:	df000904 	addi	fp,sp,36
   82a60:	e13ffc15 	stw	r4,-16(fp)
   82a64:	e17ffd15 	stw	r5,-12(fp)
   82a68:	e1bffe15 	stw	r6,-8(fp)
   82a6c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   82a70:	00bffa84 	movi	r2,-22
   82a74:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   82a78:	e0bffd17 	ldw	r2,-12(fp)
   82a7c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   82a80:	e0bff817 	ldw	r2,-32(fp)
   82a84:	10800808 	cmpgei	r2,r2,32
   82a88:	1000271e 	bne	r2,zero,82b28 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   82a8c:	0005303a 	rdctl	r2,status
   82a90:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   82a94:	e0fffa17 	ldw	r3,-24(fp)
   82a98:	00bfff84 	movi	r2,-2
   82a9c:	1884703a 	and	r2,r3,r2
   82aa0:	1001703a 	wrctl	status,r2
  
  return context;
   82aa4:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   82aa8:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   82aac:	00800274 	movhi	r2,9
   82ab0:	10a69404 	addi	r2,r2,-26032
   82ab4:	e0fff817 	ldw	r3,-32(fp)
   82ab8:	180690fa 	slli	r3,r3,3
   82abc:	10c5883a 	add	r2,r2,r3
   82ac0:	e0fffe17 	ldw	r3,-8(fp)
   82ac4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   82ac8:	00800274 	movhi	r2,9
   82acc:	10a69404 	addi	r2,r2,-26032
   82ad0:	e0fff817 	ldw	r3,-32(fp)
   82ad4:	180690fa 	slli	r3,r3,3
   82ad8:	10c5883a 	add	r2,r2,r3
   82adc:	10800104 	addi	r2,r2,4
   82ae0:	e0ffff17 	ldw	r3,-4(fp)
   82ae4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   82ae8:	e0bffe17 	ldw	r2,-8(fp)
   82aec:	10000526 	beq	r2,zero,82b04 <alt_iic_isr_register+0xb4>
   82af0:	e0bff817 	ldw	r2,-32(fp)
   82af4:	e13ffc17 	ldw	r4,-16(fp)
   82af8:	100b883a 	mov	r5,r2
   82afc:	00828c00 	call	828c0 <alt_ic_irq_enable>
   82b00:	00000406 	br	82b14 <alt_iic_isr_register+0xc4>
   82b04:	e0bff817 	ldw	r2,-32(fp)
   82b08:	e13ffc17 	ldw	r4,-16(fp)
   82b0c:	100b883a 	mov	r5,r2
   82b10:	00829600 	call	82960 <alt_ic_irq_disable>
   82b14:	e0bff715 	stw	r2,-36(fp)
   82b18:	e0bff917 	ldw	r2,-28(fp)
   82b1c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   82b20:	e0bffb17 	ldw	r2,-20(fp)
   82b24:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   82b28:	e0bff717 	ldw	r2,-36(fp)
}
   82b2c:	e037883a 	mov	sp,fp
   82b30:	dfc00117 	ldw	ra,4(sp)
   82b34:	df000017 	ldw	fp,0(sp)
   82b38:	dec00204 	addi	sp,sp,8
   82b3c:	f800283a 	ret

00082b40 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   82b40:	defff904 	addi	sp,sp,-28
   82b44:	dfc00615 	stw	ra,24(sp)
   82b48:	df000515 	stw	fp,20(sp)
   82b4c:	df000504 	addi	fp,sp,20
   82b50:	e13ffc15 	stw	r4,-16(fp)
   82b54:	e17ffd15 	stw	r5,-12(fp)
   82b58:	e1bffe15 	stw	r6,-8(fp)
   82b5c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   82b60:	e13ffd17 	ldw	r4,-12(fp)
   82b64:	e17ffe17 	ldw	r5,-8(fp)
   82b68:	e1bfff17 	ldw	r6,-4(fp)
   82b6c:	0082d940 	call	82d94 <open>
   82b70:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   82b74:	e0bffb17 	ldw	r2,-20(fp)
   82b78:	10001c16 	blt	r2,zero,82bec <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   82b7c:	00800234 	movhi	r2,8
   82b80:	109c4b04 	addi	r2,r2,28972
   82b84:	e0fffb17 	ldw	r3,-20(fp)
   82b88:	18c00324 	muli	r3,r3,12
   82b8c:	10c5883a 	add	r2,r2,r3
   82b90:	10c00017 	ldw	r3,0(r2)
   82b94:	e0bffc17 	ldw	r2,-16(fp)
   82b98:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   82b9c:	00800234 	movhi	r2,8
   82ba0:	109c4b04 	addi	r2,r2,28972
   82ba4:	e0fffb17 	ldw	r3,-20(fp)
   82ba8:	18c00324 	muli	r3,r3,12
   82bac:	10c5883a 	add	r2,r2,r3
   82bb0:	10800104 	addi	r2,r2,4
   82bb4:	10c00017 	ldw	r3,0(r2)
   82bb8:	e0bffc17 	ldw	r2,-16(fp)
   82bbc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   82bc0:	00800234 	movhi	r2,8
   82bc4:	109c4b04 	addi	r2,r2,28972
   82bc8:	e0fffb17 	ldw	r3,-20(fp)
   82bcc:	18c00324 	muli	r3,r3,12
   82bd0:	10c5883a 	add	r2,r2,r3
   82bd4:	10800204 	addi	r2,r2,8
   82bd8:	10c00017 	ldw	r3,0(r2)
   82bdc:	e0bffc17 	ldw	r2,-16(fp)
   82be0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   82be4:	e13ffb17 	ldw	r4,-20(fp)
   82be8:	0082eec0 	call	82eec <alt_release_fd>
  }
} 
   82bec:	e037883a 	mov	sp,fp
   82bf0:	dfc00117 	ldw	ra,4(sp)
   82bf4:	df000017 	ldw	fp,0(sp)
   82bf8:	dec00204 	addi	sp,sp,8
   82bfc:	f800283a 	ret

00082c00 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   82c00:	defffb04 	addi	sp,sp,-20
   82c04:	dfc00415 	stw	ra,16(sp)
   82c08:	df000315 	stw	fp,12(sp)
   82c0c:	df000304 	addi	fp,sp,12
   82c10:	e13ffd15 	stw	r4,-12(fp)
   82c14:	e17ffe15 	stw	r5,-8(fp)
   82c18:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   82c1c:	01000234 	movhi	r4,8
   82c20:	211c4e04 	addi	r4,r4,28984
   82c24:	e17ffd17 	ldw	r5,-12(fp)
   82c28:	01800044 	movi	r6,1
   82c2c:	01c07fc4 	movi	r7,511
   82c30:	0082b400 	call	82b40 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   82c34:	01000234 	movhi	r4,8
   82c38:	211c4b04 	addi	r4,r4,28972
   82c3c:	e17ffe17 	ldw	r5,-8(fp)
   82c40:	000d883a 	mov	r6,zero
   82c44:	01c07fc4 	movi	r7,511
   82c48:	0082b400 	call	82b40 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   82c4c:	01000234 	movhi	r4,8
   82c50:	211c5104 	addi	r4,r4,28996
   82c54:	e17fff17 	ldw	r5,-4(fp)
   82c58:	01800044 	movi	r6,1
   82c5c:	01c07fc4 	movi	r7,511
   82c60:	0082b400 	call	82b40 <alt_open_fd>
}  
   82c64:	e037883a 	mov	sp,fp
   82c68:	dfc00117 	ldw	ra,4(sp)
   82c6c:	df000017 	ldw	fp,0(sp)
   82c70:	dec00204 	addi	sp,sp,8
   82c74:	f800283a 	ret

00082c78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   82c78:	defffe04 	addi	sp,sp,-8
   82c7c:	dfc00115 	stw	ra,4(sp)
   82c80:	df000015 	stw	fp,0(sp)
   82c84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   82c88:	00800234 	movhi	r2,8
   82c8c:	109ebd04 	addi	r2,r2,31476
   82c90:	10800017 	ldw	r2,0(r2)
   82c94:	10000526 	beq	r2,zero,82cac <alt_get_errno+0x34>
   82c98:	00800234 	movhi	r2,8
   82c9c:	109ebd04 	addi	r2,r2,31476
   82ca0:	10800017 	ldw	r2,0(r2)
   82ca4:	103ee83a 	callr	r2
   82ca8:	00000206 	br	82cb4 <alt_get_errno+0x3c>
   82cac:	00800274 	movhi	r2,9
   82cb0:	10a58604 	addi	r2,r2,-27112
}
   82cb4:	e037883a 	mov	sp,fp
   82cb8:	dfc00117 	ldw	ra,4(sp)
   82cbc:	df000017 	ldw	fp,0(sp)
   82cc0:	dec00204 	addi	sp,sp,8
   82cc4:	f800283a 	ret

00082cc8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   82cc8:	defffd04 	addi	sp,sp,-12
   82ccc:	df000215 	stw	fp,8(sp)
   82cd0:	df000204 	addi	fp,sp,8
   82cd4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   82cd8:	e0bfff17 	ldw	r2,-4(fp)
   82cdc:	10800217 	ldw	r2,8(r2)
   82ce0:	10d00034 	orhi	r3,r2,16384
   82ce4:	e0bfff17 	ldw	r2,-4(fp)
   82ce8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   82cec:	e03ffe15 	stw	zero,-8(fp)
   82cf0:	00001d06 	br	82d68 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   82cf4:	00800234 	movhi	r2,8
   82cf8:	109c4b04 	addi	r2,r2,28972
   82cfc:	e0fffe17 	ldw	r3,-8(fp)
   82d00:	18c00324 	muli	r3,r3,12
   82d04:	10c5883a 	add	r2,r2,r3
   82d08:	10c00017 	ldw	r3,0(r2)
   82d0c:	e0bfff17 	ldw	r2,-4(fp)
   82d10:	10800017 	ldw	r2,0(r2)
   82d14:	1880111e 	bne	r3,r2,82d5c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   82d18:	00800234 	movhi	r2,8
   82d1c:	109c4b04 	addi	r2,r2,28972
   82d20:	e0fffe17 	ldw	r3,-8(fp)
   82d24:	18c00324 	muli	r3,r3,12
   82d28:	10c5883a 	add	r2,r2,r3
   82d2c:	10800204 	addi	r2,r2,8
   82d30:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   82d34:	1000090e 	bge	r2,zero,82d5c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   82d38:	e0bffe17 	ldw	r2,-8(fp)
   82d3c:	10c00324 	muli	r3,r2,12
   82d40:	00800234 	movhi	r2,8
   82d44:	109c4b04 	addi	r2,r2,28972
   82d48:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   82d4c:	e0bfff17 	ldw	r2,-4(fp)
   82d50:	18800226 	beq	r3,r2,82d5c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   82d54:	00bffcc4 	movi	r2,-13
   82d58:	00000a06 	br	82d84 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   82d5c:	e0bffe17 	ldw	r2,-8(fp)
   82d60:	10800044 	addi	r2,r2,1
   82d64:	e0bffe15 	stw	r2,-8(fp)
   82d68:	00800234 	movhi	r2,8
   82d6c:	109ebc04 	addi	r2,r2,31472
   82d70:	10800017 	ldw	r2,0(r2)
   82d74:	1007883a 	mov	r3,r2
   82d78:	e0bffe17 	ldw	r2,-8(fp)
   82d7c:	18bfdd2e 	bgeu	r3,r2,82cf4 <rx_descriptor_end+0xfff82c94>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   82d80:	0005883a 	mov	r2,zero
}
   82d84:	e037883a 	mov	sp,fp
   82d88:	df000017 	ldw	fp,0(sp)
   82d8c:	dec00104 	addi	sp,sp,4
   82d90:	f800283a 	ret

00082d94 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   82d94:	defff604 	addi	sp,sp,-40
   82d98:	dfc00915 	stw	ra,36(sp)
   82d9c:	df000815 	stw	fp,32(sp)
   82da0:	df000804 	addi	fp,sp,32
   82da4:	e13ffd15 	stw	r4,-12(fp)
   82da8:	e17ffe15 	stw	r5,-8(fp)
   82dac:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   82db0:	00bfffc4 	movi	r2,-1
   82db4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   82db8:	00bffb44 	movi	r2,-19
   82dbc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   82dc0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   82dc4:	e13ffd17 	ldw	r4,-12(fp)
   82dc8:	01400234 	movhi	r5,8
   82dcc:	295eba04 	addi	r5,r5,31464
   82dd0:	00827b00 	call	827b0 <alt_find_dev>
   82dd4:	e0bff815 	stw	r2,-32(fp)
   82dd8:	e0bff817 	ldw	r2,-32(fp)
   82ddc:	1000051e 	bne	r2,zero,82df4 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   82de0:	e13ffd17 	ldw	r4,-12(fp)
   82de4:	00831080 	call	83108 <alt_find_file>
   82de8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   82dec:	00800044 	movi	r2,1
   82df0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   82df4:	e0bff817 	ldw	r2,-32(fp)
   82df8:	10002926 	beq	r2,zero,82ea0 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   82dfc:	e13ff817 	ldw	r4,-32(fp)
   82e00:	008321c0 	call	8321c <alt_get_fd>
   82e04:	e0bff915 	stw	r2,-28(fp)
   82e08:	e0bff917 	ldw	r2,-28(fp)
   82e0c:	1000030e 	bge	r2,zero,82e1c <open+0x88>
    {
      status = index;
   82e10:	e0bff917 	ldw	r2,-28(fp)
   82e14:	e0bffa15 	stw	r2,-24(fp)
   82e18:	00002306 	br	82ea8 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   82e1c:	e0bff917 	ldw	r2,-28(fp)
   82e20:	10c00324 	muli	r3,r2,12
   82e24:	00800234 	movhi	r2,8
   82e28:	109c4b04 	addi	r2,r2,28972
   82e2c:	1885883a 	add	r2,r3,r2
   82e30:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   82e34:	e0fffe17 	ldw	r3,-8(fp)
   82e38:	00900034 	movhi	r2,16384
   82e3c:	10bfffc4 	addi	r2,r2,-1
   82e40:	1886703a 	and	r3,r3,r2
   82e44:	e0bffc17 	ldw	r2,-16(fp)
   82e48:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   82e4c:	e0bffb17 	ldw	r2,-20(fp)
   82e50:	1000051e 	bne	r2,zero,82e68 <open+0xd4>
   82e54:	e13ffc17 	ldw	r4,-16(fp)
   82e58:	0082cc80 	call	82cc8 <alt_file_locked>
   82e5c:	e0bffa15 	stw	r2,-24(fp)
   82e60:	e0bffa17 	ldw	r2,-24(fp)
   82e64:	10001016 	blt	r2,zero,82ea8 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   82e68:	e0bff817 	ldw	r2,-32(fp)
   82e6c:	10800317 	ldw	r2,12(r2)
   82e70:	10000826 	beq	r2,zero,82e94 <open+0x100>
   82e74:	e0bff817 	ldw	r2,-32(fp)
   82e78:	10800317 	ldw	r2,12(r2)
   82e7c:	e13ffc17 	ldw	r4,-16(fp)
   82e80:	e17ffd17 	ldw	r5,-12(fp)
   82e84:	e1bffe17 	ldw	r6,-8(fp)
   82e88:	e1ffff17 	ldw	r7,-4(fp)
   82e8c:	103ee83a 	callr	r2
   82e90:	00000106 	br	82e98 <open+0x104>
   82e94:	0005883a 	mov	r2,zero
   82e98:	e0bffa15 	stw	r2,-24(fp)
   82e9c:	00000206 	br	82ea8 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   82ea0:	00bffb44 	movi	r2,-19
   82ea4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   82ea8:	e0bffa17 	ldw	r2,-24(fp)
   82eac:	1000090e 	bge	r2,zero,82ed4 <open+0x140>
  {
    alt_release_fd (index);  
   82eb0:	e13ff917 	ldw	r4,-28(fp)
   82eb4:	0082eec0 	call	82eec <alt_release_fd>
    ALT_ERRNO = -status;
   82eb8:	0082c780 	call	82c78 <alt_get_errno>
   82ebc:	1007883a 	mov	r3,r2
   82ec0:	e0bffa17 	ldw	r2,-24(fp)
   82ec4:	0085c83a 	sub	r2,zero,r2
   82ec8:	18800015 	stw	r2,0(r3)
    return -1;
   82ecc:	00bfffc4 	movi	r2,-1
   82ed0:	00000106 	br	82ed8 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   82ed4:	e0bff917 	ldw	r2,-28(fp)
}
   82ed8:	e037883a 	mov	sp,fp
   82edc:	dfc00117 	ldw	ra,4(sp)
   82ee0:	df000017 	ldw	fp,0(sp)
   82ee4:	dec00204 	addi	sp,sp,8
   82ee8:	f800283a 	ret

00082eec <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   82eec:	defffe04 	addi	sp,sp,-8
   82ef0:	df000115 	stw	fp,4(sp)
   82ef4:	df000104 	addi	fp,sp,4
   82ef8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   82efc:	e0bfff17 	ldw	r2,-4(fp)
   82f00:	108000d0 	cmplti	r2,r2,3
   82f04:	10000d1e 	bne	r2,zero,82f3c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   82f08:	00800234 	movhi	r2,8
   82f0c:	109c4b04 	addi	r2,r2,28972
   82f10:	e0ffff17 	ldw	r3,-4(fp)
   82f14:	18c00324 	muli	r3,r3,12
   82f18:	10c5883a 	add	r2,r2,r3
   82f1c:	10800204 	addi	r2,r2,8
   82f20:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   82f24:	00800234 	movhi	r2,8
   82f28:	109c4b04 	addi	r2,r2,28972
   82f2c:	e0ffff17 	ldw	r3,-4(fp)
   82f30:	18c00324 	muli	r3,r3,12
   82f34:	10c5883a 	add	r2,r2,r3
   82f38:	10000015 	stw	zero,0(r2)
  }
}
   82f3c:	e037883a 	mov	sp,fp
   82f40:	df000017 	ldw	fp,0(sp)
   82f44:	dec00104 	addi	sp,sp,4
   82f48:	f800283a 	ret

00082f4c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   82f4c:	defffa04 	addi	sp,sp,-24
   82f50:	df000515 	stw	fp,20(sp)
   82f54:	df000504 	addi	fp,sp,20
   82f58:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   82f5c:	0005303a 	rdctl	r2,status
   82f60:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   82f64:	e0fffc17 	ldw	r3,-16(fp)
   82f68:	00bfff84 	movi	r2,-2
   82f6c:	1884703a 	and	r2,r3,r2
   82f70:	1001703a 	wrctl	status,r2
  
  return context;
   82f74:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   82f78:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   82f7c:	e0bfff17 	ldw	r2,-4(fp)
   82f80:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   82f84:	e0bffd17 	ldw	r2,-12(fp)
   82f88:	10800017 	ldw	r2,0(r2)
   82f8c:	e0fffd17 	ldw	r3,-12(fp)
   82f90:	18c00117 	ldw	r3,4(r3)
   82f94:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   82f98:	e0bffd17 	ldw	r2,-12(fp)
   82f9c:	10800117 	ldw	r2,4(r2)
   82fa0:	e0fffd17 	ldw	r3,-12(fp)
   82fa4:	18c00017 	ldw	r3,0(r3)
   82fa8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   82fac:	e0bffd17 	ldw	r2,-12(fp)
   82fb0:	e0fffd17 	ldw	r3,-12(fp)
   82fb4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   82fb8:	e0bffd17 	ldw	r2,-12(fp)
   82fbc:	e0fffd17 	ldw	r3,-12(fp)
   82fc0:	10c00015 	stw	r3,0(r2)
   82fc4:	e0bffb17 	ldw	r2,-20(fp)
   82fc8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   82fcc:	e0bffe17 	ldw	r2,-8(fp)
   82fd0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   82fd4:	e037883a 	mov	sp,fp
   82fd8:	df000017 	ldw	fp,0(sp)
   82fdc:	dec00104 	addi	sp,sp,4
   82fe0:	f800283a 	ret

00082fe4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   82fe4:	defffb04 	addi	sp,sp,-20
   82fe8:	dfc00415 	stw	ra,16(sp)
   82fec:	df000315 	stw	fp,12(sp)
   82ff0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   82ff4:	d0a00917 	ldw	r2,-32732(gp)
   82ff8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   82ffc:	d0a6ce17 	ldw	r2,-25800(gp)
   83000:	10800044 	addi	r2,r2,1
   83004:	d0a6ce15 	stw	r2,-25800(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   83008:	00002e06 	br	830c4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   8300c:	e0bffd17 	ldw	r2,-12(fp)
   83010:	10800017 	ldw	r2,0(r2)
   83014:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   83018:	e0bffd17 	ldw	r2,-12(fp)
   8301c:	10800403 	ldbu	r2,16(r2)
   83020:	10803fcc 	andi	r2,r2,255
   83024:	10000426 	beq	r2,zero,83038 <alt_tick+0x54>
   83028:	d0a6ce17 	ldw	r2,-25800(gp)
   8302c:	1000021e 	bne	r2,zero,83038 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   83030:	e0bffd17 	ldw	r2,-12(fp)
   83034:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   83038:	e0bffd17 	ldw	r2,-12(fp)
   8303c:	10800217 	ldw	r2,8(r2)
   83040:	d0e6ce17 	ldw	r3,-25800(gp)
   83044:	18801d36 	bltu	r3,r2,830bc <alt_tick+0xd8>
   83048:	e0bffd17 	ldw	r2,-12(fp)
   8304c:	10800403 	ldbu	r2,16(r2)
   83050:	10803fcc 	andi	r2,r2,255
   83054:	1000191e 	bne	r2,zero,830bc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   83058:	e0bffd17 	ldw	r2,-12(fp)
   8305c:	10800317 	ldw	r2,12(r2)
   83060:	e0fffd17 	ldw	r3,-12(fp)
   83064:	18c00517 	ldw	r3,20(r3)
   83068:	1809883a 	mov	r4,r3
   8306c:	103ee83a 	callr	r2
   83070:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   83074:	e0bfff17 	ldw	r2,-4(fp)
   83078:	1000031e 	bne	r2,zero,83088 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   8307c:	e13ffd17 	ldw	r4,-12(fp)
   83080:	0082f4c0 	call	82f4c <alt_alarm_stop>
   83084:	00000d06 	br	830bc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   83088:	e0bffd17 	ldw	r2,-12(fp)
   8308c:	10c00217 	ldw	r3,8(r2)
   83090:	e0bfff17 	ldw	r2,-4(fp)
   83094:	1887883a 	add	r3,r3,r2
   83098:	e0bffd17 	ldw	r2,-12(fp)
   8309c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   830a0:	e0bffd17 	ldw	r2,-12(fp)
   830a4:	10c00217 	ldw	r3,8(r2)
   830a8:	d0a6ce17 	ldw	r2,-25800(gp)
   830ac:	1880032e 	bgeu	r3,r2,830bc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   830b0:	e0bffd17 	ldw	r2,-12(fp)
   830b4:	00c00044 	movi	r3,1
   830b8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   830bc:	e0bffe17 	ldw	r2,-8(fp)
   830c0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   830c4:	e0fffd17 	ldw	r3,-12(fp)
   830c8:	d0a00904 	addi	r2,gp,-32732
   830cc:	18bfcf1e 	bne	r3,r2,8300c <rx_descriptor_end+0xfff82fac>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   830d0:	0001883a 	nop
}
   830d4:	e037883a 	mov	sp,fp
   830d8:	dfc00117 	ldw	ra,4(sp)
   830dc:	df000017 	ldw	fp,0(sp)
   830e0:	dec00204 	addi	sp,sp,8
   830e4:	f800283a 	ret

000830e8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   830e8:	deffff04 	addi	sp,sp,-4
   830ec:	df000015 	stw	fp,0(sp)
   830f0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   830f4:	000170fa 	wrctl	ienable,zero
}
   830f8:	e037883a 	mov	sp,fp
   830fc:	df000017 	ldw	fp,0(sp)
   83100:	dec00104 	addi	sp,sp,4
   83104:	f800283a 	ret

00083108 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   83108:	defffb04 	addi	sp,sp,-20
   8310c:	dfc00415 	stw	ra,16(sp)
   83110:	df000315 	stw	fp,12(sp)
   83114:	df000304 	addi	fp,sp,12
   83118:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   8311c:	00800234 	movhi	r2,8
   83120:	109eb804 	addi	r2,r2,31456
   83124:	10800017 	ldw	r2,0(r2)
   83128:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8312c:	00003106 	br	831f4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   83130:	e0bffd17 	ldw	r2,-12(fp)
   83134:	10800217 	ldw	r2,8(r2)
   83138:	1009883a 	mov	r4,r2
   8313c:	00837600 	call	83760 <strlen>
   83140:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   83144:	e0bffd17 	ldw	r2,-12(fp)
   83148:	10c00217 	ldw	r3,8(r2)
   8314c:	e0bffe17 	ldw	r2,-8(fp)
   83150:	10bfffc4 	addi	r2,r2,-1
   83154:	1885883a 	add	r2,r3,r2
   83158:	10800003 	ldbu	r2,0(r2)
   8315c:	10803fcc 	andi	r2,r2,255
   83160:	1080201c 	xori	r2,r2,128
   83164:	10bfe004 	addi	r2,r2,-128
   83168:	10800bd8 	cmpnei	r2,r2,47
   8316c:	1000031e 	bne	r2,zero,8317c <alt_find_file+0x74>
    {
      len -= 1;
   83170:	e0bffe17 	ldw	r2,-8(fp)
   83174:	10bfffc4 	addi	r2,r2,-1
   83178:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   8317c:	e0bffe17 	ldw	r2,-8(fp)
   83180:	e0ffff17 	ldw	r3,-4(fp)
   83184:	1885883a 	add	r2,r3,r2
   83188:	10800003 	ldbu	r2,0(r2)
   8318c:	10803fcc 	andi	r2,r2,255
   83190:	1080201c 	xori	r2,r2,128
   83194:	10bfe004 	addi	r2,r2,-128
   83198:	10800be0 	cmpeqi	r2,r2,47
   8319c:	1000081e 	bne	r2,zero,831c0 <alt_find_file+0xb8>
   831a0:	e0bffe17 	ldw	r2,-8(fp)
   831a4:	e0ffff17 	ldw	r3,-4(fp)
   831a8:	1885883a 	add	r2,r3,r2
   831ac:	10800003 	ldbu	r2,0(r2)
   831b0:	10803fcc 	andi	r2,r2,255
   831b4:	1080201c 	xori	r2,r2,128
   831b8:	10bfe004 	addi	r2,r2,-128
   831bc:	10000a1e 	bne	r2,zero,831e8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   831c0:	e0bffd17 	ldw	r2,-12(fp)
   831c4:	10c00217 	ldw	r3,8(r2)
   831c8:	e0bffe17 	ldw	r2,-8(fp)
   831cc:	1809883a 	mov	r4,r3
   831d0:	e17fff17 	ldw	r5,-4(fp)
   831d4:	100d883a 	mov	r6,r2
   831d8:	00834440 	call	83444 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   831dc:	1000021e 	bne	r2,zero,831e8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   831e0:	e0bffd17 	ldw	r2,-12(fp)
   831e4:	00000806 	br	83208 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   831e8:	e0bffd17 	ldw	r2,-12(fp)
   831ec:	10800017 	ldw	r2,0(r2)
   831f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   831f4:	e0fffd17 	ldw	r3,-12(fp)
   831f8:	00800234 	movhi	r2,8
   831fc:	109eb804 	addi	r2,r2,31456
   83200:	18bfcb1e 	bne	r3,r2,83130 <rx_descriptor_end+0xfff830d0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   83204:	0005883a 	mov	r2,zero
}
   83208:	e037883a 	mov	sp,fp
   8320c:	dfc00117 	ldw	ra,4(sp)
   83210:	df000017 	ldw	fp,0(sp)
   83214:	dec00204 	addi	sp,sp,8
   83218:	f800283a 	ret

0008321c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   8321c:	defffc04 	addi	sp,sp,-16
   83220:	df000315 	stw	fp,12(sp)
   83224:	df000304 	addi	fp,sp,12
   83228:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   8322c:	00bffa04 	movi	r2,-24
   83230:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   83234:	e03ffd15 	stw	zero,-12(fp)
   83238:	00001d06 	br	832b0 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   8323c:	00800234 	movhi	r2,8
   83240:	109c4b04 	addi	r2,r2,28972
   83244:	e0fffd17 	ldw	r3,-12(fp)
   83248:	18c00324 	muli	r3,r3,12
   8324c:	10c5883a 	add	r2,r2,r3
   83250:	10800017 	ldw	r2,0(r2)
   83254:	1000131e 	bne	r2,zero,832a4 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   83258:	00800234 	movhi	r2,8
   8325c:	109c4b04 	addi	r2,r2,28972
   83260:	e0fffd17 	ldw	r3,-12(fp)
   83264:	18c00324 	muli	r3,r3,12
   83268:	10c5883a 	add	r2,r2,r3
   8326c:	e0ffff17 	ldw	r3,-4(fp)
   83270:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   83274:	00800234 	movhi	r2,8
   83278:	109ebc04 	addi	r2,r2,31472
   8327c:	10c00017 	ldw	r3,0(r2)
   83280:	e0bffd17 	ldw	r2,-12(fp)
   83284:	1880040e 	bge	r3,r2,83298 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   83288:	00800234 	movhi	r2,8
   8328c:	109ebc04 	addi	r2,r2,31472
   83290:	e0fffd17 	ldw	r3,-12(fp)
   83294:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   83298:	e0bffd17 	ldw	r2,-12(fp)
   8329c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   832a0:	00000606 	br	832bc <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   832a4:	e0bffd17 	ldw	r2,-12(fp)
   832a8:	10800044 	addi	r2,r2,1
   832ac:	e0bffd15 	stw	r2,-12(fp)
   832b0:	e0bffd17 	ldw	r2,-12(fp)
   832b4:	10800810 	cmplti	r2,r2,32
   832b8:	103fe01e 	bne	r2,zero,8323c <rx_descriptor_end+0xfff831dc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   832bc:	e0bffe17 	ldw	r2,-8(fp)
}
   832c0:	e037883a 	mov	sp,fp
   832c4:	df000017 	ldw	fp,0(sp)
   832c8:	dec00104 	addi	sp,sp,4
   832cc:	f800283a 	ret

000832d0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   832d0:	defffb04 	addi	sp,sp,-20
   832d4:	df000415 	stw	fp,16(sp)
   832d8:	df000404 	addi	fp,sp,16
   832dc:	e13ffe15 	stw	r4,-8(fp)
   832e0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   832e4:	e0bfff17 	ldw	r2,-4(fp)
   832e8:	10840070 	cmpltui	r2,r2,4097
   832ec:	1000021e 	bne	r2,zero,832f8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   832f0:	00840004 	movi	r2,4096
   832f4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   832f8:	e0fffe17 	ldw	r3,-8(fp)
   832fc:	e0bfff17 	ldw	r2,-4(fp)
   83300:	1885883a 	add	r2,r3,r2
   83304:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   83308:	e0bffe17 	ldw	r2,-8(fp)
   8330c:	e0bffc15 	stw	r2,-16(fp)
   83310:	00000506 	br	83328 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   83314:	e0bffc17 	ldw	r2,-16(fp)
   83318:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   8331c:	e0bffc17 	ldw	r2,-16(fp)
   83320:	10800804 	addi	r2,r2,32
   83324:	e0bffc15 	stw	r2,-16(fp)
   83328:	e0fffc17 	ldw	r3,-16(fp)
   8332c:	e0bffd17 	ldw	r2,-12(fp)
   83330:	18bff836 	bltu	r3,r2,83314 <rx_descriptor_end+0xfff832b4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   83334:	e0bffe17 	ldw	r2,-8(fp)
   83338:	108007cc 	andi	r2,r2,31
   8333c:	10000226 	beq	r2,zero,83348 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   83340:	e0bffc17 	ldw	r2,-16(fp)
   83344:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   83348:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   8334c:	e037883a 	mov	sp,fp
   83350:	df000017 	ldw	fp,0(sp)
   83354:	dec00104 	addi	sp,sp,4
   83358:	f800283a 	ret

0008335c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   8335c:	defffe04 	addi	sp,sp,-8
   83360:	df000115 	stw	fp,4(sp)
   83364:	df000104 	addi	fp,sp,4
   83368:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   8336c:	e0bfff17 	ldw	r2,-4(fp)
   83370:	10bffe84 	addi	r2,r2,-6
   83374:	10c00428 	cmpgeui	r3,r2,16
   83378:	18001a1e 	bne	r3,zero,833e4 <alt_exception_cause_generated_bad_addr+0x88>
   8337c:	100690ba 	slli	r3,r2,2
   83380:	00800234 	movhi	r2,8
   83384:	108ce504 	addi	r2,r2,13204
   83388:	1885883a 	add	r2,r3,r2
   8338c:	10800017 	ldw	r2,0(r2)
   83390:	1000683a 	jmp	r2
   83394:	000833d4 	movui	zero,8399
   83398:	000833d4 	movui	zero,8399
   8339c:	000833e4 	muli	zero,zero,8399
   833a0:	000833e4 	muli	zero,zero,8399
   833a4:	000833e4 	muli	zero,zero,8399
   833a8:	000833d4 	movui	zero,8399
   833ac:	000833dc 	xori	zero,zero,8399
   833b0:	000833e4 	muli	zero,zero,8399
   833b4:	000833d4 	movui	zero,8399
   833b8:	000833d4 	movui	zero,8399
   833bc:	000833e4 	muli	zero,zero,8399
   833c0:	000833d4 	movui	zero,8399
   833c4:	000833dc 	xori	zero,zero,8399
   833c8:	000833e4 	muli	zero,zero,8399
   833cc:	000833e4 	muli	zero,zero,8399
   833d0:	000833d4 	movui	zero,8399
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   833d4:	00800044 	movi	r2,1
   833d8:	00000306 	br	833e8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   833dc:	0005883a 	mov	r2,zero
   833e0:	00000106 	br	833e8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   833e4:	0005883a 	mov	r2,zero
  }
}
   833e8:	e037883a 	mov	sp,fp
   833ec:	df000017 	ldw	fp,0(sp)
   833f0:	dec00104 	addi	sp,sp,4
   833f4:	f800283a 	ret

000833f8 <atexit>:
   833f8:	200b883a 	mov	r5,r4
   833fc:	000d883a 	mov	r6,zero
   83400:	0009883a 	mov	r4,zero
   83404:	000f883a 	mov	r7,zero
   83408:	0083a981 	jmpi	83a98 <__register_exitproc>

0008340c <exit>:
   8340c:	defffe04 	addi	sp,sp,-8
   83410:	000b883a 	mov	r5,zero
   83414:	dc000015 	stw	r16,0(sp)
   83418:	dfc00115 	stw	ra,4(sp)
   8341c:	2021883a 	mov	r16,r4
   83420:	0083bac0 	call	83bac <__call_exitprocs>
   83424:	00800234 	movhi	r2,8
   83428:	109ec104 	addi	r2,r2,31492
   8342c:	11000017 	ldw	r4,0(r2)
   83430:	20800f17 	ldw	r2,60(r4)
   83434:	10000126 	beq	r2,zero,8343c <exit+0x30>
   83438:	103ee83a 	callr	r2
   8343c:	8009883a 	mov	r4,r16
   83440:	00857f80 	call	857f8 <_exit>

00083444 <memcmp>:
   83444:	01c000c4 	movi	r7,3
   83448:	3980192e 	bgeu	r7,r6,834b0 <memcmp+0x6c>
   8344c:	2144b03a 	or	r2,r4,r5
   83450:	11c4703a 	and	r2,r2,r7
   83454:	10000f26 	beq	r2,zero,83494 <memcmp+0x50>
   83458:	20800003 	ldbu	r2,0(r4)
   8345c:	28c00003 	ldbu	r3,0(r5)
   83460:	10c0151e 	bne	r2,r3,834b8 <memcmp+0x74>
   83464:	31bfff84 	addi	r6,r6,-2
   83468:	01ffffc4 	movi	r7,-1
   8346c:	00000406 	br	83480 <memcmp+0x3c>
   83470:	20800003 	ldbu	r2,0(r4)
   83474:	28c00003 	ldbu	r3,0(r5)
   83478:	31bfffc4 	addi	r6,r6,-1
   8347c:	10c00e1e 	bne	r2,r3,834b8 <memcmp+0x74>
   83480:	21000044 	addi	r4,r4,1
   83484:	29400044 	addi	r5,r5,1
   83488:	31fff91e 	bne	r6,r7,83470 <rx_descriptor_end+0xfff83410>
   8348c:	0005883a 	mov	r2,zero
   83490:	f800283a 	ret
   83494:	20c00017 	ldw	r3,0(r4)
   83498:	28800017 	ldw	r2,0(r5)
   8349c:	1880041e 	bne	r3,r2,834b0 <memcmp+0x6c>
   834a0:	31bfff04 	addi	r6,r6,-4
   834a4:	21000104 	addi	r4,r4,4
   834a8:	29400104 	addi	r5,r5,4
   834ac:	39bff936 	bltu	r7,r6,83494 <rx_descriptor_end+0xfff83434>
   834b0:	303fe91e 	bne	r6,zero,83458 <rx_descriptor_end+0xfff833f8>
   834b4:	003ff506 	br	8348c <rx_descriptor_end+0xfff8342c>
   834b8:	10c5c83a 	sub	r2,r2,r3
   834bc:	f800283a 	ret

000834c0 <memcpy>:
   834c0:	deffff04 	addi	sp,sp,-4
   834c4:	dc000015 	stw	r16,0(sp)
   834c8:	00c003c4 	movi	r3,15
   834cc:	2005883a 	mov	r2,r4
   834d0:	1980432e 	bgeu	r3,r6,835e0 <memcpy+0x120>
   834d4:	2146b03a 	or	r3,r4,r5
   834d8:	18c000cc 	andi	r3,r3,3
   834dc:	1800421e 	bne	r3,zero,835e8 <memcpy+0x128>
   834e0:	343ffc04 	addi	r16,r6,-16
   834e4:	8020d13a 	srli	r16,r16,4
   834e8:	28c00104 	addi	r3,r5,4
   834ec:	23400104 	addi	r13,r4,4
   834f0:	801e913a 	slli	r15,r16,4
   834f4:	2b000204 	addi	r12,r5,8
   834f8:	22c00204 	addi	r11,r4,8
   834fc:	7bc00504 	addi	r15,r15,20
   83500:	2a800304 	addi	r10,r5,12
   83504:	22400304 	addi	r9,r4,12
   83508:	2bdf883a 	add	r15,r5,r15
   8350c:	2811883a 	mov	r8,r5
   83510:	200f883a 	mov	r7,r4
   83514:	41000017 	ldw	r4,0(r8)
   83518:	39c00404 	addi	r7,r7,16
   8351c:	18c00404 	addi	r3,r3,16
   83520:	393ffc15 	stw	r4,-16(r7)
   83524:	1bbffc17 	ldw	r14,-16(r3)
   83528:	6b400404 	addi	r13,r13,16
   8352c:	5ac00404 	addi	r11,r11,16
   83530:	6bbffc15 	stw	r14,-16(r13)
   83534:	63800017 	ldw	r14,0(r12)
   83538:	4a400404 	addi	r9,r9,16
   8353c:	42000404 	addi	r8,r8,16
   83540:	5bbffc15 	stw	r14,-16(r11)
   83544:	53800017 	ldw	r14,0(r10)
   83548:	63000404 	addi	r12,r12,16
   8354c:	52800404 	addi	r10,r10,16
   83550:	4bbffc15 	stw	r14,-16(r9)
   83554:	1bffef1e 	bne	r3,r15,83514 <rx_descriptor_end+0xfff834b4>
   83558:	81c00044 	addi	r7,r16,1
   8355c:	380e913a 	slli	r7,r7,4
   83560:	310003cc 	andi	r4,r6,15
   83564:	02c000c4 	movi	r11,3
   83568:	11c7883a 	add	r3,r2,r7
   8356c:	29cb883a 	add	r5,r5,r7
   83570:	59001f2e 	bgeu	r11,r4,835f0 <memcpy+0x130>
   83574:	1813883a 	mov	r9,r3
   83578:	2811883a 	mov	r8,r5
   8357c:	200f883a 	mov	r7,r4
   83580:	42800017 	ldw	r10,0(r8)
   83584:	4a400104 	addi	r9,r9,4
   83588:	39ffff04 	addi	r7,r7,-4
   8358c:	4abfff15 	stw	r10,-4(r9)
   83590:	42000104 	addi	r8,r8,4
   83594:	59fffa36 	bltu	r11,r7,83580 <rx_descriptor_end+0xfff83520>
   83598:	213fff04 	addi	r4,r4,-4
   8359c:	2008d0ba 	srli	r4,r4,2
   835a0:	318000cc 	andi	r6,r6,3
   835a4:	21000044 	addi	r4,r4,1
   835a8:	2109883a 	add	r4,r4,r4
   835ac:	2109883a 	add	r4,r4,r4
   835b0:	1907883a 	add	r3,r3,r4
   835b4:	290b883a 	add	r5,r5,r4
   835b8:	30000626 	beq	r6,zero,835d4 <memcpy+0x114>
   835bc:	198d883a 	add	r6,r3,r6
   835c0:	29c00003 	ldbu	r7,0(r5)
   835c4:	18c00044 	addi	r3,r3,1
   835c8:	29400044 	addi	r5,r5,1
   835cc:	19ffffc5 	stb	r7,-1(r3)
   835d0:	19bffb1e 	bne	r3,r6,835c0 <rx_descriptor_end+0xfff83560>
   835d4:	dc000017 	ldw	r16,0(sp)
   835d8:	dec00104 	addi	sp,sp,4
   835dc:	f800283a 	ret
   835e0:	2007883a 	mov	r3,r4
   835e4:	003ff406 	br	835b8 <rx_descriptor_end+0xfff83558>
   835e8:	2007883a 	mov	r3,r4
   835ec:	003ff306 	br	835bc <rx_descriptor_end+0xfff8355c>
   835f0:	200d883a 	mov	r6,r4
   835f4:	003ff006 	br	835b8 <rx_descriptor_end+0xfff83558>

000835f8 <_putc_r>:
   835f8:	defffc04 	addi	sp,sp,-16
   835fc:	dc000215 	stw	r16,8(sp)
   83600:	dfc00315 	stw	ra,12(sp)
   83604:	2021883a 	mov	r16,r4
   83608:	20000226 	beq	r4,zero,83614 <_putc_r+0x1c>
   8360c:	20800e17 	ldw	r2,56(r4)
   83610:	10001b26 	beq	r2,zero,83680 <_putc_r+0x88>
   83614:	30800217 	ldw	r2,8(r6)
   83618:	10bfffc4 	addi	r2,r2,-1
   8361c:	30800215 	stw	r2,8(r6)
   83620:	10000a16 	blt	r2,zero,8364c <_putc_r+0x54>
   83624:	30800017 	ldw	r2,0(r6)
   83628:	11400005 	stb	r5,0(r2)
   8362c:	30800017 	ldw	r2,0(r6)
   83630:	10c00044 	addi	r3,r2,1
   83634:	30c00015 	stw	r3,0(r6)
   83638:	10800003 	ldbu	r2,0(r2)
   8363c:	dfc00317 	ldw	ra,12(sp)
   83640:	dc000217 	ldw	r16,8(sp)
   83644:	dec00404 	addi	sp,sp,16
   83648:	f800283a 	ret
   8364c:	30c00617 	ldw	r3,24(r6)
   83650:	10c00616 	blt	r2,r3,8366c <_putc_r+0x74>
   83654:	30800017 	ldw	r2,0(r6)
   83658:	00c00284 	movi	r3,10
   8365c:	11400005 	stb	r5,0(r2)
   83660:	30800017 	ldw	r2,0(r6)
   83664:	11400003 	ldbu	r5,0(r2)
   83668:	28fff11e 	bne	r5,r3,83630 <rx_descriptor_end+0xfff835d0>
   8366c:	8009883a 	mov	r4,r16
   83670:	dfc00317 	ldw	ra,12(sp)
   83674:	dc000217 	ldw	r16,8(sp)
   83678:	dec00404 	addi	sp,sp,16
   8367c:	00837f81 	jmpi	837f8 <__swbuf_r>
   83680:	d9400015 	stw	r5,0(sp)
   83684:	d9800115 	stw	r6,4(sp)
   83688:	00842e80 	call	842e8 <__sinit>
   8368c:	d9800117 	ldw	r6,4(sp)
   83690:	d9400017 	ldw	r5,0(sp)
   83694:	003fdf06 	br	83614 <rx_descriptor_end+0xfff835b4>

00083698 <putc>:
   83698:	defffc04 	addi	sp,sp,-16
   8369c:	dc400115 	stw	r17,4(sp)
   836a0:	04400234 	movhi	r17,8
   836a4:	8c5ec204 	addi	r17,r17,31496
   836a8:	dc800215 	stw	r18,8(sp)
   836ac:	2025883a 	mov	r18,r4
   836b0:	89000017 	ldw	r4,0(r17)
   836b4:	dc000015 	stw	r16,0(sp)
   836b8:	dfc00315 	stw	ra,12(sp)
   836bc:	2821883a 	mov	r16,r5
   836c0:	20000226 	beq	r4,zero,836cc <putc+0x34>
   836c4:	20c00e17 	ldw	r3,56(r4)
   836c8:	18001a26 	beq	r3,zero,83734 <putc+0x9c>
   836cc:	80800217 	ldw	r2,8(r16)
   836d0:	10bfffc4 	addi	r2,r2,-1
   836d4:	80800215 	stw	r2,8(r16)
   836d8:	10000c16 	blt	r2,zero,8370c <putc+0x74>
   836dc:	80800017 	ldw	r2,0(r16)
   836e0:	14800005 	stb	r18,0(r2)
   836e4:	80800017 	ldw	r2,0(r16)
   836e8:	10c00044 	addi	r3,r2,1
   836ec:	80c00015 	stw	r3,0(r16)
   836f0:	10800003 	ldbu	r2,0(r2)
   836f4:	dfc00317 	ldw	ra,12(sp)
   836f8:	dc800217 	ldw	r18,8(sp)
   836fc:	dc400117 	ldw	r17,4(sp)
   83700:	dc000017 	ldw	r16,0(sp)
   83704:	dec00404 	addi	sp,sp,16
   83708:	f800283a 	ret
   8370c:	80c00617 	ldw	r3,24(r16)
   83710:	10c00a16 	blt	r2,r3,8373c <putc+0xa4>
   83714:	80800017 	ldw	r2,0(r16)
   83718:	00c00284 	movi	r3,10
   8371c:	14800005 	stb	r18,0(r2)
   83720:	80800017 	ldw	r2,0(r16)
   83724:	11400003 	ldbu	r5,0(r2)
   83728:	28ffef1e 	bne	r5,r3,836e8 <rx_descriptor_end+0xfff83688>
   8372c:	89000017 	ldw	r4,0(r17)
   83730:	00000406 	br	83744 <putc+0xac>
   83734:	00842e80 	call	842e8 <__sinit>
   83738:	003fe406 	br	836cc <rx_descriptor_end+0xfff8366c>
   8373c:	89000017 	ldw	r4,0(r17)
   83740:	900b883a 	mov	r5,r18
   83744:	800d883a 	mov	r6,r16
   83748:	dfc00317 	ldw	ra,12(sp)
   8374c:	dc800217 	ldw	r18,8(sp)
   83750:	dc400117 	ldw	r17,4(sp)
   83754:	dc000017 	ldw	r16,0(sp)
   83758:	dec00404 	addi	sp,sp,16
   8375c:	00837f81 	jmpi	837f8 <__swbuf_r>

00083760 <strlen>:
   83760:	208000cc 	andi	r2,r4,3
   83764:	10002026 	beq	r2,zero,837e8 <strlen+0x88>
   83768:	20800007 	ldb	r2,0(r4)
   8376c:	10002026 	beq	r2,zero,837f0 <strlen+0x90>
   83770:	2005883a 	mov	r2,r4
   83774:	00000206 	br	83780 <strlen+0x20>
   83778:	10c00007 	ldb	r3,0(r2)
   8377c:	18001826 	beq	r3,zero,837e0 <strlen+0x80>
   83780:	10800044 	addi	r2,r2,1
   83784:	10c000cc 	andi	r3,r2,3
   83788:	183ffb1e 	bne	r3,zero,83778 <rx_descriptor_end+0xfff83718>
   8378c:	10c00017 	ldw	r3,0(r2)
   83790:	01ffbff4 	movhi	r7,65279
   83794:	39ffbfc4 	addi	r7,r7,-257
   83798:	00ca303a 	nor	r5,zero,r3
   8379c:	01a02074 	movhi	r6,32897
   837a0:	19c7883a 	add	r3,r3,r7
   837a4:	31a02004 	addi	r6,r6,-32640
   837a8:	1946703a 	and	r3,r3,r5
   837ac:	1986703a 	and	r3,r3,r6
   837b0:	1800091e 	bne	r3,zero,837d8 <strlen+0x78>
   837b4:	10800104 	addi	r2,r2,4
   837b8:	10c00017 	ldw	r3,0(r2)
   837bc:	19cb883a 	add	r5,r3,r7
   837c0:	00c6303a 	nor	r3,zero,r3
   837c4:	28c6703a 	and	r3,r5,r3
   837c8:	1986703a 	and	r3,r3,r6
   837cc:	183ff926 	beq	r3,zero,837b4 <rx_descriptor_end+0xfff83754>
   837d0:	00000106 	br	837d8 <strlen+0x78>
   837d4:	10800044 	addi	r2,r2,1
   837d8:	10c00007 	ldb	r3,0(r2)
   837dc:	183ffd1e 	bne	r3,zero,837d4 <rx_descriptor_end+0xfff83774>
   837e0:	1105c83a 	sub	r2,r2,r4
   837e4:	f800283a 	ret
   837e8:	2005883a 	mov	r2,r4
   837ec:	003fe706 	br	8378c <rx_descriptor_end+0xfff8372c>
   837f0:	0005883a 	mov	r2,zero
   837f4:	f800283a 	ret

000837f8 <__swbuf_r>:
   837f8:	defffc04 	addi	sp,sp,-16
   837fc:	dc800215 	stw	r18,8(sp)
   83800:	dc400115 	stw	r17,4(sp)
   83804:	dc000015 	stw	r16,0(sp)
   83808:	dfc00315 	stw	ra,12(sp)
   8380c:	2025883a 	mov	r18,r4
   83810:	2823883a 	mov	r17,r5
   83814:	3021883a 	mov	r16,r6
   83818:	20000226 	beq	r4,zero,83824 <__swbuf_r+0x2c>
   8381c:	20800e17 	ldw	r2,56(r4)
   83820:	10004126 	beq	r2,zero,83928 <__swbuf_r+0x130>
   83824:	80c00617 	ldw	r3,24(r16)
   83828:	8180030b 	ldhu	r6,12(r16)
   8382c:	80c00215 	stw	r3,8(r16)
   83830:	30c0020c 	andi	r3,r6,8
   83834:	18003526 	beq	r3,zero,8390c <__swbuf_r+0x114>
   83838:	80c00417 	ldw	r3,16(r16)
   8383c:	18003326 	beq	r3,zero,8390c <__swbuf_r+0x114>
   83840:	3088000c 	andi	r2,r6,8192
   83844:	8c403fcc 	andi	r17,r17,255
   83848:	10001726 	beq	r2,zero,838a8 <__swbuf_r+0xb0>
   8384c:	80800017 	ldw	r2,0(r16)
   83850:	81000517 	ldw	r4,20(r16)
   83854:	10c7c83a 	sub	r3,r2,r3
   83858:	19001d0e 	bge	r3,r4,838d0 <__swbuf_r+0xd8>
   8385c:	18c00044 	addi	r3,r3,1
   83860:	81400217 	ldw	r5,8(r16)
   83864:	11000044 	addi	r4,r2,1
   83868:	81000015 	stw	r4,0(r16)
   8386c:	297fffc4 	addi	r5,r5,-1
   83870:	81400215 	stw	r5,8(r16)
   83874:	14400005 	stb	r17,0(r2)
   83878:	80800517 	ldw	r2,20(r16)
   8387c:	10c01d26 	beq	r2,r3,838f4 <__swbuf_r+0xfc>
   83880:	8080030b 	ldhu	r2,12(r16)
   83884:	1080004c 	andi	r2,r2,1
   83888:	1000181e 	bne	r2,zero,838ec <__swbuf_r+0xf4>
   8388c:	8805883a 	mov	r2,r17
   83890:	dfc00317 	ldw	ra,12(sp)
   83894:	dc800217 	ldw	r18,8(sp)
   83898:	dc400117 	ldw	r17,4(sp)
   8389c:	dc000017 	ldw	r16,0(sp)
   838a0:	dec00404 	addi	sp,sp,16
   838a4:	f800283a 	ret
   838a8:	81001917 	ldw	r4,100(r16)
   838ac:	00b7ffc4 	movi	r2,-8193
   838b0:	31880014 	ori	r6,r6,8192
   838b4:	2084703a 	and	r2,r4,r2
   838b8:	80801915 	stw	r2,100(r16)
   838bc:	80800017 	ldw	r2,0(r16)
   838c0:	81000517 	ldw	r4,20(r16)
   838c4:	8180030d 	sth	r6,12(r16)
   838c8:	10c7c83a 	sub	r3,r2,r3
   838cc:	193fe316 	blt	r3,r4,8385c <rx_descriptor_end+0xfff837fc>
   838d0:	9009883a 	mov	r4,r18
   838d4:	800b883a 	mov	r5,r16
   838d8:	0083d400 	call	83d40 <_fflush_r>
   838dc:	1000091e 	bne	r2,zero,83904 <__swbuf_r+0x10c>
   838e0:	80800017 	ldw	r2,0(r16)
   838e4:	00c00044 	movi	r3,1
   838e8:	003fdd06 	br	83860 <rx_descriptor_end+0xfff83800>
   838ec:	00800284 	movi	r2,10
   838f0:	88bfe61e 	bne	r17,r2,8388c <rx_descriptor_end+0xfff8382c>
   838f4:	9009883a 	mov	r4,r18
   838f8:	800b883a 	mov	r5,r16
   838fc:	0083d400 	call	83d40 <_fflush_r>
   83900:	103fe226 	beq	r2,zero,8388c <rx_descriptor_end+0xfff8382c>
   83904:	00bfffc4 	movi	r2,-1
   83908:	003fe106 	br	83890 <rx_descriptor_end+0xfff83830>
   8390c:	9009883a 	mov	r4,r18
   83910:	800b883a 	mov	r5,r16
   83914:	00839680 	call	83968 <__swsetup_r>
   83918:	1000051e 	bne	r2,zero,83930 <__swbuf_r+0x138>
   8391c:	8180030b 	ldhu	r6,12(r16)
   83920:	80c00417 	ldw	r3,16(r16)
   83924:	003fc606 	br	83840 <rx_descriptor_end+0xfff837e0>
   83928:	00842e80 	call	842e8 <__sinit>
   8392c:	003fbd06 	br	83824 <rx_descriptor_end+0xfff837c4>
   83930:	80c0030b 	ldhu	r3,12(r16)
   83934:	00bfffc4 	movi	r2,-1
   83938:	18c01014 	ori	r3,r3,64
   8393c:	80c0030d 	sth	r3,12(r16)
   83940:	00c00244 	movi	r3,9
   83944:	90c00015 	stw	r3,0(r18)
   83948:	003fd106 	br	83890 <rx_descriptor_end+0xfff83830>

0008394c <__swbuf>:
   8394c:	00c00234 	movhi	r3,8
   83950:	18dec204 	addi	r3,r3,31496
   83954:	2005883a 	mov	r2,r4
   83958:	19000017 	ldw	r4,0(r3)
   8395c:	280d883a 	mov	r6,r5
   83960:	100b883a 	mov	r5,r2
   83964:	00837f81 	jmpi	837f8 <__swbuf_r>

00083968 <__swsetup_r>:
   83968:	00800234 	movhi	r2,8
   8396c:	defffd04 	addi	sp,sp,-12
   83970:	109ec204 	addi	r2,r2,31496
   83974:	dc400115 	stw	r17,4(sp)
   83978:	2023883a 	mov	r17,r4
   8397c:	11000017 	ldw	r4,0(r2)
   83980:	dc000015 	stw	r16,0(sp)
   83984:	dfc00215 	stw	ra,8(sp)
   83988:	2821883a 	mov	r16,r5
   8398c:	20000226 	beq	r4,zero,83998 <__swsetup_r+0x30>
   83990:	20c00e17 	ldw	r3,56(r4)
   83994:	18002e26 	beq	r3,zero,83a50 <__swsetup_r+0xe8>
   83998:	8080030b 	ldhu	r2,12(r16)
   8399c:	10c0020c 	andi	r3,r2,8
   839a0:	100d883a 	mov	r6,r2
   839a4:	18000f26 	beq	r3,zero,839e4 <__swsetup_r+0x7c>
   839a8:	80c00417 	ldw	r3,16(r16)
   839ac:	18001526 	beq	r3,zero,83a04 <__swsetup_r+0x9c>
   839b0:	1100004c 	andi	r4,r2,1
   839b4:	20001c1e 	bne	r4,zero,83a28 <__swsetup_r+0xc0>
   839b8:	1080008c 	andi	r2,r2,2
   839bc:	1000261e 	bne	r2,zero,83a58 <__swsetup_r+0xf0>
   839c0:	80800517 	ldw	r2,20(r16)
   839c4:	80800215 	stw	r2,8(r16)
   839c8:	18001c26 	beq	r3,zero,83a3c <__swsetup_r+0xd4>
   839cc:	0005883a 	mov	r2,zero
   839d0:	dfc00217 	ldw	ra,8(sp)
   839d4:	dc400117 	ldw	r17,4(sp)
   839d8:	dc000017 	ldw	r16,0(sp)
   839dc:	dec00304 	addi	sp,sp,12
   839e0:	f800283a 	ret
   839e4:	3080040c 	andi	r2,r6,16
   839e8:	10001726 	beq	r2,zero,83a48 <__swsetup_r+0xe0>
   839ec:	3080010c 	andi	r2,r6,4
   839f0:	10001b1e 	bne	r2,zero,83a60 <__swsetup_r+0xf8>
   839f4:	80c00417 	ldw	r3,16(r16)
   839f8:	30800214 	ori	r2,r6,8
   839fc:	8080030d 	sth	r2,12(r16)
   83a00:	183feb1e 	bne	r3,zero,839b0 <rx_descriptor_end+0xfff83950>
   83a04:	1140a00c 	andi	r5,r2,640
   83a08:	01008004 	movi	r4,512
   83a0c:	293fe826 	beq	r5,r4,839b0 <rx_descriptor_end+0xfff83950>
   83a10:	8809883a 	mov	r4,r17
   83a14:	800b883a 	mov	r5,r16
   83a18:	00848bc0 	call	848bc <__smakebuf_r>
   83a1c:	8080030b 	ldhu	r2,12(r16)
   83a20:	80c00417 	ldw	r3,16(r16)
   83a24:	003fe206 	br	839b0 <rx_descriptor_end+0xfff83950>
   83a28:	80800517 	ldw	r2,20(r16)
   83a2c:	80000215 	stw	zero,8(r16)
   83a30:	0085c83a 	sub	r2,zero,r2
   83a34:	80800615 	stw	r2,24(r16)
   83a38:	183fe41e 	bne	r3,zero,839cc <rx_descriptor_end+0xfff8396c>
   83a3c:	8080030b 	ldhu	r2,12(r16)
   83a40:	1080200c 	andi	r2,r2,128
   83a44:	103fe226 	beq	r2,zero,839d0 <rx_descriptor_end+0xfff83970>
   83a48:	00bfffc4 	movi	r2,-1
   83a4c:	003fe006 	br	839d0 <rx_descriptor_end+0xfff83970>
   83a50:	00842e80 	call	842e8 <__sinit>
   83a54:	003fd006 	br	83998 <rx_descriptor_end+0xfff83938>
   83a58:	0005883a 	mov	r2,zero
   83a5c:	003fd906 	br	839c4 <rx_descriptor_end+0xfff83964>
   83a60:	81400c17 	ldw	r5,48(r16)
   83a64:	28000626 	beq	r5,zero,83a80 <__swsetup_r+0x118>
   83a68:	80801004 	addi	r2,r16,64
   83a6c:	28800326 	beq	r5,r2,83a7c <__swsetup_r+0x114>
   83a70:	8809883a 	mov	r4,r17
   83a74:	008445c0 	call	8445c <_free_r>
   83a78:	8180030b 	ldhu	r6,12(r16)
   83a7c:	80000c15 	stw	zero,48(r16)
   83a80:	80c00417 	ldw	r3,16(r16)
   83a84:	00bff6c4 	movi	r2,-37
   83a88:	118c703a 	and	r6,r2,r6
   83a8c:	80000115 	stw	zero,4(r16)
   83a90:	80c00015 	stw	r3,0(r16)
   83a94:	003fd806 	br	839f8 <rx_descriptor_end+0xfff83998>

00083a98 <__register_exitproc>:
   83a98:	00800234 	movhi	r2,8
   83a9c:	defffa04 	addi	sp,sp,-24
   83aa0:	109ec104 	addi	r2,r2,31492
   83aa4:	dc000315 	stw	r16,12(sp)
   83aa8:	14000017 	ldw	r16,0(r2)
   83aac:	dc400415 	stw	r17,16(sp)
   83ab0:	dfc00515 	stw	ra,20(sp)
   83ab4:	80805217 	ldw	r2,328(r16)
   83ab8:	2023883a 	mov	r17,r4
   83abc:	10003626 	beq	r2,zero,83b98 <__register_exitproc+0x100>
   83ac0:	10c00117 	ldw	r3,4(r2)
   83ac4:	010007c4 	movi	r4,31
   83ac8:	20c00e16 	blt	r4,r3,83b04 <__register_exitproc+0x6c>
   83acc:	1a400044 	addi	r9,r3,1
   83ad0:	8800211e 	bne	r17,zero,83b58 <__register_exitproc+0xc0>
   83ad4:	18c00084 	addi	r3,r3,2
   83ad8:	18c7883a 	add	r3,r3,r3
   83adc:	18c7883a 	add	r3,r3,r3
   83ae0:	12400115 	stw	r9,4(r2)
   83ae4:	10c7883a 	add	r3,r2,r3
   83ae8:	19400015 	stw	r5,0(r3)
   83aec:	0005883a 	mov	r2,zero
   83af0:	dfc00517 	ldw	ra,20(sp)
   83af4:	dc400417 	ldw	r17,16(sp)
   83af8:	dc000317 	ldw	r16,12(sp)
   83afc:	dec00604 	addi	sp,sp,24
   83b00:	f800283a 	ret
   83b04:	00800034 	movhi	r2,0
   83b08:	10800004 	addi	r2,r2,0
   83b0c:	10002526 	beq	r2,zero,83ba4 <__register_exitproc+0x10c>
   83b10:	01006404 	movi	r4,400
   83b14:	d9400015 	stw	r5,0(sp)
   83b18:	d9800115 	stw	r6,4(sp)
   83b1c:	d9c00215 	stw	r7,8(sp)
   83b20:	00000000 	call	0 <__reset-0x80000>
   83b24:	d9400017 	ldw	r5,0(sp)
   83b28:	d9800117 	ldw	r6,4(sp)
   83b2c:	d9c00217 	ldw	r7,8(sp)
   83b30:	10001c26 	beq	r2,zero,83ba4 <__register_exitproc+0x10c>
   83b34:	80c05217 	ldw	r3,328(r16)
   83b38:	10000115 	stw	zero,4(r2)
   83b3c:	02400044 	movi	r9,1
   83b40:	10c00015 	stw	r3,0(r2)
   83b44:	80805215 	stw	r2,328(r16)
   83b48:	10006215 	stw	zero,392(r2)
   83b4c:	10006315 	stw	zero,396(r2)
   83b50:	0007883a 	mov	r3,zero
   83b54:	883fdf26 	beq	r17,zero,83ad4 <rx_descriptor_end+0xfff83a74>
   83b58:	18d1883a 	add	r8,r3,r3
   83b5c:	4211883a 	add	r8,r8,r8
   83b60:	1211883a 	add	r8,r2,r8
   83b64:	41802215 	stw	r6,136(r8)
   83b68:	01000044 	movi	r4,1
   83b6c:	11806217 	ldw	r6,392(r2)
   83b70:	20c8983a 	sll	r4,r4,r3
   83b74:	310cb03a 	or	r6,r6,r4
   83b78:	11806215 	stw	r6,392(r2)
   83b7c:	41c04215 	stw	r7,264(r8)
   83b80:	01800084 	movi	r6,2
   83b84:	89bfd31e 	bne	r17,r6,83ad4 <rx_descriptor_end+0xfff83a74>
   83b88:	11806317 	ldw	r6,396(r2)
   83b8c:	3108b03a 	or	r4,r6,r4
   83b90:	11006315 	stw	r4,396(r2)
   83b94:	003fcf06 	br	83ad4 <rx_descriptor_end+0xfff83a74>
   83b98:	80805304 	addi	r2,r16,332
   83b9c:	80805215 	stw	r2,328(r16)
   83ba0:	003fc706 	br	83ac0 <rx_descriptor_end+0xfff83a60>
   83ba4:	00bfffc4 	movi	r2,-1
   83ba8:	003fd106 	br	83af0 <rx_descriptor_end+0xfff83a90>

00083bac <__call_exitprocs>:
   83bac:	00800234 	movhi	r2,8
   83bb0:	109ec104 	addi	r2,r2,31492
   83bb4:	10800017 	ldw	r2,0(r2)
   83bb8:	defff404 	addi	sp,sp,-48
   83bbc:	dd800815 	stw	r22,32(sp)
   83bc0:	d8800015 	stw	r2,0(sp)
   83bc4:	10805204 	addi	r2,r2,328
   83bc8:	dd000615 	stw	r20,24(sp)
   83bcc:	dc800415 	stw	r18,16(sp)
   83bd0:	dfc00b15 	stw	ra,44(sp)
   83bd4:	df000a15 	stw	fp,40(sp)
   83bd8:	ddc00915 	stw	r23,36(sp)
   83bdc:	dd400715 	stw	r21,28(sp)
   83be0:	dcc00515 	stw	r19,20(sp)
   83be4:	dc400315 	stw	r17,12(sp)
   83be8:	dc000215 	stw	r16,8(sp)
   83bec:	2025883a 	mov	r18,r4
   83bf0:	2829883a 	mov	r20,r5
   83bf4:	d8800115 	stw	r2,4(sp)
   83bf8:	05bfffc4 	movi	r22,-1
   83bfc:	d8800017 	ldw	r2,0(sp)
   83c00:	14c05217 	ldw	r19,328(r2)
   83c04:	98001d26 	beq	r19,zero,83c7c <__call_exitprocs+0xd0>
   83c08:	dd400117 	ldw	r21,4(sp)
   83c0c:	98800117 	ldw	r2,4(r19)
   83c10:	173fffc4 	addi	fp,r2,-1
   83c14:	e0000d16 	blt	fp,zero,83c4c <__call_exitprocs+0xa0>
   83c18:	14000044 	addi	r16,r2,1
   83c1c:	8421883a 	add	r16,r16,r16
   83c20:	8421883a 	add	r16,r16,r16
   83c24:	84402004 	addi	r17,r16,128
   83c28:	9c63883a 	add	r17,r19,r17
   83c2c:	9c21883a 	add	r16,r19,r16
   83c30:	a0001e26 	beq	r20,zero,83cac <__call_exitprocs+0x100>
   83c34:	80804017 	ldw	r2,256(r16)
   83c38:	15001c26 	beq	r2,r20,83cac <__call_exitprocs+0x100>
   83c3c:	e73fffc4 	addi	fp,fp,-1
   83c40:	843fff04 	addi	r16,r16,-4
   83c44:	8c7fff04 	addi	r17,r17,-4
   83c48:	e5bff91e 	bne	fp,r22,83c30 <rx_descriptor_end+0xfff83bd0>
   83c4c:	00800034 	movhi	r2,0
   83c50:	10800004 	addi	r2,r2,0
   83c54:	10000926 	beq	r2,zero,83c7c <__call_exitprocs+0xd0>
   83c58:	98800117 	ldw	r2,4(r19)
   83c5c:	1000311e 	bne	r2,zero,83d24 <__call_exitprocs+0x178>
   83c60:	98800017 	ldw	r2,0(r19)
   83c64:	10003426 	beq	r2,zero,83d38 <__call_exitprocs+0x18c>
   83c68:	9809883a 	mov	r4,r19
   83c6c:	a8800015 	stw	r2,0(r21)
   83c70:	00000000 	call	0 <__reset-0x80000>
   83c74:	acc00017 	ldw	r19,0(r21)
   83c78:	983fe41e 	bne	r19,zero,83c0c <rx_descriptor_end+0xfff83bac>
   83c7c:	dfc00b17 	ldw	ra,44(sp)
   83c80:	df000a17 	ldw	fp,40(sp)
   83c84:	ddc00917 	ldw	r23,36(sp)
   83c88:	dd800817 	ldw	r22,32(sp)
   83c8c:	dd400717 	ldw	r21,28(sp)
   83c90:	dd000617 	ldw	r20,24(sp)
   83c94:	dcc00517 	ldw	r19,20(sp)
   83c98:	dc800417 	ldw	r18,16(sp)
   83c9c:	dc400317 	ldw	r17,12(sp)
   83ca0:	dc000217 	ldw	r16,8(sp)
   83ca4:	dec00c04 	addi	sp,sp,48
   83ca8:	f800283a 	ret
   83cac:	98800117 	ldw	r2,4(r19)
   83cb0:	80c00017 	ldw	r3,0(r16)
   83cb4:	10bfffc4 	addi	r2,r2,-1
   83cb8:	17001526 	beq	r2,fp,83d10 <__call_exitprocs+0x164>
   83cbc:	80000015 	stw	zero,0(r16)
   83cc0:	183fde26 	beq	r3,zero,83c3c <rx_descriptor_end+0xfff83bdc>
   83cc4:	00800044 	movi	r2,1
   83cc8:	1708983a 	sll	r4,r2,fp
   83ccc:	98806217 	ldw	r2,392(r19)
   83cd0:	9dc00117 	ldw	r23,4(r19)
   83cd4:	2084703a 	and	r2,r4,r2
   83cd8:	1000061e 	bne	r2,zero,83cf4 <__call_exitprocs+0x148>
   83cdc:	183ee83a 	callr	r3
   83ce0:	98800117 	ldw	r2,4(r19)
   83ce4:	15ffc51e 	bne	r2,r23,83bfc <rx_descriptor_end+0xfff83b9c>
   83ce8:	a8800017 	ldw	r2,0(r21)
   83cec:	14ffd326 	beq	r2,r19,83c3c <rx_descriptor_end+0xfff83bdc>
   83cf0:	003fc206 	br	83bfc <rx_descriptor_end+0xfff83b9c>
   83cf4:	98806317 	ldw	r2,396(r19)
   83cf8:	2084703a 	and	r2,r4,r2
   83cfc:	1000061e 	bne	r2,zero,83d18 <__call_exitprocs+0x16c>
   83d00:	89400017 	ldw	r5,0(r17)
   83d04:	9009883a 	mov	r4,r18
   83d08:	183ee83a 	callr	r3
   83d0c:	003ff406 	br	83ce0 <rx_descriptor_end+0xfff83c80>
   83d10:	9f000115 	stw	fp,4(r19)
   83d14:	003fea06 	br	83cc0 <rx_descriptor_end+0xfff83c60>
   83d18:	89000017 	ldw	r4,0(r17)
   83d1c:	183ee83a 	callr	r3
   83d20:	003fef06 	br	83ce0 <rx_descriptor_end+0xfff83c80>
   83d24:	98800017 	ldw	r2,0(r19)
   83d28:	982b883a 	mov	r21,r19
   83d2c:	1027883a 	mov	r19,r2
   83d30:	983fb61e 	bne	r19,zero,83c0c <rx_descriptor_end+0xfff83bac>
   83d34:	003fd106 	br	83c7c <rx_descriptor_end+0xfff83c1c>
   83d38:	0005883a 	mov	r2,zero
   83d3c:	003ffa06 	br	83d28 <rx_descriptor_end+0xfff83cc8>

00083d40 <_fflush_r>:
   83d40:	defffb04 	addi	sp,sp,-20
   83d44:	dcc00315 	stw	r19,12(sp)
   83d48:	dc000015 	stw	r16,0(sp)
   83d4c:	dfc00415 	stw	ra,16(sp)
   83d50:	dc800215 	stw	r18,8(sp)
   83d54:	dc400115 	stw	r17,4(sp)
   83d58:	2027883a 	mov	r19,r4
   83d5c:	2821883a 	mov	r16,r5
   83d60:	20000226 	beq	r4,zero,83d6c <_fflush_r+0x2c>
   83d64:	20800e17 	ldw	r2,56(r4)
   83d68:	10005326 	beq	r2,zero,83eb8 <_fflush_r+0x178>
   83d6c:	8080030b 	ldhu	r2,12(r16)
   83d70:	10ffffcc 	andi	r3,r2,65535
   83d74:	18e0001c 	xori	r3,r3,32768
   83d78:	18e00004 	addi	r3,r3,-32768
   83d7c:	18002c26 	beq	r3,zero,83e30 <_fflush_r+0xf0>
   83d80:	10c0020c 	andi	r3,r2,8
   83d84:	1800321e 	bne	r3,zero,83e50 <_fflush_r+0x110>
   83d88:	80c00117 	ldw	r3,4(r16)
   83d8c:	10820014 	ori	r2,r2,2048
   83d90:	8080030d 	sth	r2,12(r16)
   83d94:	00c0570e 	bge	zero,r3,83ef4 <_fflush_r+0x1b4>
   83d98:	82000a17 	ldw	r8,40(r16)
   83d9c:	40002426 	beq	r8,zero,83e30 <_fflush_r+0xf0>
   83da0:	9c400017 	ldw	r17,0(r19)
   83da4:	10c4000c 	andi	r3,r2,4096
   83da8:	98000015 	stw	zero,0(r19)
   83dac:	18004626 	beq	r3,zero,83ec8 <_fflush_r+0x188>
   83db0:	81801417 	ldw	r6,80(r16)
   83db4:	10c0010c 	andi	r3,r2,4
   83db8:	18000626 	beq	r3,zero,83dd4 <_fflush_r+0x94>
   83dbc:	80c00117 	ldw	r3,4(r16)
   83dc0:	80800c17 	ldw	r2,48(r16)
   83dc4:	30cdc83a 	sub	r6,r6,r3
   83dc8:	10000226 	beq	r2,zero,83dd4 <_fflush_r+0x94>
   83dcc:	80800f17 	ldw	r2,60(r16)
   83dd0:	308dc83a 	sub	r6,r6,r2
   83dd4:	81400717 	ldw	r5,28(r16)
   83dd8:	9809883a 	mov	r4,r19
   83ddc:	000f883a 	mov	r7,zero
   83de0:	403ee83a 	callr	r8
   83de4:	00ffffc4 	movi	r3,-1
   83de8:	10c04526 	beq	r2,r3,83f00 <_fflush_r+0x1c0>
   83dec:	80c0030b 	ldhu	r3,12(r16)
   83df0:	81000417 	ldw	r4,16(r16)
   83df4:	80000115 	stw	zero,4(r16)
   83df8:	197dffcc 	andi	r5,r3,63487
   83dfc:	8140030d 	sth	r5,12(r16)
   83e00:	81000015 	stw	r4,0(r16)
   83e04:	18c4000c 	andi	r3,r3,4096
   83e08:	18000126 	beq	r3,zero,83e10 <_fflush_r+0xd0>
   83e0c:	80801415 	stw	r2,80(r16)
   83e10:	81400c17 	ldw	r5,48(r16)
   83e14:	9c400015 	stw	r17,0(r19)
   83e18:	28000526 	beq	r5,zero,83e30 <_fflush_r+0xf0>
   83e1c:	80801004 	addi	r2,r16,64
   83e20:	28800226 	beq	r5,r2,83e2c <_fflush_r+0xec>
   83e24:	9809883a 	mov	r4,r19
   83e28:	008445c0 	call	8445c <_free_r>
   83e2c:	80000c15 	stw	zero,48(r16)
   83e30:	0005883a 	mov	r2,zero
   83e34:	dfc00417 	ldw	ra,16(sp)
   83e38:	dcc00317 	ldw	r19,12(sp)
   83e3c:	dc800217 	ldw	r18,8(sp)
   83e40:	dc400117 	ldw	r17,4(sp)
   83e44:	dc000017 	ldw	r16,0(sp)
   83e48:	dec00504 	addi	sp,sp,20
   83e4c:	f800283a 	ret
   83e50:	84800417 	ldw	r18,16(r16)
   83e54:	903ff626 	beq	r18,zero,83e30 <rx_descriptor_end+0xfff83dd0>
   83e58:	84400017 	ldw	r17,0(r16)
   83e5c:	108000cc 	andi	r2,r2,3
   83e60:	84800015 	stw	r18,0(r16)
   83e64:	8ca3c83a 	sub	r17,r17,r18
   83e68:	10001526 	beq	r2,zero,83ec0 <_fflush_r+0x180>
   83e6c:	0005883a 	mov	r2,zero
   83e70:	80800215 	stw	r2,8(r16)
   83e74:	04400316 	blt	zero,r17,83e84 <_fflush_r+0x144>
   83e78:	003fed06 	br	83e30 <rx_descriptor_end+0xfff83dd0>
   83e7c:	90a5883a 	add	r18,r18,r2
   83e80:	047feb0e 	bge	zero,r17,83e30 <rx_descriptor_end+0xfff83dd0>
   83e84:	80800917 	ldw	r2,36(r16)
   83e88:	81400717 	ldw	r5,28(r16)
   83e8c:	880f883a 	mov	r7,r17
   83e90:	900d883a 	mov	r6,r18
   83e94:	9809883a 	mov	r4,r19
   83e98:	103ee83a 	callr	r2
   83e9c:	88a3c83a 	sub	r17,r17,r2
   83ea0:	00bff616 	blt	zero,r2,83e7c <rx_descriptor_end+0xfff83e1c>
   83ea4:	80c0030b 	ldhu	r3,12(r16)
   83ea8:	00bfffc4 	movi	r2,-1
   83eac:	18c01014 	ori	r3,r3,64
   83eb0:	80c0030d 	sth	r3,12(r16)
   83eb4:	003fdf06 	br	83e34 <rx_descriptor_end+0xfff83dd4>
   83eb8:	00842e80 	call	842e8 <__sinit>
   83ebc:	003fab06 	br	83d6c <rx_descriptor_end+0xfff83d0c>
   83ec0:	80800517 	ldw	r2,20(r16)
   83ec4:	003fea06 	br	83e70 <rx_descriptor_end+0xfff83e10>
   83ec8:	81400717 	ldw	r5,28(r16)
   83ecc:	000d883a 	mov	r6,zero
   83ed0:	9809883a 	mov	r4,r19
   83ed4:	01c00044 	movi	r7,1
   83ed8:	403ee83a 	callr	r8
   83edc:	100d883a 	mov	r6,r2
   83ee0:	00bfffc4 	movi	r2,-1
   83ee4:	30801326 	beq	r6,r2,83f34 <_fflush_r+0x1f4>
   83ee8:	8080030b 	ldhu	r2,12(r16)
   83eec:	82000a17 	ldw	r8,40(r16)
   83ef0:	003fb006 	br	83db4 <rx_descriptor_end+0xfff83d54>
   83ef4:	80c00f17 	ldw	r3,60(r16)
   83ef8:	00ffa716 	blt	zero,r3,83d98 <rx_descriptor_end+0xfff83d38>
   83efc:	003fcc06 	br	83e30 <rx_descriptor_end+0xfff83dd0>
   83f00:	98c00017 	ldw	r3,0(r19)
   83f04:	183fb926 	beq	r3,zero,83dec <rx_descriptor_end+0xfff83d8c>
   83f08:	01000744 	movi	r4,29
   83f0c:	19000226 	beq	r3,r4,83f18 <_fflush_r+0x1d8>
   83f10:	01000584 	movi	r4,22
   83f14:	1900101e 	bne	r3,r4,83f58 <_fflush_r+0x218>
   83f18:	8080030b 	ldhu	r2,12(r16)
   83f1c:	80c00417 	ldw	r3,16(r16)
   83f20:	80000115 	stw	zero,4(r16)
   83f24:	10bdffcc 	andi	r2,r2,63487
   83f28:	8080030d 	sth	r2,12(r16)
   83f2c:	80c00015 	stw	r3,0(r16)
   83f30:	003fb706 	br	83e10 <rx_descriptor_end+0xfff83db0>
   83f34:	98800017 	ldw	r2,0(r19)
   83f38:	103feb26 	beq	r2,zero,83ee8 <rx_descriptor_end+0xfff83e88>
   83f3c:	00c00744 	movi	r3,29
   83f40:	10c00226 	beq	r2,r3,83f4c <_fflush_r+0x20c>
   83f44:	00c00584 	movi	r3,22
   83f48:	10ffd61e 	bne	r2,r3,83ea4 <rx_descriptor_end+0xfff83e44>
   83f4c:	9c400015 	stw	r17,0(r19)
   83f50:	0005883a 	mov	r2,zero
   83f54:	003fb706 	br	83e34 <rx_descriptor_end+0xfff83dd4>
   83f58:	80c0030b 	ldhu	r3,12(r16)
   83f5c:	18c01014 	ori	r3,r3,64
   83f60:	80c0030d 	sth	r3,12(r16)
   83f64:	003fb306 	br	83e34 <rx_descriptor_end+0xfff83dd4>

00083f68 <fflush>:
   83f68:	20000526 	beq	r4,zero,83f80 <fflush+0x18>
   83f6c:	00800234 	movhi	r2,8
   83f70:	109ec204 	addi	r2,r2,31496
   83f74:	200b883a 	mov	r5,r4
   83f78:	11000017 	ldw	r4,0(r2)
   83f7c:	0083d401 	jmpi	83d40 <_fflush_r>
   83f80:	00800234 	movhi	r2,8
   83f84:	109ec104 	addi	r2,r2,31492
   83f88:	11000017 	ldw	r4,0(r2)
   83f8c:	01400234 	movhi	r5,8
   83f90:	294f5004 	addi	r5,r5,15680
   83f94:	00848041 	jmpi	84804 <_fwalk_reent>

00083f98 <__fp_lock>:
   83f98:	0005883a 	mov	r2,zero
   83f9c:	f800283a 	ret

00083fa0 <__fp_unlock>:
   83fa0:	0005883a 	mov	r2,zero
   83fa4:	f800283a 	ret

00083fa8 <_cleanup_r>:
   83fa8:	01400234 	movhi	r5,8
   83fac:	2955a004 	addi	r5,r5,22144
   83fb0:	008474c1 	jmpi	8474c <_fwalk>

00083fb4 <__sinit.part.1>:
   83fb4:	defff604 	addi	sp,sp,-40
   83fb8:	00c00234 	movhi	r3,8
   83fbc:	dfc00915 	stw	ra,36(sp)
   83fc0:	df000815 	stw	fp,32(sp)
   83fc4:	ddc00715 	stw	r23,28(sp)
   83fc8:	dd800615 	stw	r22,24(sp)
   83fcc:	dd400515 	stw	r21,20(sp)
   83fd0:	dd000415 	stw	r20,16(sp)
   83fd4:	dcc00315 	stw	r19,12(sp)
   83fd8:	dc800215 	stw	r18,8(sp)
   83fdc:	dc400115 	stw	r17,4(sp)
   83fe0:	dc000015 	stw	r16,0(sp)
   83fe4:	18cfea04 	addi	r3,r3,16296
   83fe8:	24000117 	ldw	r16,4(r4)
   83fec:	20c00f15 	stw	r3,60(r4)
   83ff0:	07000044 	movi	fp,1
   83ff4:	00c000c4 	movi	r3,3
   83ff8:	2080bb04 	addi	r2,r4,748
   83ffc:	20c0b915 	stw	r3,740(r4)
   84000:	27000e15 	stw	fp,56(r4)
   84004:	2080ba15 	stw	r2,744(r4)
   84008:	2000b815 	stw	zero,736(r4)
   8400c:	05c00204 	movi	r23,8
   84010:	00800104 	movi	r2,4
   84014:	2025883a 	mov	r18,r4
   84018:	b80d883a 	mov	r6,r23
   8401c:	81001704 	addi	r4,r16,92
   84020:	000b883a 	mov	r5,zero
   84024:	80000015 	stw	zero,0(r16)
   84028:	80000115 	stw	zero,4(r16)
   8402c:	80000215 	stw	zero,8(r16)
   84030:	8080030d 	sth	r2,12(r16)
   84034:	80001915 	stw	zero,100(r16)
   84038:	8000038d 	sth	zero,14(r16)
   8403c:	80000415 	stw	zero,16(r16)
   84040:	80000515 	stw	zero,20(r16)
   84044:	80000615 	stw	zero,24(r16)
   84048:	008521c0 	call	8521c <memset>
   8404c:	05800234 	movhi	r22,8
   84050:	94400217 	ldw	r17,8(r18)
   84054:	05400234 	movhi	r21,8
   84058:	05000234 	movhi	r20,8
   8405c:	04c00234 	movhi	r19,8
   84060:	b594e504 	addi	r22,r22,21396
   84064:	ad54fc04 	addi	r21,r21,21488
   84068:	a5151b04 	addi	r20,r20,21612
   8406c:	9cd53204 	addi	r19,r19,21704
   84070:	85800815 	stw	r22,32(r16)
   84074:	85400915 	stw	r21,36(r16)
   84078:	85000a15 	stw	r20,40(r16)
   8407c:	84c00b15 	stw	r19,44(r16)
   84080:	84000715 	stw	r16,28(r16)
   84084:	00800284 	movi	r2,10
   84088:	89001704 	addi	r4,r17,92
   8408c:	b80d883a 	mov	r6,r23
   84090:	000b883a 	mov	r5,zero
   84094:	88000015 	stw	zero,0(r17)
   84098:	88000115 	stw	zero,4(r17)
   8409c:	88000215 	stw	zero,8(r17)
   840a0:	8880030d 	sth	r2,12(r17)
   840a4:	88001915 	stw	zero,100(r17)
   840a8:	8f00038d 	sth	fp,14(r17)
   840ac:	88000415 	stw	zero,16(r17)
   840b0:	88000515 	stw	zero,20(r17)
   840b4:	88000615 	stw	zero,24(r17)
   840b8:	008521c0 	call	8521c <memset>
   840bc:	94000317 	ldw	r16,12(r18)
   840c0:	00800484 	movi	r2,18
   840c4:	8c400715 	stw	r17,28(r17)
   840c8:	8d800815 	stw	r22,32(r17)
   840cc:	8d400915 	stw	r21,36(r17)
   840d0:	8d000a15 	stw	r20,40(r17)
   840d4:	8cc00b15 	stw	r19,44(r17)
   840d8:	8080030d 	sth	r2,12(r16)
   840dc:	00800084 	movi	r2,2
   840e0:	80000015 	stw	zero,0(r16)
   840e4:	80000115 	stw	zero,4(r16)
   840e8:	80000215 	stw	zero,8(r16)
   840ec:	80001915 	stw	zero,100(r16)
   840f0:	8080038d 	sth	r2,14(r16)
   840f4:	80000415 	stw	zero,16(r16)
   840f8:	80000515 	stw	zero,20(r16)
   840fc:	80000615 	stw	zero,24(r16)
   84100:	81001704 	addi	r4,r16,92
   84104:	000b883a 	mov	r5,zero
   84108:	b80d883a 	mov	r6,r23
   8410c:	008521c0 	call	8521c <memset>
   84110:	84000715 	stw	r16,28(r16)
   84114:	85800815 	stw	r22,32(r16)
   84118:	85400915 	stw	r21,36(r16)
   8411c:	85000a15 	stw	r20,40(r16)
   84120:	84c00b15 	stw	r19,44(r16)
   84124:	dfc00917 	ldw	ra,36(sp)
   84128:	df000817 	ldw	fp,32(sp)
   8412c:	ddc00717 	ldw	r23,28(sp)
   84130:	dd800617 	ldw	r22,24(sp)
   84134:	dd400517 	ldw	r21,20(sp)
   84138:	dd000417 	ldw	r20,16(sp)
   8413c:	dcc00317 	ldw	r19,12(sp)
   84140:	dc800217 	ldw	r18,8(sp)
   84144:	dc400117 	ldw	r17,4(sp)
   84148:	dc000017 	ldw	r16,0(sp)
   8414c:	dec00a04 	addi	sp,sp,40
   84150:	f800283a 	ret

00084154 <__sfmoreglue>:
   84154:	defffc04 	addi	sp,sp,-16
   84158:	dc400115 	stw	r17,4(sp)
   8415c:	2c401a24 	muli	r17,r5,104
   84160:	dc800215 	stw	r18,8(sp)
   84164:	2825883a 	mov	r18,r5
   84168:	89400304 	addi	r5,r17,12
   8416c:	dc000015 	stw	r16,0(sp)
   84170:	dfc00315 	stw	ra,12(sp)
   84174:	0084a740 	call	84a74 <_malloc_r>
   84178:	1021883a 	mov	r16,r2
   8417c:	10000726 	beq	r2,zero,8419c <__sfmoreglue+0x48>
   84180:	11000304 	addi	r4,r2,12
   84184:	10000015 	stw	zero,0(r2)
   84188:	14800115 	stw	r18,4(r2)
   8418c:	11000215 	stw	r4,8(r2)
   84190:	000b883a 	mov	r5,zero
   84194:	880d883a 	mov	r6,r17
   84198:	008521c0 	call	8521c <memset>
   8419c:	8005883a 	mov	r2,r16
   841a0:	dfc00317 	ldw	ra,12(sp)
   841a4:	dc800217 	ldw	r18,8(sp)
   841a8:	dc400117 	ldw	r17,4(sp)
   841ac:	dc000017 	ldw	r16,0(sp)
   841b0:	dec00404 	addi	sp,sp,16
   841b4:	f800283a 	ret

000841b8 <__sfp>:
   841b8:	00800234 	movhi	r2,8
   841bc:	defffb04 	addi	sp,sp,-20
   841c0:	109ec104 	addi	r2,r2,31492
   841c4:	dc800215 	stw	r18,8(sp)
   841c8:	14800017 	ldw	r18,0(r2)
   841cc:	dcc00315 	stw	r19,12(sp)
   841d0:	dfc00415 	stw	ra,16(sp)
   841d4:	90800e17 	ldw	r2,56(r18)
   841d8:	dc400115 	stw	r17,4(sp)
   841dc:	dc000015 	stw	r16,0(sp)
   841e0:	2027883a 	mov	r19,r4
   841e4:	1000021e 	bne	r2,zero,841f0 <__sfp+0x38>
   841e8:	9009883a 	mov	r4,r18
   841ec:	0083fb40 	call	83fb4 <__sinit.part.1>
   841f0:	9480b804 	addi	r18,r18,736
   841f4:	047fffc4 	movi	r17,-1
   841f8:	91400117 	ldw	r5,4(r18)
   841fc:	94000217 	ldw	r16,8(r18)
   84200:	297fffc4 	addi	r5,r5,-1
   84204:	28000a16 	blt	r5,zero,84230 <__sfp+0x78>
   84208:	8080030f 	ldh	r2,12(r16)
   8420c:	10000c26 	beq	r2,zero,84240 <__sfp+0x88>
   84210:	80c01d04 	addi	r3,r16,116
   84214:	00000206 	br	84220 <__sfp+0x68>
   84218:	18bfe60f 	ldh	r2,-104(r3)
   8421c:	10000826 	beq	r2,zero,84240 <__sfp+0x88>
   84220:	297fffc4 	addi	r5,r5,-1
   84224:	1c3ffd04 	addi	r16,r3,-12
   84228:	18c01a04 	addi	r3,r3,104
   8422c:	2c7ffa1e 	bne	r5,r17,84218 <rx_descriptor_end+0xfff841b8>
   84230:	90800017 	ldw	r2,0(r18)
   84234:	10001d26 	beq	r2,zero,842ac <__sfp+0xf4>
   84238:	1025883a 	mov	r18,r2
   8423c:	003fee06 	br	841f8 <rx_descriptor_end+0xfff84198>
   84240:	00bfffc4 	movi	r2,-1
   84244:	8080038d 	sth	r2,14(r16)
   84248:	00800044 	movi	r2,1
   8424c:	8080030d 	sth	r2,12(r16)
   84250:	80001915 	stw	zero,100(r16)
   84254:	80000015 	stw	zero,0(r16)
   84258:	80000215 	stw	zero,8(r16)
   8425c:	80000115 	stw	zero,4(r16)
   84260:	80000415 	stw	zero,16(r16)
   84264:	80000515 	stw	zero,20(r16)
   84268:	80000615 	stw	zero,24(r16)
   8426c:	81001704 	addi	r4,r16,92
   84270:	000b883a 	mov	r5,zero
   84274:	01800204 	movi	r6,8
   84278:	008521c0 	call	8521c <memset>
   8427c:	8005883a 	mov	r2,r16
   84280:	80000c15 	stw	zero,48(r16)
   84284:	80000d15 	stw	zero,52(r16)
   84288:	80001115 	stw	zero,68(r16)
   8428c:	80001215 	stw	zero,72(r16)
   84290:	dfc00417 	ldw	ra,16(sp)
   84294:	dcc00317 	ldw	r19,12(sp)
   84298:	dc800217 	ldw	r18,8(sp)
   8429c:	dc400117 	ldw	r17,4(sp)
   842a0:	dc000017 	ldw	r16,0(sp)
   842a4:	dec00504 	addi	sp,sp,20
   842a8:	f800283a 	ret
   842ac:	9809883a 	mov	r4,r19
   842b0:	01400104 	movi	r5,4
   842b4:	00841540 	call	84154 <__sfmoreglue>
   842b8:	90800015 	stw	r2,0(r18)
   842bc:	103fde1e 	bne	r2,zero,84238 <rx_descriptor_end+0xfff841d8>
   842c0:	00800304 	movi	r2,12
   842c4:	98800015 	stw	r2,0(r19)
   842c8:	0005883a 	mov	r2,zero
   842cc:	003ff006 	br	84290 <rx_descriptor_end+0xfff84230>

000842d0 <_cleanup>:
   842d0:	00800234 	movhi	r2,8
   842d4:	109ec104 	addi	r2,r2,31492
   842d8:	11000017 	ldw	r4,0(r2)
   842dc:	01400234 	movhi	r5,8
   842e0:	2955a004 	addi	r5,r5,22144
   842e4:	008474c1 	jmpi	8474c <_fwalk>

000842e8 <__sinit>:
   842e8:	20800e17 	ldw	r2,56(r4)
   842ec:	10000126 	beq	r2,zero,842f4 <__sinit+0xc>
   842f0:	f800283a 	ret
   842f4:	0083fb41 	jmpi	83fb4 <__sinit.part.1>

000842f8 <__sfp_lock_acquire>:
   842f8:	f800283a 	ret

000842fc <__sfp_lock_release>:
   842fc:	f800283a 	ret

00084300 <__sinit_lock_acquire>:
   84300:	f800283a 	ret

00084304 <__sinit_lock_release>:
   84304:	f800283a 	ret

00084308 <__fp_lock_all>:
   84308:	00800234 	movhi	r2,8
   8430c:	109ec204 	addi	r2,r2,31496
   84310:	11000017 	ldw	r4,0(r2)
   84314:	01400234 	movhi	r5,8
   84318:	294fe604 	addi	r5,r5,16280
   8431c:	008474c1 	jmpi	8474c <_fwalk>

00084320 <__fp_unlock_all>:
   84320:	00800234 	movhi	r2,8
   84324:	109ec204 	addi	r2,r2,31496
   84328:	11000017 	ldw	r4,0(r2)
   8432c:	01400234 	movhi	r5,8
   84330:	294fe804 	addi	r5,r5,16288
   84334:	008474c1 	jmpi	8474c <_fwalk>

00084338 <_malloc_trim_r>:
   84338:	defffb04 	addi	sp,sp,-20
   8433c:	dcc00315 	stw	r19,12(sp)
   84340:	04c00234 	movhi	r19,8
   84344:	dc800215 	stw	r18,8(sp)
   84348:	dc400115 	stw	r17,4(sp)
   8434c:	dc000015 	stw	r16,0(sp)
   84350:	dfc00415 	stw	ra,16(sp)
   84354:	2821883a 	mov	r16,r5
   84358:	9cddb404 	addi	r19,r19,30416
   8435c:	2025883a 	mov	r18,r4
   84360:	0085b440 	call	85b44 <__malloc_lock>
   84364:	98800217 	ldw	r2,8(r19)
   84368:	14400117 	ldw	r17,4(r2)
   8436c:	00bfff04 	movi	r2,-4
   84370:	88a2703a 	and	r17,r17,r2
   84374:	8c21c83a 	sub	r16,r17,r16
   84378:	8403fbc4 	addi	r16,r16,4079
   8437c:	8020d33a 	srli	r16,r16,12
   84380:	0083ffc4 	movi	r2,4095
   84384:	843fffc4 	addi	r16,r16,-1
   84388:	8020933a 	slli	r16,r16,12
   8438c:	1400060e 	bge	r2,r16,843a8 <_malloc_trim_r+0x70>
   84390:	9009883a 	mov	r4,r18
   84394:	000b883a 	mov	r5,zero
   84398:	00853400 	call	85340 <_sbrk_r>
   8439c:	98c00217 	ldw	r3,8(r19)
   843a0:	1c47883a 	add	r3,r3,r17
   843a4:	10c00a26 	beq	r2,r3,843d0 <_malloc_trim_r+0x98>
   843a8:	9009883a 	mov	r4,r18
   843ac:	0085b640 	call	85b64 <__malloc_unlock>
   843b0:	0005883a 	mov	r2,zero
   843b4:	dfc00417 	ldw	ra,16(sp)
   843b8:	dcc00317 	ldw	r19,12(sp)
   843bc:	dc800217 	ldw	r18,8(sp)
   843c0:	dc400117 	ldw	r17,4(sp)
   843c4:	dc000017 	ldw	r16,0(sp)
   843c8:	dec00504 	addi	sp,sp,20
   843cc:	f800283a 	ret
   843d0:	9009883a 	mov	r4,r18
   843d4:	040bc83a 	sub	r5,zero,r16
   843d8:	00853400 	call	85340 <_sbrk_r>
   843dc:	00ffffc4 	movi	r3,-1
   843e0:	10c00d26 	beq	r2,r3,84418 <_malloc_trim_r+0xe0>
   843e4:	00c00274 	movhi	r3,9
   843e8:	18e68a04 	addi	r3,r3,-26072
   843ec:	18800017 	ldw	r2,0(r3)
   843f0:	99000217 	ldw	r4,8(r19)
   843f4:	8c23c83a 	sub	r17,r17,r16
   843f8:	8c400054 	ori	r17,r17,1
   843fc:	1421c83a 	sub	r16,r2,r16
   84400:	24400115 	stw	r17,4(r4)
   84404:	9009883a 	mov	r4,r18
   84408:	1c000015 	stw	r16,0(r3)
   8440c:	0085b640 	call	85b64 <__malloc_unlock>
   84410:	00800044 	movi	r2,1
   84414:	003fe706 	br	843b4 <rx_descriptor_end+0xfff84354>
   84418:	9009883a 	mov	r4,r18
   8441c:	000b883a 	mov	r5,zero
   84420:	00853400 	call	85340 <_sbrk_r>
   84424:	99000217 	ldw	r4,8(r19)
   84428:	014003c4 	movi	r5,15
   8442c:	1107c83a 	sub	r3,r2,r4
   84430:	28ffdd0e 	bge	r5,r3,843a8 <rx_descriptor_end+0xfff84348>
   84434:	01400234 	movhi	r5,8
   84438:	295ec304 	addi	r5,r5,31500
   8443c:	29400017 	ldw	r5,0(r5)
   84440:	18c00054 	ori	r3,r3,1
   84444:	20c00115 	stw	r3,4(r4)
   84448:	00c00274 	movhi	r3,9
   8444c:	1145c83a 	sub	r2,r2,r5
   84450:	18e68a04 	addi	r3,r3,-26072
   84454:	18800015 	stw	r2,0(r3)
   84458:	003fd306 	br	843a8 <rx_descriptor_end+0xfff84348>

0008445c <_free_r>:
   8445c:	28004c26 	beq	r5,zero,84590 <_free_r+0x134>
   84460:	defffd04 	addi	sp,sp,-12
   84464:	dc400115 	stw	r17,4(sp)
   84468:	dc000015 	stw	r16,0(sp)
   8446c:	2023883a 	mov	r17,r4
   84470:	2821883a 	mov	r16,r5
   84474:	dfc00215 	stw	ra,8(sp)
   84478:	0085b440 	call	85b44 <__malloc_lock>
   8447c:	813fff17 	ldw	r4,-4(r16)
   84480:	00bfff84 	movi	r2,-2
   84484:	02400234 	movhi	r9,8
   84488:	81bffe04 	addi	r6,r16,-8
   8448c:	2084703a 	and	r2,r4,r2
   84490:	4a5db404 	addi	r9,r9,30416
   84494:	308b883a 	add	r5,r6,r2
   84498:	2a000117 	ldw	r8,4(r5)
   8449c:	49c00217 	ldw	r7,8(r9)
   844a0:	00ffff04 	movi	r3,-4
   844a4:	40c6703a 	and	r3,r8,r3
   844a8:	39405326 	beq	r7,r5,845f8 <_free_r+0x19c>
   844ac:	28c00115 	stw	r3,4(r5)
   844b0:	2100004c 	andi	r4,r4,1
   844b4:	2000091e 	bne	r4,zero,844dc <_free_r+0x80>
   844b8:	81fffe17 	ldw	r7,-8(r16)
   844bc:	4a000204 	addi	r8,r9,8
   844c0:	31cdc83a 	sub	r6,r6,r7
   844c4:	31000217 	ldw	r4,8(r6)
   844c8:	11c5883a 	add	r2,r2,r7
   844cc:	22006126 	beq	r4,r8,84654 <_free_r+0x1f8>
   844d0:	31c00317 	ldw	r7,12(r6)
   844d4:	21c00315 	stw	r7,12(r4)
   844d8:	39000215 	stw	r4,8(r7)
   844dc:	28c9883a 	add	r4,r5,r3
   844e0:	21c00117 	ldw	r7,4(r4)
   844e4:	39c0004c 	andi	r7,r7,1
   844e8:	38000d1e 	bne	r7,zero,84520 <_free_r+0xc4>
   844ec:	29000217 	ldw	r4,8(r5)
   844f0:	10c5883a 	add	r2,r2,r3
   844f4:	00c00234 	movhi	r3,8
   844f8:	18ddb604 	addi	r3,r3,30424
   844fc:	20c07526 	beq	r4,r3,846d4 <_free_r+0x278>
   84500:	29c00317 	ldw	r7,12(r5)
   84504:	11400054 	ori	r5,r2,1
   84508:	3087883a 	add	r3,r6,r2
   8450c:	21c00315 	stw	r7,12(r4)
   84510:	39000215 	stw	r4,8(r7)
   84514:	31400115 	stw	r5,4(r6)
   84518:	18800015 	stw	r2,0(r3)
   8451c:	00000406 	br	84530 <_free_r+0xd4>
   84520:	10c00054 	ori	r3,r2,1
   84524:	30c00115 	stw	r3,4(r6)
   84528:	3087883a 	add	r3,r6,r2
   8452c:	18800015 	stw	r2,0(r3)
   84530:	00c07fc4 	movi	r3,511
   84534:	18801736 	bltu	r3,r2,84594 <_free_r+0x138>
   84538:	1004d0fa 	srli	r2,r2,3
   8453c:	01400044 	movi	r5,1
   84540:	49000117 	ldw	r4,4(r9)
   84544:	1087883a 	add	r3,r2,r2
   84548:	18c7883a 	add	r3,r3,r3
   8454c:	1005d0ba 	srai	r2,r2,2
   84550:	18c7883a 	add	r3,r3,r3
   84554:	1a47883a 	add	r3,r3,r9
   84558:	19c00217 	ldw	r7,8(r3)
   8455c:	2884983a 	sll	r2,r5,r2
   84560:	30c00315 	stw	r3,12(r6)
   84564:	31c00215 	stw	r7,8(r6)
   84568:	1104b03a 	or	r2,r2,r4
   8456c:	19800215 	stw	r6,8(r3)
   84570:	48800115 	stw	r2,4(r9)
   84574:	39800315 	stw	r6,12(r7)
   84578:	8809883a 	mov	r4,r17
   8457c:	dfc00217 	ldw	ra,8(sp)
   84580:	dc400117 	ldw	r17,4(sp)
   84584:	dc000017 	ldw	r16,0(sp)
   84588:	dec00304 	addi	sp,sp,12
   8458c:	0085b641 	jmpi	85b64 <__malloc_unlock>
   84590:	f800283a 	ret
   84594:	1006d27a 	srli	r3,r2,9
   84598:	01000104 	movi	r4,4
   8459c:	20c04036 	bltu	r4,r3,846a0 <_free_r+0x244>
   845a0:	1006d1ba 	srli	r3,r2,6
   845a4:	19400e04 	addi	r5,r3,56
   845a8:	2947883a 	add	r3,r5,r5
   845ac:	18c7883a 	add	r3,r3,r3
   845b0:	18c7883a 	add	r3,r3,r3
   845b4:	1a49883a 	add	r4,r3,r9
   845b8:	20c00217 	ldw	r3,8(r4)
   845bc:	01c00234 	movhi	r7,8
   845c0:	39ddb404 	addi	r7,r7,30416
   845c4:	19003b26 	beq	r3,r4,846b4 <_free_r+0x258>
   845c8:	01ffff04 	movi	r7,-4
   845cc:	19400117 	ldw	r5,4(r3)
   845d0:	29ca703a 	and	r5,r5,r7
   845d4:	1140022e 	bgeu	r2,r5,845e0 <_free_r+0x184>
   845d8:	18c00217 	ldw	r3,8(r3)
   845dc:	20fffb1e 	bne	r4,r3,845cc <rx_descriptor_end+0xfff8456c>
   845e0:	18800317 	ldw	r2,12(r3)
   845e4:	30800315 	stw	r2,12(r6)
   845e8:	30c00215 	stw	r3,8(r6)
   845ec:	11800215 	stw	r6,8(r2)
   845f0:	19800315 	stw	r6,12(r3)
   845f4:	003fe006 	br	84578 <rx_descriptor_end+0xfff84518>
   845f8:	2100004c 	andi	r4,r4,1
   845fc:	1885883a 	add	r2,r3,r2
   84600:	2000071e 	bne	r4,zero,84620 <_free_r+0x1c4>
   84604:	817ffe17 	ldw	r5,-8(r16)
   84608:	314dc83a 	sub	r6,r6,r5
   8460c:	30c00317 	ldw	r3,12(r6)
   84610:	31000217 	ldw	r4,8(r6)
   84614:	1145883a 	add	r2,r2,r5
   84618:	20c00315 	stw	r3,12(r4)
   8461c:	19000215 	stw	r4,8(r3)
   84620:	10c00054 	ori	r3,r2,1
   84624:	30c00115 	stw	r3,4(r6)
   84628:	00c00234 	movhi	r3,8
   8462c:	18dec404 	addi	r3,r3,31504
   84630:	18c00017 	ldw	r3,0(r3)
   84634:	49800215 	stw	r6,8(r9)
   84638:	10ffcf36 	bltu	r2,r3,84578 <rx_descriptor_end+0xfff84518>
   8463c:	00800274 	movhi	r2,9
   84640:	10a58904 	addi	r2,r2,-27100
   84644:	11400017 	ldw	r5,0(r2)
   84648:	8809883a 	mov	r4,r17
   8464c:	00843380 	call	84338 <_malloc_trim_r>
   84650:	003fc906 	br	84578 <rx_descriptor_end+0xfff84518>
   84654:	28c9883a 	add	r4,r5,r3
   84658:	21000117 	ldw	r4,4(r4)
   8465c:	2100004c 	andi	r4,r4,1
   84660:	20000a1e 	bne	r4,zero,8468c <_free_r+0x230>
   84664:	29000317 	ldw	r4,12(r5)
   84668:	29400217 	ldw	r5,8(r5)
   8466c:	10c5883a 	add	r2,r2,r3
   84670:	10c00054 	ori	r3,r2,1
   84674:	29000315 	stw	r4,12(r5)
   84678:	21400215 	stw	r5,8(r4)
   8467c:	30c00115 	stw	r3,4(r6)
   84680:	308d883a 	add	r6,r6,r2
   84684:	30800015 	stw	r2,0(r6)
   84688:	003fbb06 	br	84578 <rx_descriptor_end+0xfff84518>
   8468c:	10c00054 	ori	r3,r2,1
   84690:	30c00115 	stw	r3,4(r6)
   84694:	308d883a 	add	r6,r6,r2
   84698:	30800015 	stw	r2,0(r6)
   8469c:	003fb606 	br	84578 <rx_descriptor_end+0xfff84518>
   846a0:	01000504 	movi	r4,20
   846a4:	20c01436 	bltu	r4,r3,846f8 <_free_r+0x29c>
   846a8:	194016c4 	addi	r5,r3,91
   846ac:	2947883a 	add	r3,r5,r5
   846b0:	003fbe06 	br	845ac <rx_descriptor_end+0xfff8454c>
   846b4:	280bd0ba 	srai	r5,r5,2
   846b8:	00800044 	movi	r2,1
   846bc:	39000117 	ldw	r4,4(r7)
   846c0:	114a983a 	sll	r5,r2,r5
   846c4:	1805883a 	mov	r2,r3
   846c8:	2908b03a 	or	r4,r5,r4
   846cc:	39000115 	stw	r4,4(r7)
   846d0:	003fc406 	br	845e4 <rx_descriptor_end+0xfff84584>
   846d4:	49800515 	stw	r6,20(r9)
   846d8:	49800415 	stw	r6,16(r9)
   846dc:	10c00054 	ori	r3,r2,1
   846e0:	31000315 	stw	r4,12(r6)
   846e4:	31000215 	stw	r4,8(r6)
   846e8:	30c00115 	stw	r3,4(r6)
   846ec:	308d883a 	add	r6,r6,r2
   846f0:	30800015 	stw	r2,0(r6)
   846f4:	003fa006 	br	84578 <rx_descriptor_end+0xfff84518>
   846f8:	01001504 	movi	r4,84
   846fc:	20c00436 	bltu	r4,r3,84710 <_free_r+0x2b4>
   84700:	1006d33a 	srli	r3,r2,12
   84704:	19401b84 	addi	r5,r3,110
   84708:	2947883a 	add	r3,r5,r5
   8470c:	003fa706 	br	845ac <rx_descriptor_end+0xfff8454c>
   84710:	01005504 	movi	r4,340
   84714:	20c00436 	bltu	r4,r3,84728 <_free_r+0x2cc>
   84718:	1006d3fa 	srli	r3,r2,15
   8471c:	19401dc4 	addi	r5,r3,119
   84720:	2947883a 	add	r3,r5,r5
   84724:	003fa106 	br	845ac <rx_descriptor_end+0xfff8454c>
   84728:	01015504 	movi	r4,1364
   8472c:	20c00436 	bltu	r4,r3,84740 <_free_r+0x2e4>
   84730:	1006d4ba 	srli	r3,r2,18
   84734:	19401f04 	addi	r5,r3,124
   84738:	2947883a 	add	r3,r5,r5
   8473c:	003f9b06 	br	845ac <rx_descriptor_end+0xfff8454c>
   84740:	00c03f04 	movi	r3,252
   84744:	01401f84 	movi	r5,126
   84748:	003f9806 	br	845ac <rx_descriptor_end+0xfff8454c>

0008474c <_fwalk>:
   8474c:	defff804 	addi	sp,sp,-32
   84750:	dd400515 	stw	r21,20(sp)
   84754:	2540b804 	addi	r21,r4,736
   84758:	dd800615 	stw	r22,24(sp)
   8475c:	dd000415 	stw	r20,16(sp)
   84760:	dfc00715 	stw	ra,28(sp)
   84764:	dcc00315 	stw	r19,12(sp)
   84768:	dc800215 	stw	r18,8(sp)
   8476c:	dc400115 	stw	r17,4(sp)
   84770:	dc000015 	stw	r16,0(sp)
   84774:	2829883a 	mov	r20,r5
   84778:	002d883a 	mov	r22,zero
   8477c:	00842f80 	call	842f8 <__sfp_lock_acquire>
   84780:	a8001426 	beq	r21,zero,847d4 <_fwalk+0x88>
   84784:	04ffffc4 	movi	r19,-1
   84788:	ac400117 	ldw	r17,4(r21)
   8478c:	ac800217 	ldw	r18,8(r21)
   84790:	8c7fffc4 	addi	r17,r17,-1
   84794:	88000d16 	blt	r17,zero,847cc <_fwalk+0x80>
   84798:	94000304 	addi	r16,r18,12
   8479c:	94800384 	addi	r18,r18,14
   847a0:	80c0000f 	ldh	r3,0(r16)
   847a4:	8c7fffc4 	addi	r17,r17,-1
   847a8:	813ffd04 	addi	r4,r16,-12
   847ac:	18000426 	beq	r3,zero,847c0 <_fwalk+0x74>
   847b0:	90c0000f 	ldh	r3,0(r18)
   847b4:	1cc00226 	beq	r3,r19,847c0 <_fwalk+0x74>
   847b8:	a03ee83a 	callr	r20
   847bc:	b0acb03a 	or	r22,r22,r2
   847c0:	84001a04 	addi	r16,r16,104
   847c4:	94801a04 	addi	r18,r18,104
   847c8:	8cfff51e 	bne	r17,r19,847a0 <rx_descriptor_end+0xfff84740>
   847cc:	ad400017 	ldw	r21,0(r21)
   847d0:	a83fed1e 	bne	r21,zero,84788 <rx_descriptor_end+0xfff84728>
   847d4:	00842fc0 	call	842fc <__sfp_lock_release>
   847d8:	b005883a 	mov	r2,r22
   847dc:	dfc00717 	ldw	ra,28(sp)
   847e0:	dd800617 	ldw	r22,24(sp)
   847e4:	dd400517 	ldw	r21,20(sp)
   847e8:	dd000417 	ldw	r20,16(sp)
   847ec:	dcc00317 	ldw	r19,12(sp)
   847f0:	dc800217 	ldw	r18,8(sp)
   847f4:	dc400117 	ldw	r17,4(sp)
   847f8:	dc000017 	ldw	r16,0(sp)
   847fc:	dec00804 	addi	sp,sp,32
   84800:	f800283a 	ret

00084804 <_fwalk_reent>:
   84804:	defff804 	addi	sp,sp,-32
   84808:	dd400515 	stw	r21,20(sp)
   8480c:	2540b804 	addi	r21,r4,736
   84810:	dd800615 	stw	r22,24(sp)
   84814:	dd000415 	stw	r20,16(sp)
   84818:	dcc00315 	stw	r19,12(sp)
   8481c:	dfc00715 	stw	ra,28(sp)
   84820:	dc800215 	stw	r18,8(sp)
   84824:	dc400115 	stw	r17,4(sp)
   84828:	dc000015 	stw	r16,0(sp)
   8482c:	2027883a 	mov	r19,r4
   84830:	2829883a 	mov	r20,r5
   84834:	002d883a 	mov	r22,zero
   84838:	00842f80 	call	842f8 <__sfp_lock_acquire>
   8483c:	a8001326 	beq	r21,zero,8488c <_fwalk_reent+0x88>
   84840:	04bfffc4 	movi	r18,-1
   84844:	ac400117 	ldw	r17,4(r21)
   84848:	ac000217 	ldw	r16,8(r21)
   8484c:	8c7fffc4 	addi	r17,r17,-1
   84850:	88000c16 	blt	r17,zero,84884 <_fwalk_reent+0x80>
   84854:	84000304 	addi	r16,r16,12
   84858:	80c0000f 	ldh	r3,0(r16)
   8485c:	8c7fffc4 	addi	r17,r17,-1
   84860:	817ffd04 	addi	r5,r16,-12
   84864:	18000526 	beq	r3,zero,8487c <_fwalk_reent+0x78>
   84868:	80c0008f 	ldh	r3,2(r16)
   8486c:	9809883a 	mov	r4,r19
   84870:	1c800226 	beq	r3,r18,8487c <_fwalk_reent+0x78>
   84874:	a03ee83a 	callr	r20
   84878:	b0acb03a 	or	r22,r22,r2
   8487c:	84001a04 	addi	r16,r16,104
   84880:	8cbff51e 	bne	r17,r18,84858 <rx_descriptor_end+0xfff847f8>
   84884:	ad400017 	ldw	r21,0(r21)
   84888:	a83fee1e 	bne	r21,zero,84844 <rx_descriptor_end+0xfff847e4>
   8488c:	00842fc0 	call	842fc <__sfp_lock_release>
   84890:	b005883a 	mov	r2,r22
   84894:	dfc00717 	ldw	ra,28(sp)
   84898:	dd800617 	ldw	r22,24(sp)
   8489c:	dd400517 	ldw	r21,20(sp)
   848a0:	dd000417 	ldw	r20,16(sp)
   848a4:	dcc00317 	ldw	r19,12(sp)
   848a8:	dc800217 	ldw	r18,8(sp)
   848ac:	dc400117 	ldw	r17,4(sp)
   848b0:	dc000017 	ldw	r16,0(sp)
   848b4:	dec00804 	addi	sp,sp,32
   848b8:	f800283a 	ret

000848bc <__smakebuf_r>:
   848bc:	2880030b 	ldhu	r2,12(r5)
   848c0:	10c0008c 	andi	r3,r2,2
   848c4:	1800401e 	bne	r3,zero,849c8 <__smakebuf_r+0x10c>
   848c8:	deffec04 	addi	sp,sp,-80
   848cc:	dc000f15 	stw	r16,60(sp)
   848d0:	2821883a 	mov	r16,r5
   848d4:	2940038f 	ldh	r5,14(r5)
   848d8:	dc401015 	stw	r17,64(sp)
   848dc:	dfc01315 	stw	ra,76(sp)
   848e0:	dcc01215 	stw	r19,72(sp)
   848e4:	dc801115 	stw	r18,68(sp)
   848e8:	2023883a 	mov	r17,r4
   848ec:	28001b16 	blt	r5,zero,8495c <__smakebuf_r+0xa0>
   848f0:	d80d883a 	mov	r6,sp
   848f4:	00856940 	call	85694 <_fstat_r>
   848f8:	10001716 	blt	r2,zero,84958 <__smakebuf_r+0x9c>
   848fc:	d8800117 	ldw	r2,4(sp)
   84900:	00e00014 	movui	r3,32768
   84904:	10bc000c 	andi	r2,r2,61440
   84908:	10c03726 	beq	r2,r3,849e8 <__smakebuf_r+0x12c>
   8490c:	80c0030b 	ldhu	r3,12(r16)
   84910:	18c20014 	ori	r3,r3,2048
   84914:	80c0030d 	sth	r3,12(r16)
   84918:	00c80004 	movi	r3,8192
   8491c:	10c03c1e 	bne	r2,r3,84a10 <__smakebuf_r+0x154>
   84920:	8140038f 	ldh	r5,14(r16)
   84924:	8809883a 	mov	r4,r17
   84928:	00856ec0 	call	856ec <_isatty_r>
   8492c:	10004e26 	beq	r2,zero,84a68 <__smakebuf_r+0x1ac>
   84930:	8080030b 	ldhu	r2,12(r16)
   84934:	04c00044 	movi	r19,1
   84938:	80c010c4 	addi	r3,r16,67
   8493c:	14c4b03a 	or	r2,r2,r19
   84940:	8080030d 	sth	r2,12(r16)
   84944:	80c00015 	stw	r3,0(r16)
   84948:	80c00415 	stw	r3,16(r16)
   8494c:	84c00515 	stw	r19,20(r16)
   84950:	04810004 	movi	r18,1024
   84954:	00000706 	br	84974 <__smakebuf_r+0xb8>
   84958:	8080030b 	ldhu	r2,12(r16)
   8495c:	10c0200c 	andi	r3,r2,128
   84960:	18001f1e 	bne	r3,zero,849e0 <__smakebuf_r+0x124>
   84964:	04810004 	movi	r18,1024
   84968:	10820014 	ori	r2,r2,2048
   8496c:	8080030d 	sth	r2,12(r16)
   84970:	0027883a 	mov	r19,zero
   84974:	8809883a 	mov	r4,r17
   84978:	900b883a 	mov	r5,r18
   8497c:	0084a740 	call	84a74 <_malloc_r>
   84980:	10002e26 	beq	r2,zero,84a3c <__smakebuf_r+0x180>
   84984:	80c0030b 	ldhu	r3,12(r16)
   84988:	01000234 	movhi	r4,8
   8498c:	210fea04 	addi	r4,r4,16296
   84990:	89000f15 	stw	r4,60(r17)
   84994:	18c02014 	ori	r3,r3,128
   84998:	80c0030d 	sth	r3,12(r16)
   8499c:	80800015 	stw	r2,0(r16)
   849a0:	80800415 	stw	r2,16(r16)
   849a4:	84800515 	stw	r18,20(r16)
   849a8:	98001c1e 	bne	r19,zero,84a1c <__smakebuf_r+0x160>
   849ac:	dfc01317 	ldw	ra,76(sp)
   849b0:	dcc01217 	ldw	r19,72(sp)
   849b4:	dc801117 	ldw	r18,68(sp)
   849b8:	dc401017 	ldw	r17,64(sp)
   849bc:	dc000f17 	ldw	r16,60(sp)
   849c0:	dec01404 	addi	sp,sp,80
   849c4:	f800283a 	ret
   849c8:	288010c4 	addi	r2,r5,67
   849cc:	28800015 	stw	r2,0(r5)
   849d0:	28800415 	stw	r2,16(r5)
   849d4:	00800044 	movi	r2,1
   849d8:	28800515 	stw	r2,20(r5)
   849dc:	f800283a 	ret
   849e0:	04801004 	movi	r18,64
   849e4:	003fe006 	br	84968 <rx_descriptor_end+0xfff84908>
   849e8:	81000a17 	ldw	r4,40(r16)
   849ec:	00c00234 	movhi	r3,8
   849f0:	18d51b04 	addi	r3,r3,21612
   849f4:	20ffc51e 	bne	r4,r3,8490c <rx_descriptor_end+0xfff848ac>
   849f8:	80c0030b 	ldhu	r3,12(r16)
   849fc:	01010004 	movi	r4,1024
   84a00:	81001315 	stw	r4,76(r16)
   84a04:	1906b03a 	or	r3,r3,r4
   84a08:	80c0030d 	sth	r3,12(r16)
   84a0c:	003fc206 	br	84918 <rx_descriptor_end+0xfff848b8>
   84a10:	0027883a 	mov	r19,zero
   84a14:	04810004 	movi	r18,1024
   84a18:	003fd606 	br	84974 <rx_descriptor_end+0xfff84914>
   84a1c:	8140038f 	ldh	r5,14(r16)
   84a20:	8809883a 	mov	r4,r17
   84a24:	00856ec0 	call	856ec <_isatty_r>
   84a28:	103fe026 	beq	r2,zero,849ac <rx_descriptor_end+0xfff8494c>
   84a2c:	8080030b 	ldhu	r2,12(r16)
   84a30:	10800054 	ori	r2,r2,1
   84a34:	8080030d 	sth	r2,12(r16)
   84a38:	003fdc06 	br	849ac <rx_descriptor_end+0xfff8494c>
   84a3c:	8080030b 	ldhu	r2,12(r16)
   84a40:	10c0800c 	andi	r3,r2,512
   84a44:	183fd91e 	bne	r3,zero,849ac <rx_descriptor_end+0xfff8494c>
   84a48:	10800094 	ori	r2,r2,2
   84a4c:	80c010c4 	addi	r3,r16,67
   84a50:	8080030d 	sth	r2,12(r16)
   84a54:	00800044 	movi	r2,1
   84a58:	80c00015 	stw	r3,0(r16)
   84a5c:	80c00415 	stw	r3,16(r16)
   84a60:	80800515 	stw	r2,20(r16)
   84a64:	003fd106 	br	849ac <rx_descriptor_end+0xfff8494c>
   84a68:	04c00044 	movi	r19,1
   84a6c:	04810004 	movi	r18,1024
   84a70:	003fc006 	br	84974 <rx_descriptor_end+0xfff84914>

00084a74 <_malloc_r>:
   84a74:	defff504 	addi	sp,sp,-44
   84a78:	dc800315 	stw	r18,12(sp)
   84a7c:	dfc00a15 	stw	ra,40(sp)
   84a80:	df000915 	stw	fp,36(sp)
   84a84:	ddc00815 	stw	r23,32(sp)
   84a88:	dd800715 	stw	r22,28(sp)
   84a8c:	dd400615 	stw	r21,24(sp)
   84a90:	dd000515 	stw	r20,20(sp)
   84a94:	dcc00415 	stw	r19,16(sp)
   84a98:	dc400215 	stw	r17,8(sp)
   84a9c:	dc000115 	stw	r16,4(sp)
   84aa0:	288002c4 	addi	r2,r5,11
   84aa4:	00c00584 	movi	r3,22
   84aa8:	2025883a 	mov	r18,r4
   84aac:	18802a2e 	bgeu	r3,r2,84b58 <_malloc_r+0xe4>
   84ab0:	047ffe04 	movi	r17,-8
   84ab4:	1462703a 	and	r17,r2,r17
   84ab8:	88009e16 	blt	r17,zero,84d34 <_malloc_r+0x2c0>
   84abc:	89409d36 	bltu	r17,r5,84d34 <_malloc_r+0x2c0>
   84ac0:	0085b440 	call	85b44 <__malloc_lock>
   84ac4:	00807dc4 	movi	r2,503
   84ac8:	14402736 	bltu	r2,r17,84b68 <_malloc_r+0xf4>
   84acc:	8806d0fa 	srli	r3,r17,3
   84ad0:	04c00234 	movhi	r19,8
   84ad4:	9cddb404 	addi	r19,r19,30416
   84ad8:	18c5883a 	add	r2,r3,r3
   84adc:	1085883a 	add	r2,r2,r2
   84ae0:	1085883a 	add	r2,r2,r2
   84ae4:	9885883a 	add	r2,r19,r2
   84ae8:	14000317 	ldw	r16,12(r2)
   84aec:	80814a26 	beq	r16,r2,85018 <_malloc_r+0x5a4>
   84af0:	80c00117 	ldw	r3,4(r16)
   84af4:	81000317 	ldw	r4,12(r16)
   84af8:	00bfff04 	movi	r2,-4
   84afc:	1884703a 	and	r2,r3,r2
   84b00:	81400217 	ldw	r5,8(r16)
   84b04:	8085883a 	add	r2,r16,r2
   84b08:	10c00117 	ldw	r3,4(r2)
   84b0c:	29000315 	stw	r4,12(r5)
   84b10:	21400215 	stw	r5,8(r4)
   84b14:	18c00054 	ori	r3,r3,1
   84b18:	10c00115 	stw	r3,4(r2)
   84b1c:	9009883a 	mov	r4,r18
   84b20:	0085b640 	call	85b64 <__malloc_unlock>
   84b24:	80800204 	addi	r2,r16,8
   84b28:	dfc00a17 	ldw	ra,40(sp)
   84b2c:	df000917 	ldw	fp,36(sp)
   84b30:	ddc00817 	ldw	r23,32(sp)
   84b34:	dd800717 	ldw	r22,28(sp)
   84b38:	dd400617 	ldw	r21,24(sp)
   84b3c:	dd000517 	ldw	r20,20(sp)
   84b40:	dcc00417 	ldw	r19,16(sp)
   84b44:	dc800317 	ldw	r18,12(sp)
   84b48:	dc400217 	ldw	r17,8(sp)
   84b4c:	dc000117 	ldw	r16,4(sp)
   84b50:	dec00b04 	addi	sp,sp,44
   84b54:	f800283a 	ret
   84b58:	04400404 	movi	r17,16
   84b5c:	89407536 	bltu	r17,r5,84d34 <_malloc_r+0x2c0>
   84b60:	0085b440 	call	85b44 <__malloc_lock>
   84b64:	003fd906 	br	84acc <rx_descriptor_end+0xfff84a6c>
   84b68:	8806d27a 	srli	r3,r17,9
   84b6c:	18007526 	beq	r3,zero,84d44 <_malloc_r+0x2d0>
   84b70:	00800104 	movi	r2,4
   84b74:	10c0ef36 	bltu	r2,r3,84f34 <_malloc_r+0x4c0>
   84b78:	8806d1ba 	srli	r3,r17,6
   84b7c:	19c00e04 	addi	r7,r3,56
   84b80:	39cb883a 	add	r5,r7,r7
   84b84:	04c00234 	movhi	r19,8
   84b88:	294b883a 	add	r5,r5,r5
   84b8c:	9cddb404 	addi	r19,r19,30416
   84b90:	294b883a 	add	r5,r5,r5
   84b94:	994b883a 	add	r5,r19,r5
   84b98:	2c000317 	ldw	r16,12(r5)
   84b9c:	2c000e26 	beq	r5,r16,84bd8 <_malloc_r+0x164>
   84ba0:	80800117 	ldw	r2,4(r16)
   84ba4:	01bfff04 	movi	r6,-4
   84ba8:	010003c4 	movi	r4,15
   84bac:	1184703a 	and	r2,r2,r6
   84bb0:	1447c83a 	sub	r3,r2,r17
   84bb4:	20c00716 	blt	r4,r3,84bd4 <_malloc_r+0x160>
   84bb8:	1800650e 	bge	r3,zero,84d50 <_malloc_r+0x2dc>
   84bbc:	84000317 	ldw	r16,12(r16)
   84bc0:	2c000526 	beq	r5,r16,84bd8 <_malloc_r+0x164>
   84bc4:	80800117 	ldw	r2,4(r16)
   84bc8:	1184703a 	and	r2,r2,r6
   84bcc:	1447c83a 	sub	r3,r2,r17
   84bd0:	20fff90e 	bge	r4,r3,84bb8 <rx_descriptor_end+0xfff84b58>
   84bd4:	39ffffc4 	addi	r7,r7,-1
   84bd8:	38c00044 	addi	r3,r7,1
   84bdc:	01800234 	movhi	r6,8
   84be0:	9c000417 	ldw	r16,16(r19)
   84be4:	319db404 	addi	r6,r6,30416
   84be8:	32400204 	addi	r9,r6,8
   84bec:	82410326 	beq	r16,r9,84ffc <_malloc_r+0x588>
   84bf0:	81000117 	ldw	r4,4(r16)
   84bf4:	00bfff04 	movi	r2,-4
   84bf8:	208e703a 	and	r7,r4,r2
   84bfc:	3c45c83a 	sub	r2,r7,r17
   84c00:	010003c4 	movi	r4,15
   84c04:	2080ee16 	blt	r4,r2,84fc0 <_malloc_r+0x54c>
   84c08:	32400515 	stw	r9,20(r6)
   84c0c:	32400415 	stw	r9,16(r6)
   84c10:	1000510e 	bge	r2,zero,84d58 <_malloc_r+0x2e4>
   84c14:	00807fc4 	movi	r2,511
   84c18:	11c0ce36 	bltu	r2,r7,84f54 <_malloc_r+0x4e0>
   84c1c:	3808d0fa 	srli	r4,r7,3
   84c20:	01c00044 	movi	r7,1
   84c24:	30800117 	ldw	r2,4(r6)
   84c28:	210b883a 	add	r5,r4,r4
   84c2c:	294b883a 	add	r5,r5,r5
   84c30:	2009d0ba 	srai	r4,r4,2
   84c34:	294b883a 	add	r5,r5,r5
   84c38:	298b883a 	add	r5,r5,r6
   84c3c:	2a000217 	ldw	r8,8(r5)
   84c40:	3908983a 	sll	r4,r7,r4
   84c44:	81400315 	stw	r5,12(r16)
   84c48:	82000215 	stw	r8,8(r16)
   84c4c:	2088b03a 	or	r4,r4,r2
   84c50:	2c000215 	stw	r16,8(r5)
   84c54:	31000115 	stw	r4,4(r6)
   84c58:	44000315 	stw	r16,12(r8)
   84c5c:	1805d0ba 	srai	r2,r3,2
   84c60:	01400044 	movi	r5,1
   84c64:	288a983a 	sll	r5,r5,r2
   84c68:	21404336 	bltu	r4,r5,84d78 <_malloc_r+0x304>
   84c6c:	2144703a 	and	r2,r4,r5
   84c70:	10000a1e 	bne	r2,zero,84c9c <_malloc_r+0x228>
   84c74:	00bfff04 	movi	r2,-4
   84c78:	294b883a 	add	r5,r5,r5
   84c7c:	1886703a 	and	r3,r3,r2
   84c80:	2144703a 	and	r2,r4,r5
   84c84:	18c00104 	addi	r3,r3,4
   84c88:	1000041e 	bne	r2,zero,84c9c <_malloc_r+0x228>
   84c8c:	294b883a 	add	r5,r5,r5
   84c90:	2144703a 	and	r2,r4,r5
   84c94:	18c00104 	addi	r3,r3,4
   84c98:	103ffc26 	beq	r2,zero,84c8c <rx_descriptor_end+0xfff84c2c>
   84c9c:	023fff04 	movi	r8,-4
   84ca0:	01c003c4 	movi	r7,15
   84ca4:	18c5883a 	add	r2,r3,r3
   84ca8:	1085883a 	add	r2,r2,r2
   84cac:	1085883a 	add	r2,r2,r2
   84cb0:	9895883a 	add	r10,r19,r2
   84cb4:	52c00304 	addi	r11,r10,12
   84cb8:	1819883a 	mov	r12,r3
   84cbc:	5c000017 	ldw	r16,0(r11)
   84cc0:	59bffd04 	addi	r6,r11,-12
   84cc4:	8180041e 	bne	r16,r6,84cd8 <_malloc_r+0x264>
   84cc8:	0000ce06 	br	85004 <_malloc_r+0x590>
   84ccc:	2000d70e 	bge	r4,zero,8502c <_malloc_r+0x5b8>
   84cd0:	84000317 	ldw	r16,12(r16)
   84cd4:	8180cb26 	beq	r16,r6,85004 <_malloc_r+0x590>
   84cd8:	80800117 	ldw	r2,4(r16)
   84cdc:	1204703a 	and	r2,r2,r8
   84ce0:	1449c83a 	sub	r4,r2,r17
   84ce4:	393ff90e 	bge	r7,r4,84ccc <rx_descriptor_end+0xfff84c6c>
   84ce8:	80800317 	ldw	r2,12(r16)
   84cec:	80c00217 	ldw	r3,8(r16)
   84cf0:	89400054 	ori	r5,r17,1
   84cf4:	81400115 	stw	r5,4(r16)
   84cf8:	18800315 	stw	r2,12(r3)
   84cfc:	10c00215 	stw	r3,8(r2)
   84d00:	8463883a 	add	r17,r16,r17
   84d04:	9c400515 	stw	r17,20(r19)
   84d08:	9c400415 	stw	r17,16(r19)
   84d0c:	20800054 	ori	r2,r4,1
   84d10:	88800115 	stw	r2,4(r17)
   84d14:	8a400315 	stw	r9,12(r17)
   84d18:	8a400215 	stw	r9,8(r17)
   84d1c:	8923883a 	add	r17,r17,r4
   84d20:	89000015 	stw	r4,0(r17)
   84d24:	9009883a 	mov	r4,r18
   84d28:	0085b640 	call	85b64 <__malloc_unlock>
   84d2c:	80800204 	addi	r2,r16,8
   84d30:	003f7d06 	br	84b28 <rx_descriptor_end+0xfff84ac8>
   84d34:	00800304 	movi	r2,12
   84d38:	90800015 	stw	r2,0(r18)
   84d3c:	0005883a 	mov	r2,zero
   84d40:	003f7906 	br	84b28 <rx_descriptor_end+0xfff84ac8>
   84d44:	01401f84 	movi	r5,126
   84d48:	01c00fc4 	movi	r7,63
   84d4c:	003f8d06 	br	84b84 <rx_descriptor_end+0xfff84b24>
   84d50:	81000317 	ldw	r4,12(r16)
   84d54:	003f6a06 	br	84b00 <rx_descriptor_end+0xfff84aa0>
   84d58:	81c5883a 	add	r2,r16,r7
   84d5c:	10c00117 	ldw	r3,4(r2)
   84d60:	9009883a 	mov	r4,r18
   84d64:	18c00054 	ori	r3,r3,1
   84d68:	10c00115 	stw	r3,4(r2)
   84d6c:	0085b640 	call	85b64 <__malloc_unlock>
   84d70:	80800204 	addi	r2,r16,8
   84d74:	003f6c06 	br	84b28 <rx_descriptor_end+0xfff84ac8>
   84d78:	9c000217 	ldw	r16,8(r19)
   84d7c:	00bfff04 	movi	r2,-4
   84d80:	85800117 	ldw	r22,4(r16)
   84d84:	b0ac703a 	and	r22,r22,r2
   84d88:	b4400336 	bltu	r22,r17,84d98 <_malloc_r+0x324>
   84d8c:	b445c83a 	sub	r2,r22,r17
   84d90:	00c003c4 	movi	r3,15
   84d94:	18805d16 	blt	r3,r2,84f0c <_malloc_r+0x498>
   84d98:	05c00234 	movhi	r23,8
   84d9c:	00800274 	movhi	r2,9
   84da0:	bddec304 	addi	r23,r23,31500
   84da4:	10a58904 	addi	r2,r2,-27100
   84da8:	15400017 	ldw	r21,0(r2)
   84dac:	b9000017 	ldw	r4,0(r23)
   84db0:	00ffffc4 	movi	r3,-1
   84db4:	858d883a 	add	r6,r16,r22
   84db8:	8d6b883a 	add	r21,r17,r21
   84dbc:	20c0e426 	beq	r4,r3,85150 <_malloc_r+0x6dc>
   84dc0:	ad4403c4 	addi	r21,r21,4111
   84dc4:	00fc0004 	movi	r3,-4096
   84dc8:	a8ea703a 	and	r21,r21,r3
   84dcc:	9009883a 	mov	r4,r18
   84dd0:	a80b883a 	mov	r5,r21
   84dd4:	d9800015 	stw	r6,0(sp)
   84dd8:	00853400 	call	85340 <_sbrk_r>
   84ddc:	00ffffc4 	movi	r3,-1
   84de0:	1029883a 	mov	r20,r2
   84de4:	d9800017 	ldw	r6,0(sp)
   84de8:	10c0a426 	beq	r2,r3,8507c <_malloc_r+0x608>
   84dec:	1180a236 	bltu	r2,r6,85078 <_malloc_r+0x604>
   84df0:	07000274 	movhi	fp,9
   84df4:	e7268a04 	addi	fp,fp,-26072
   84df8:	e0c00017 	ldw	r3,0(fp)
   84dfc:	a8c7883a 	add	r3,r21,r3
   84e00:	e0c00015 	stw	r3,0(fp)
   84e04:	3500da26 	beq	r6,r20,85170 <_malloc_r+0x6fc>
   84e08:	b9000017 	ldw	r4,0(r23)
   84e0c:	00bfffc4 	movi	r2,-1
   84e10:	2080e426 	beq	r4,r2,851a4 <_malloc_r+0x730>
   84e14:	a185c83a 	sub	r2,r20,r6
   84e18:	1885883a 	add	r2,r3,r2
   84e1c:	e0800015 	stw	r2,0(fp)
   84e20:	a0c001cc 	andi	r3,r20,7
   84e24:	1800b526 	beq	r3,zero,850fc <_malloc_r+0x688>
   84e28:	a0e9c83a 	sub	r20,r20,r3
   84e2c:	00840204 	movi	r2,4104
   84e30:	a5000204 	addi	r20,r20,8
   84e34:	10c7c83a 	sub	r3,r2,r3
   84e38:	a545883a 	add	r2,r20,r21
   84e3c:	1083ffcc 	andi	r2,r2,4095
   84e40:	18abc83a 	sub	r21,r3,r2
   84e44:	9009883a 	mov	r4,r18
   84e48:	a80b883a 	mov	r5,r21
   84e4c:	00853400 	call	85340 <_sbrk_r>
   84e50:	00ffffc4 	movi	r3,-1
   84e54:	10c0d026 	beq	r2,r3,85198 <_malloc_r+0x724>
   84e58:	1507c83a 	sub	r3,r2,r20
   84e5c:	a8c7883a 	add	r3,r21,r3
   84e60:	18c00054 	ori	r3,r3,1
   84e64:	e0800017 	ldw	r2,0(fp)
   84e68:	9d000215 	stw	r20,8(r19)
   84e6c:	a0c00115 	stw	r3,4(r20)
   84e70:	a887883a 	add	r3,r21,r2
   84e74:	e0c00015 	stw	r3,0(fp)
   84e78:	84c00e26 	beq	r16,r19,84eb4 <_malloc_r+0x440>
   84e7c:	018003c4 	movi	r6,15
   84e80:	3580a02e 	bgeu	r6,r22,85104 <_malloc_r+0x690>
   84e84:	81400117 	ldw	r5,4(r16)
   84e88:	013ffe04 	movi	r4,-8
   84e8c:	b0bffd04 	addi	r2,r22,-12
   84e90:	1104703a 	and	r2,r2,r4
   84e94:	2900004c 	andi	r4,r5,1
   84e98:	1108b03a 	or	r4,r2,r4
   84e9c:	81000115 	stw	r4,4(r16)
   84ea0:	01400144 	movi	r5,5
   84ea4:	8089883a 	add	r4,r16,r2
   84ea8:	21400115 	stw	r5,4(r4)
   84eac:	21400215 	stw	r5,8(r4)
   84eb0:	3080c036 	bltu	r6,r2,851b4 <_malloc_r+0x740>
   84eb4:	00800274 	movhi	r2,9
   84eb8:	10a58804 	addi	r2,r2,-27104
   84ebc:	11000017 	ldw	r4,0(r2)
   84ec0:	20c0012e 	bgeu	r4,r3,84ec8 <_malloc_r+0x454>
   84ec4:	10c00015 	stw	r3,0(r2)
   84ec8:	00800274 	movhi	r2,9
   84ecc:	10a58704 	addi	r2,r2,-27108
   84ed0:	11000017 	ldw	r4,0(r2)
   84ed4:	9c000217 	ldw	r16,8(r19)
   84ed8:	20c0012e 	bgeu	r4,r3,84ee0 <_malloc_r+0x46c>
   84edc:	10c00015 	stw	r3,0(r2)
   84ee0:	80c00117 	ldw	r3,4(r16)
   84ee4:	00bfff04 	movi	r2,-4
   84ee8:	1886703a 	and	r3,r3,r2
   84eec:	1c45c83a 	sub	r2,r3,r17
   84ef0:	1c400236 	bltu	r3,r17,84efc <_malloc_r+0x488>
   84ef4:	00c003c4 	movi	r3,15
   84ef8:	18800416 	blt	r3,r2,84f0c <_malloc_r+0x498>
   84efc:	9009883a 	mov	r4,r18
   84f00:	0085b640 	call	85b64 <__malloc_unlock>
   84f04:	0005883a 	mov	r2,zero
   84f08:	003f0706 	br	84b28 <rx_descriptor_end+0xfff84ac8>
   84f0c:	88c00054 	ori	r3,r17,1
   84f10:	80c00115 	stw	r3,4(r16)
   84f14:	8463883a 	add	r17,r16,r17
   84f18:	10800054 	ori	r2,r2,1
   84f1c:	9c400215 	stw	r17,8(r19)
   84f20:	88800115 	stw	r2,4(r17)
   84f24:	9009883a 	mov	r4,r18
   84f28:	0085b640 	call	85b64 <__malloc_unlock>
   84f2c:	80800204 	addi	r2,r16,8
   84f30:	003efd06 	br	84b28 <rx_descriptor_end+0xfff84ac8>
   84f34:	00800504 	movi	r2,20
   84f38:	10c0482e 	bgeu	r2,r3,8505c <_malloc_r+0x5e8>
   84f3c:	00801504 	movi	r2,84
   84f40:	10c06836 	bltu	r2,r3,850e4 <_malloc_r+0x670>
   84f44:	8806d33a 	srli	r3,r17,12
   84f48:	19c01b84 	addi	r7,r3,110
   84f4c:	39cb883a 	add	r5,r7,r7
   84f50:	003f0c06 	br	84b84 <rx_descriptor_end+0xfff84b24>
   84f54:	3804d27a 	srli	r2,r7,9
   84f58:	01000104 	movi	r4,4
   84f5c:	2080422e 	bgeu	r4,r2,85068 <_malloc_r+0x5f4>
   84f60:	01000504 	movi	r4,20
   84f64:	20807c36 	bltu	r4,r2,85158 <_malloc_r+0x6e4>
   84f68:	110016c4 	addi	r4,r2,91
   84f6c:	210b883a 	add	r5,r4,r4
   84f70:	294b883a 	add	r5,r5,r5
   84f74:	294b883a 	add	r5,r5,r5
   84f78:	994b883a 	add	r5,r19,r5
   84f7c:	28800217 	ldw	r2,8(r5)
   84f80:	02000234 	movhi	r8,8
   84f84:	421db404 	addi	r8,r8,30416
   84f88:	11406326 	beq	r2,r5,85118 <_malloc_r+0x6a4>
   84f8c:	01bfff04 	movi	r6,-4
   84f90:	11000117 	ldw	r4,4(r2)
   84f94:	2188703a 	and	r4,r4,r6
   84f98:	3900022e 	bgeu	r7,r4,84fa4 <_malloc_r+0x530>
   84f9c:	10800217 	ldw	r2,8(r2)
   84fa0:	28bffb1e 	bne	r5,r2,84f90 <rx_descriptor_end+0xfff84f30>
   84fa4:	11800317 	ldw	r6,12(r2)
   84fa8:	99000117 	ldw	r4,4(r19)
   84fac:	81800315 	stw	r6,12(r16)
   84fb0:	80800215 	stw	r2,8(r16)
   84fb4:	34000215 	stw	r16,8(r6)
   84fb8:	14000315 	stw	r16,12(r2)
   84fbc:	003f2706 	br	84c5c <rx_descriptor_end+0xfff84bfc>
   84fc0:	88c00054 	ori	r3,r17,1
   84fc4:	80c00115 	stw	r3,4(r16)
   84fc8:	8463883a 	add	r17,r16,r17
   84fcc:	34400515 	stw	r17,20(r6)
   84fd0:	34400415 	stw	r17,16(r6)
   84fd4:	10c00054 	ori	r3,r2,1
   84fd8:	8a400315 	stw	r9,12(r17)
   84fdc:	8a400215 	stw	r9,8(r17)
   84fe0:	88c00115 	stw	r3,4(r17)
   84fe4:	88a3883a 	add	r17,r17,r2
   84fe8:	88800015 	stw	r2,0(r17)
   84fec:	9009883a 	mov	r4,r18
   84ff0:	0085b640 	call	85b64 <__malloc_unlock>
   84ff4:	80800204 	addi	r2,r16,8
   84ff8:	003ecb06 	br	84b28 <rx_descriptor_end+0xfff84ac8>
   84ffc:	31000117 	ldw	r4,4(r6)
   85000:	003f1606 	br	84c5c <rx_descriptor_end+0xfff84bfc>
   85004:	63000044 	addi	r12,r12,1
   85008:	608000cc 	andi	r2,r12,3
   8500c:	5ac00204 	addi	r11,r11,8
   85010:	103f2a1e 	bne	r2,zero,84cbc <rx_descriptor_end+0xfff84c5c>
   85014:	00002106 	br	8509c <_malloc_r+0x628>
   85018:	80800204 	addi	r2,r16,8
   8501c:	84000517 	ldw	r16,20(r16)
   85020:	143eb31e 	bne	r2,r16,84af0 <rx_descriptor_end+0xfff84a90>
   85024:	18c00084 	addi	r3,r3,2
   85028:	003eec06 	br	84bdc <rx_descriptor_end+0xfff84b7c>
   8502c:	8085883a 	add	r2,r16,r2
   85030:	10c00117 	ldw	r3,4(r2)
   85034:	81000317 	ldw	r4,12(r16)
   85038:	81400217 	ldw	r5,8(r16)
   8503c:	18c00054 	ori	r3,r3,1
   85040:	10c00115 	stw	r3,4(r2)
   85044:	29000315 	stw	r4,12(r5)
   85048:	21400215 	stw	r5,8(r4)
   8504c:	9009883a 	mov	r4,r18
   85050:	0085b640 	call	85b64 <__malloc_unlock>
   85054:	80800204 	addi	r2,r16,8
   85058:	003eb306 	br	84b28 <rx_descriptor_end+0xfff84ac8>
   8505c:	19c016c4 	addi	r7,r3,91
   85060:	39cb883a 	add	r5,r7,r7
   85064:	003ec706 	br	84b84 <rx_descriptor_end+0xfff84b24>
   85068:	3804d1ba 	srli	r2,r7,6
   8506c:	11000e04 	addi	r4,r2,56
   85070:	210b883a 	add	r5,r4,r4
   85074:	003fbe06 	br	84f70 <rx_descriptor_end+0xfff84f10>
   85078:	84ff5d26 	beq	r16,r19,84df0 <rx_descriptor_end+0xfff84d90>
   8507c:	9c000217 	ldw	r16,8(r19)
   85080:	00bfff04 	movi	r2,-4
   85084:	80c00117 	ldw	r3,4(r16)
   85088:	1886703a 	and	r3,r3,r2
   8508c:	003f9706 	br	84eec <rx_descriptor_end+0xfff84e8c>
   85090:	52800017 	ldw	r10,0(r10)
   85094:	18ffffc4 	addi	r3,r3,-1
   85098:	50805c1e 	bne	r10,r2,8520c <_malloc_r+0x798>
   8509c:	190000cc 	andi	r4,r3,3
   850a0:	50bffe04 	addi	r2,r10,-8
   850a4:	203ffa1e 	bne	r4,zero,85090 <rx_descriptor_end+0xfff85030>
   850a8:	98800117 	ldw	r2,4(r19)
   850ac:	0146303a 	nor	r3,zero,r5
   850b0:	1884703a 	and	r2,r3,r2
   850b4:	98800115 	stw	r2,4(r19)
   850b8:	294b883a 	add	r5,r5,r5
   850bc:	117f2e36 	bltu	r2,r5,84d78 <rx_descriptor_end+0xfff84d18>
   850c0:	283f2d26 	beq	r5,zero,84d78 <rx_descriptor_end+0xfff84d18>
   850c4:	1146703a 	and	r3,r2,r5
   850c8:	1800521e 	bne	r3,zero,85214 <_malloc_r+0x7a0>
   850cc:	6007883a 	mov	r3,r12
   850d0:	294b883a 	add	r5,r5,r5
   850d4:	1148703a 	and	r4,r2,r5
   850d8:	18c00104 	addi	r3,r3,4
   850dc:	203ffc26 	beq	r4,zero,850d0 <rx_descriptor_end+0xfff85070>
   850e0:	003ef006 	br	84ca4 <rx_descriptor_end+0xfff84c44>
   850e4:	00805504 	movi	r2,340
   850e8:	10c01336 	bltu	r2,r3,85138 <_malloc_r+0x6c4>
   850ec:	8806d3fa 	srli	r3,r17,15
   850f0:	19c01dc4 	addi	r7,r3,119
   850f4:	39cb883a 	add	r5,r7,r7
   850f8:	003ea206 	br	84b84 <rx_descriptor_end+0xfff84b24>
   850fc:	00c40004 	movi	r3,4096
   85100:	003f4d06 	br	84e38 <rx_descriptor_end+0xfff84dd8>
   85104:	00800044 	movi	r2,1
   85108:	a0800115 	stw	r2,4(r20)
   8510c:	a021883a 	mov	r16,r20
   85110:	0007883a 	mov	r3,zero
   85114:	003f7506 	br	84eec <rx_descriptor_end+0xfff84e8c>
   85118:	200bd0ba 	srai	r5,r4,2
   8511c:	01800044 	movi	r6,1
   85120:	41000117 	ldw	r4,4(r8)
   85124:	314a983a 	sll	r5,r6,r5
   85128:	100d883a 	mov	r6,r2
   8512c:	2908b03a 	or	r4,r5,r4
   85130:	41000115 	stw	r4,4(r8)
   85134:	003f9d06 	br	84fac <rx_descriptor_end+0xfff84f4c>
   85138:	00815504 	movi	r2,1364
   8513c:	10c01336 	bltu	r2,r3,8518c <_malloc_r+0x718>
   85140:	8806d4ba 	srli	r3,r17,18
   85144:	19c01f04 	addi	r7,r3,124
   85148:	39cb883a 	add	r5,r7,r7
   8514c:	003e8d06 	br	84b84 <rx_descriptor_end+0xfff84b24>
   85150:	ad400404 	addi	r21,r21,16
   85154:	003f1d06 	br	84dcc <rx_descriptor_end+0xfff84d6c>
   85158:	01001504 	movi	r4,84
   8515c:	20801c36 	bltu	r4,r2,851d0 <_malloc_r+0x75c>
   85160:	3804d33a 	srli	r2,r7,12
   85164:	11001b84 	addi	r4,r2,110
   85168:	210b883a 	add	r5,r4,r4
   8516c:	003f8006 	br	84f70 <rx_descriptor_end+0xfff84f10>
   85170:	3083ffcc 	andi	r2,r6,4095
   85174:	103f241e 	bne	r2,zero,84e08 <rx_descriptor_end+0xfff84da8>
   85178:	99000217 	ldw	r4,8(r19)
   8517c:	ad85883a 	add	r2,r21,r22
   85180:	10800054 	ori	r2,r2,1
   85184:	20800115 	stw	r2,4(r4)
   85188:	003f4a06 	br	84eb4 <rx_descriptor_end+0xfff84e54>
   8518c:	01403f04 	movi	r5,252
   85190:	01c01f84 	movi	r7,126
   85194:	003e7b06 	br	84b84 <rx_descriptor_end+0xfff84b24>
   85198:	00c00044 	movi	r3,1
   8519c:	002b883a 	mov	r21,zero
   851a0:	003f3006 	br	84e64 <rx_descriptor_end+0xfff84e04>
   851a4:	00800234 	movhi	r2,8
   851a8:	109ec304 	addi	r2,r2,31500
   851ac:	15000015 	stw	r20,0(r2)
   851b0:	003f1b06 	br	84e20 <rx_descriptor_end+0xfff84dc0>
   851b4:	9009883a 	mov	r4,r18
   851b8:	81400204 	addi	r5,r16,8
   851bc:	008445c0 	call	8445c <_free_r>
   851c0:	00800274 	movhi	r2,9
   851c4:	10a68a04 	addi	r2,r2,-26072
   851c8:	10c00017 	ldw	r3,0(r2)
   851cc:	003f3906 	br	84eb4 <rx_descriptor_end+0xfff84e54>
   851d0:	01005504 	movi	r4,340
   851d4:	20800436 	bltu	r4,r2,851e8 <_malloc_r+0x774>
   851d8:	3804d3fa 	srli	r2,r7,15
   851dc:	11001dc4 	addi	r4,r2,119
   851e0:	210b883a 	add	r5,r4,r4
   851e4:	003f6206 	br	84f70 <rx_descriptor_end+0xfff84f10>
   851e8:	01015504 	movi	r4,1364
   851ec:	20800436 	bltu	r4,r2,85200 <_malloc_r+0x78c>
   851f0:	3804d4ba 	srli	r2,r7,18
   851f4:	11001f04 	addi	r4,r2,124
   851f8:	210b883a 	add	r5,r4,r4
   851fc:	003f5c06 	br	84f70 <rx_descriptor_end+0xfff84f10>
   85200:	01403f04 	movi	r5,252
   85204:	01001f84 	movi	r4,126
   85208:	003f5906 	br	84f70 <rx_descriptor_end+0xfff84f10>
   8520c:	98800117 	ldw	r2,4(r19)
   85210:	003fa906 	br	850b8 <rx_descriptor_end+0xfff85058>
   85214:	6007883a 	mov	r3,r12
   85218:	003ea206 	br	84ca4 <rx_descriptor_end+0xfff84c44>

0008521c <memset>:
   8521c:	20c000cc 	andi	r3,r4,3
   85220:	2005883a 	mov	r2,r4
   85224:	18004326 	beq	r3,zero,85334 <memset+0x118>
   85228:	31ffffc4 	addi	r7,r6,-1
   8522c:	30004026 	beq	r6,zero,85330 <memset+0x114>
   85230:	2813883a 	mov	r9,r5
   85234:	200d883a 	mov	r6,r4
   85238:	2007883a 	mov	r3,r4
   8523c:	00000406 	br	85250 <memset+0x34>
   85240:	3a3fffc4 	addi	r8,r7,-1
   85244:	31800044 	addi	r6,r6,1
   85248:	38003926 	beq	r7,zero,85330 <memset+0x114>
   8524c:	400f883a 	mov	r7,r8
   85250:	18c00044 	addi	r3,r3,1
   85254:	32400005 	stb	r9,0(r6)
   85258:	1a0000cc 	andi	r8,r3,3
   8525c:	403ff81e 	bne	r8,zero,85240 <rx_descriptor_end+0xfff851e0>
   85260:	010000c4 	movi	r4,3
   85264:	21c02d2e 	bgeu	r4,r7,8531c <memset+0x100>
   85268:	29803fcc 	andi	r6,r5,255
   8526c:	3008923a 	slli	r4,r6,8
   85270:	218cb03a 	or	r6,r4,r6
   85274:	3008943a 	slli	r4,r6,16
   85278:	218cb03a 	or	r6,r4,r6
   8527c:	010003c4 	movi	r4,15
   85280:	21c0182e 	bgeu	r4,r7,852e4 <memset+0xc8>
   85284:	3b3ffc04 	addi	r12,r7,-16
   85288:	6018d13a 	srli	r12,r12,4
   8528c:	1a000104 	addi	r8,r3,4
   85290:	1ac00204 	addi	r11,r3,8
   85294:	6008913a 	slli	r4,r12,4
   85298:	1a800304 	addi	r10,r3,12
   8529c:	1813883a 	mov	r9,r3
   852a0:	21000504 	addi	r4,r4,20
   852a4:	1909883a 	add	r4,r3,r4
   852a8:	49800015 	stw	r6,0(r9)
   852ac:	41800015 	stw	r6,0(r8)
   852b0:	59800015 	stw	r6,0(r11)
   852b4:	51800015 	stw	r6,0(r10)
   852b8:	42000404 	addi	r8,r8,16
   852bc:	4a400404 	addi	r9,r9,16
   852c0:	5ac00404 	addi	r11,r11,16
   852c4:	52800404 	addi	r10,r10,16
   852c8:	413ff71e 	bne	r8,r4,852a8 <rx_descriptor_end+0xfff85248>
   852cc:	63000044 	addi	r12,r12,1
   852d0:	6018913a 	slli	r12,r12,4
   852d4:	39c003cc 	andi	r7,r7,15
   852d8:	010000c4 	movi	r4,3
   852dc:	1b07883a 	add	r3,r3,r12
   852e0:	21c00e2e 	bgeu	r4,r7,8531c <memset+0x100>
   852e4:	1813883a 	mov	r9,r3
   852e8:	3811883a 	mov	r8,r7
   852ec:	010000c4 	movi	r4,3
   852f0:	49800015 	stw	r6,0(r9)
   852f4:	423fff04 	addi	r8,r8,-4
   852f8:	4a400104 	addi	r9,r9,4
   852fc:	223ffc36 	bltu	r4,r8,852f0 <rx_descriptor_end+0xfff85290>
   85300:	393fff04 	addi	r4,r7,-4
   85304:	2008d0ba 	srli	r4,r4,2
   85308:	39c000cc 	andi	r7,r7,3
   8530c:	21000044 	addi	r4,r4,1
   85310:	2109883a 	add	r4,r4,r4
   85314:	2109883a 	add	r4,r4,r4
   85318:	1907883a 	add	r3,r3,r4
   8531c:	38000426 	beq	r7,zero,85330 <memset+0x114>
   85320:	19cf883a 	add	r7,r3,r7
   85324:	19400005 	stb	r5,0(r3)
   85328:	18c00044 	addi	r3,r3,1
   8532c:	19fffd1e 	bne	r3,r7,85324 <rx_descriptor_end+0xfff852c4>
   85330:	f800283a 	ret
   85334:	2007883a 	mov	r3,r4
   85338:	300f883a 	mov	r7,r6
   8533c:	003fc806 	br	85260 <rx_descriptor_end+0xfff85200>

00085340 <_sbrk_r>:
   85340:	defffd04 	addi	sp,sp,-12
   85344:	dc000015 	stw	r16,0(sp)
   85348:	04000274 	movhi	r16,9
   8534c:	dc400115 	stw	r17,4(sp)
   85350:	84258604 	addi	r16,r16,-27112
   85354:	2023883a 	mov	r17,r4
   85358:	2809883a 	mov	r4,r5
   8535c:	dfc00215 	stw	ra,8(sp)
   85360:	80000015 	stw	zero,0(r16)
   85364:	0085cd00 	call	85cd0 <sbrk>
   85368:	00ffffc4 	movi	r3,-1
   8536c:	10c00526 	beq	r2,r3,85384 <_sbrk_r+0x44>
   85370:	dfc00217 	ldw	ra,8(sp)
   85374:	dc400117 	ldw	r17,4(sp)
   85378:	dc000017 	ldw	r16,0(sp)
   8537c:	dec00304 	addi	sp,sp,12
   85380:	f800283a 	ret
   85384:	80c00017 	ldw	r3,0(r16)
   85388:	183ff926 	beq	r3,zero,85370 <rx_descriptor_end+0xfff85310>
   8538c:	88c00015 	stw	r3,0(r17)
   85390:	003ff706 	br	85370 <rx_descriptor_end+0xfff85310>

00085394 <__sread>:
   85394:	defffe04 	addi	sp,sp,-8
   85398:	dc000015 	stw	r16,0(sp)
   8539c:	2821883a 	mov	r16,r5
   853a0:	2940038f 	ldh	r5,14(r5)
   853a4:	dfc00115 	stw	ra,4(sp)
   853a8:	008579c0 	call	8579c <_read_r>
   853ac:	10000716 	blt	r2,zero,853cc <__sread+0x38>
   853b0:	80c01417 	ldw	r3,80(r16)
   853b4:	1887883a 	add	r3,r3,r2
   853b8:	80c01415 	stw	r3,80(r16)
   853bc:	dfc00117 	ldw	ra,4(sp)
   853c0:	dc000017 	ldw	r16,0(sp)
   853c4:	dec00204 	addi	sp,sp,8
   853c8:	f800283a 	ret
   853cc:	80c0030b 	ldhu	r3,12(r16)
   853d0:	18fbffcc 	andi	r3,r3,61439
   853d4:	80c0030d 	sth	r3,12(r16)
   853d8:	dfc00117 	ldw	ra,4(sp)
   853dc:	dc000017 	ldw	r16,0(sp)
   853e0:	dec00204 	addi	sp,sp,8
   853e4:	f800283a 	ret

000853e8 <__seofread>:
   853e8:	0005883a 	mov	r2,zero
   853ec:	f800283a 	ret

000853f0 <__swrite>:
   853f0:	2880030b 	ldhu	r2,12(r5)
   853f4:	defffb04 	addi	sp,sp,-20
   853f8:	dcc00315 	stw	r19,12(sp)
   853fc:	dc800215 	stw	r18,8(sp)
   85400:	dc400115 	stw	r17,4(sp)
   85404:	dc000015 	stw	r16,0(sp)
   85408:	dfc00415 	stw	ra,16(sp)
   8540c:	10c0400c 	andi	r3,r2,256
   85410:	2821883a 	mov	r16,r5
   85414:	2027883a 	mov	r19,r4
   85418:	3025883a 	mov	r18,r6
   8541c:	3823883a 	mov	r17,r7
   85420:	18000526 	beq	r3,zero,85438 <__swrite+0x48>
   85424:	2940038f 	ldh	r5,14(r5)
   85428:	000d883a 	mov	r6,zero
   8542c:	01c00084 	movi	r7,2
   85430:	00857400 	call	85740 <_lseek_r>
   85434:	8080030b 	ldhu	r2,12(r16)
   85438:	8140038f 	ldh	r5,14(r16)
   8543c:	10bbffcc 	andi	r2,r2,61439
   85440:	9809883a 	mov	r4,r19
   85444:	900d883a 	mov	r6,r18
   85448:	880f883a 	mov	r7,r17
   8544c:	8080030d 	sth	r2,12(r16)
   85450:	dfc00417 	ldw	ra,16(sp)
   85454:	dcc00317 	ldw	r19,12(sp)
   85458:	dc800217 	ldw	r18,8(sp)
   8545c:	dc400117 	ldw	r17,4(sp)
   85460:	dc000017 	ldw	r16,0(sp)
   85464:	dec00504 	addi	sp,sp,20
   85468:	00854d01 	jmpi	854d0 <_write_r>

0008546c <__sseek>:
   8546c:	defffe04 	addi	sp,sp,-8
   85470:	dc000015 	stw	r16,0(sp)
   85474:	2821883a 	mov	r16,r5
   85478:	2940038f 	ldh	r5,14(r5)
   8547c:	dfc00115 	stw	ra,4(sp)
   85480:	00857400 	call	85740 <_lseek_r>
   85484:	00ffffc4 	movi	r3,-1
   85488:	10c00826 	beq	r2,r3,854ac <__sseek+0x40>
   8548c:	80c0030b 	ldhu	r3,12(r16)
   85490:	80801415 	stw	r2,80(r16)
   85494:	18c40014 	ori	r3,r3,4096
   85498:	80c0030d 	sth	r3,12(r16)
   8549c:	dfc00117 	ldw	ra,4(sp)
   854a0:	dc000017 	ldw	r16,0(sp)
   854a4:	dec00204 	addi	sp,sp,8
   854a8:	f800283a 	ret
   854ac:	80c0030b 	ldhu	r3,12(r16)
   854b0:	18fbffcc 	andi	r3,r3,61439
   854b4:	80c0030d 	sth	r3,12(r16)
   854b8:	dfc00117 	ldw	ra,4(sp)
   854bc:	dc000017 	ldw	r16,0(sp)
   854c0:	dec00204 	addi	sp,sp,8
   854c4:	f800283a 	ret

000854c8 <__sclose>:
   854c8:	2940038f 	ldh	r5,14(r5)
   854cc:	008552c1 	jmpi	8552c <_close_r>

000854d0 <_write_r>:
   854d0:	defffd04 	addi	sp,sp,-12
   854d4:	dc000015 	stw	r16,0(sp)
   854d8:	04000274 	movhi	r16,9
   854dc:	dc400115 	stw	r17,4(sp)
   854e0:	84258604 	addi	r16,r16,-27112
   854e4:	2023883a 	mov	r17,r4
   854e8:	2809883a 	mov	r4,r5
   854ec:	300b883a 	mov	r5,r6
   854f0:	380d883a 	mov	r6,r7
   854f4:	dfc00215 	stw	ra,8(sp)
   854f8:	80000015 	stw	zero,0(r16)
   854fc:	0085dd00 	call	85dd0 <write>
   85500:	00ffffc4 	movi	r3,-1
   85504:	10c00526 	beq	r2,r3,8551c <_write_r+0x4c>
   85508:	dfc00217 	ldw	ra,8(sp)
   8550c:	dc400117 	ldw	r17,4(sp)
   85510:	dc000017 	ldw	r16,0(sp)
   85514:	dec00304 	addi	sp,sp,12
   85518:	f800283a 	ret
   8551c:	80c00017 	ldw	r3,0(r16)
   85520:	183ff926 	beq	r3,zero,85508 <rx_descriptor_end+0xfff854a8>
   85524:	88c00015 	stw	r3,0(r17)
   85528:	003ff706 	br	85508 <rx_descriptor_end+0xfff854a8>

0008552c <_close_r>:
   8552c:	defffd04 	addi	sp,sp,-12
   85530:	dc000015 	stw	r16,0(sp)
   85534:	04000274 	movhi	r16,9
   85538:	dc400115 	stw	r17,4(sp)
   8553c:	84258604 	addi	r16,r16,-27112
   85540:	2023883a 	mov	r17,r4
   85544:	2809883a 	mov	r4,r5
   85548:	dfc00215 	stw	ra,8(sp)
   8554c:	80000015 	stw	zero,0(r16)
   85550:	00824500 	call	82450 <close>
   85554:	00ffffc4 	movi	r3,-1
   85558:	10c00526 	beq	r2,r3,85570 <_close_r+0x44>
   8555c:	dfc00217 	ldw	ra,8(sp)
   85560:	dc400117 	ldw	r17,4(sp)
   85564:	dc000017 	ldw	r16,0(sp)
   85568:	dec00304 	addi	sp,sp,12
   8556c:	f800283a 	ret
   85570:	80c00017 	ldw	r3,0(r16)
   85574:	183ff926 	beq	r3,zero,8555c <rx_descriptor_end+0xfff854fc>
   85578:	88c00015 	stw	r3,0(r17)
   8557c:	003ff706 	br	8555c <rx_descriptor_end+0xfff854fc>

00085580 <_fclose_r>:
   85580:	28003226 	beq	r5,zero,8564c <_fclose_r+0xcc>
   85584:	defffc04 	addi	sp,sp,-16
   85588:	dc400115 	stw	r17,4(sp)
   8558c:	2023883a 	mov	r17,r4
   85590:	dc000015 	stw	r16,0(sp)
   85594:	dfc00315 	stw	ra,12(sp)
   85598:	dc800215 	stw	r18,8(sp)
   8559c:	2821883a 	mov	r16,r5
   855a0:	00842f80 	call	842f8 <__sfp_lock_acquire>
   855a4:	88000226 	beq	r17,zero,855b0 <_fclose_r+0x30>
   855a8:	88800e17 	ldw	r2,56(r17)
   855ac:	10002926 	beq	r2,zero,85654 <_fclose_r+0xd4>
   855b0:	8080030f 	ldh	r2,12(r16)
   855b4:	10002226 	beq	r2,zero,85640 <_fclose_r+0xc0>
   855b8:	8809883a 	mov	r4,r17
   855bc:	800b883a 	mov	r5,r16
   855c0:	0083d400 	call	83d40 <_fflush_r>
   855c4:	1025883a 	mov	r18,r2
   855c8:	80800b17 	ldw	r2,44(r16)
   855cc:	10000426 	beq	r2,zero,855e0 <_fclose_r+0x60>
   855d0:	81400717 	ldw	r5,28(r16)
   855d4:	8809883a 	mov	r4,r17
   855d8:	103ee83a 	callr	r2
   855dc:	10002616 	blt	r2,zero,85678 <_fclose_r+0xf8>
   855e0:	8080030b 	ldhu	r2,12(r16)
   855e4:	1080200c 	andi	r2,r2,128
   855e8:	10001f1e 	bne	r2,zero,85668 <_fclose_r+0xe8>
   855ec:	81400c17 	ldw	r5,48(r16)
   855f0:	28000526 	beq	r5,zero,85608 <_fclose_r+0x88>
   855f4:	80801004 	addi	r2,r16,64
   855f8:	28800226 	beq	r5,r2,85604 <_fclose_r+0x84>
   855fc:	8809883a 	mov	r4,r17
   85600:	008445c0 	call	8445c <_free_r>
   85604:	80000c15 	stw	zero,48(r16)
   85608:	81401117 	ldw	r5,68(r16)
   8560c:	28000326 	beq	r5,zero,8561c <_fclose_r+0x9c>
   85610:	8809883a 	mov	r4,r17
   85614:	008445c0 	call	8445c <_free_r>
   85618:	80001115 	stw	zero,68(r16)
   8561c:	8000030d 	sth	zero,12(r16)
   85620:	00842fc0 	call	842fc <__sfp_lock_release>
   85624:	9005883a 	mov	r2,r18
   85628:	dfc00317 	ldw	ra,12(sp)
   8562c:	dc800217 	ldw	r18,8(sp)
   85630:	dc400117 	ldw	r17,4(sp)
   85634:	dc000017 	ldw	r16,0(sp)
   85638:	dec00404 	addi	sp,sp,16
   8563c:	f800283a 	ret
   85640:	00842fc0 	call	842fc <__sfp_lock_release>
   85644:	0005883a 	mov	r2,zero
   85648:	003ff706 	br	85628 <rx_descriptor_end+0xfff855c8>
   8564c:	0005883a 	mov	r2,zero
   85650:	f800283a 	ret
   85654:	8809883a 	mov	r4,r17
   85658:	00842e80 	call	842e8 <__sinit>
   8565c:	8080030f 	ldh	r2,12(r16)
   85660:	103fd51e 	bne	r2,zero,855b8 <rx_descriptor_end+0xfff85558>
   85664:	003ff606 	br	85640 <rx_descriptor_end+0xfff855e0>
   85668:	81400417 	ldw	r5,16(r16)
   8566c:	8809883a 	mov	r4,r17
   85670:	008445c0 	call	8445c <_free_r>
   85674:	003fdd06 	br	855ec <rx_descriptor_end+0xfff8558c>
   85678:	04bfffc4 	movi	r18,-1
   8567c:	003fd806 	br	855e0 <rx_descriptor_end+0xfff85580>

00085680 <fclose>:
   85680:	00800234 	movhi	r2,8
   85684:	109ec204 	addi	r2,r2,31496
   85688:	200b883a 	mov	r5,r4
   8568c:	11000017 	ldw	r4,0(r2)
   85690:	00855801 	jmpi	85580 <_fclose_r>

00085694 <_fstat_r>:
   85694:	defffd04 	addi	sp,sp,-12
   85698:	dc000015 	stw	r16,0(sp)
   8569c:	04000274 	movhi	r16,9
   856a0:	dc400115 	stw	r17,4(sp)
   856a4:	84258604 	addi	r16,r16,-27112
   856a8:	2023883a 	mov	r17,r4
   856ac:	2809883a 	mov	r4,r5
   856b0:	300b883a 	mov	r5,r6
   856b4:	dfc00215 	stw	ra,8(sp)
   856b8:	80000015 	stw	zero,0(r16)
   856bc:	008587c0 	call	8587c <fstat>
   856c0:	00ffffc4 	movi	r3,-1
   856c4:	10c00526 	beq	r2,r3,856dc <_fstat_r+0x48>
   856c8:	dfc00217 	ldw	ra,8(sp)
   856cc:	dc400117 	ldw	r17,4(sp)
   856d0:	dc000017 	ldw	r16,0(sp)
   856d4:	dec00304 	addi	sp,sp,12
   856d8:	f800283a 	ret
   856dc:	80c00017 	ldw	r3,0(r16)
   856e0:	183ff926 	beq	r3,zero,856c8 <rx_descriptor_end+0xfff85668>
   856e4:	88c00015 	stw	r3,0(r17)
   856e8:	003ff706 	br	856c8 <rx_descriptor_end+0xfff85668>

000856ec <_isatty_r>:
   856ec:	defffd04 	addi	sp,sp,-12
   856f0:	dc000015 	stw	r16,0(sp)
   856f4:	04000274 	movhi	r16,9
   856f8:	dc400115 	stw	r17,4(sp)
   856fc:	84258604 	addi	r16,r16,-27112
   85700:	2023883a 	mov	r17,r4
   85704:	2809883a 	mov	r4,r5
   85708:	dfc00215 	stw	ra,8(sp)
   8570c:	80000015 	stw	zero,0(r16)
   85710:	008597c0 	call	8597c <isatty>
   85714:	00ffffc4 	movi	r3,-1
   85718:	10c00526 	beq	r2,r3,85730 <_isatty_r+0x44>
   8571c:	dfc00217 	ldw	ra,8(sp)
   85720:	dc400117 	ldw	r17,4(sp)
   85724:	dc000017 	ldw	r16,0(sp)
   85728:	dec00304 	addi	sp,sp,12
   8572c:	f800283a 	ret
   85730:	80c00017 	ldw	r3,0(r16)
   85734:	183ff926 	beq	r3,zero,8571c <rx_descriptor_end+0xfff856bc>
   85738:	88c00015 	stw	r3,0(r17)
   8573c:	003ff706 	br	8571c <rx_descriptor_end+0xfff856bc>

00085740 <_lseek_r>:
   85740:	defffd04 	addi	sp,sp,-12
   85744:	dc000015 	stw	r16,0(sp)
   85748:	04000274 	movhi	r16,9
   8574c:	dc400115 	stw	r17,4(sp)
   85750:	84258604 	addi	r16,r16,-27112
   85754:	2023883a 	mov	r17,r4
   85758:	2809883a 	mov	r4,r5
   8575c:	300b883a 	mov	r5,r6
   85760:	380d883a 	mov	r6,r7
   85764:	dfc00215 	stw	ra,8(sp)
   85768:	80000015 	stw	zero,0(r16)
   8576c:	0085a700 	call	85a70 <lseek>
   85770:	00ffffc4 	movi	r3,-1
   85774:	10c00526 	beq	r2,r3,8578c <_lseek_r+0x4c>
   85778:	dfc00217 	ldw	ra,8(sp)
   8577c:	dc400117 	ldw	r17,4(sp)
   85780:	dc000017 	ldw	r16,0(sp)
   85784:	dec00304 	addi	sp,sp,12
   85788:	f800283a 	ret
   8578c:	80c00017 	ldw	r3,0(r16)
   85790:	183ff926 	beq	r3,zero,85778 <rx_descriptor_end+0xfff85718>
   85794:	88c00015 	stw	r3,0(r17)
   85798:	003ff706 	br	85778 <rx_descriptor_end+0xfff85718>

0008579c <_read_r>:
   8579c:	defffd04 	addi	sp,sp,-12
   857a0:	dc000015 	stw	r16,0(sp)
   857a4:	04000274 	movhi	r16,9
   857a8:	dc400115 	stw	r17,4(sp)
   857ac:	84258604 	addi	r16,r16,-27112
   857b0:	2023883a 	mov	r17,r4
   857b4:	2809883a 	mov	r4,r5
   857b8:	300b883a 	mov	r5,r6
   857bc:	380d883a 	mov	r6,r7
   857c0:	dfc00215 	stw	ra,8(sp)
   857c4:	80000015 	stw	zero,0(r16)
   857c8:	0085bd40 	call	85bd4 <read>
   857cc:	00ffffc4 	movi	r3,-1
   857d0:	10c00526 	beq	r2,r3,857e8 <_read_r+0x4c>
   857d4:	dfc00217 	ldw	ra,8(sp)
   857d8:	dc400117 	ldw	r17,4(sp)
   857dc:	dc000017 	ldw	r16,0(sp)
   857e0:	dec00304 	addi	sp,sp,12
   857e4:	f800283a 	ret
   857e8:	80c00017 	ldw	r3,0(r16)
   857ec:	183ff926 	beq	r3,zero,857d4 <rx_descriptor_end+0xfff85774>
   857f0:	88c00015 	stw	r3,0(r17)
   857f4:	003ff706 	br	857d4 <rx_descriptor_end+0xfff85774>

000857f8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   857f8:	defffd04 	addi	sp,sp,-12
   857fc:	df000215 	stw	fp,8(sp)
   85800:	df000204 	addi	fp,sp,8
   85804:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   85808:	0001883a 	nop
   8580c:	e0bfff17 	ldw	r2,-4(fp)
   85810:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   85814:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   85818:	10000226 	beq	r2,zero,85824 <_exit+0x2c>
    ALT_SIM_FAIL();
   8581c:	002af070 	cmpltui	zero,zero,43969
   85820:	00000106 	br	85828 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   85824:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   85828:	003fff06 	br	85828 <rx_descriptor_end+0xfff857c8>

0008582c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8582c:	defffe04 	addi	sp,sp,-8
   85830:	dfc00115 	stw	ra,4(sp)
   85834:	df000015 	stw	fp,0(sp)
   85838:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8583c:	00800234 	movhi	r2,8
   85840:	109ebd04 	addi	r2,r2,31476
   85844:	10800017 	ldw	r2,0(r2)
   85848:	10000526 	beq	r2,zero,85860 <alt_get_errno+0x34>
   8584c:	00800234 	movhi	r2,8
   85850:	109ebd04 	addi	r2,r2,31476
   85854:	10800017 	ldw	r2,0(r2)
   85858:	103ee83a 	callr	r2
   8585c:	00000206 	br	85868 <alt_get_errno+0x3c>
   85860:	00800274 	movhi	r2,9
   85864:	10a58604 	addi	r2,r2,-27112
}
   85868:	e037883a 	mov	sp,fp
   8586c:	dfc00117 	ldw	ra,4(sp)
   85870:	df000017 	ldw	fp,0(sp)
   85874:	dec00204 	addi	sp,sp,8
   85878:	f800283a 	ret

0008587c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   8587c:	defffb04 	addi	sp,sp,-20
   85880:	dfc00415 	stw	ra,16(sp)
   85884:	df000315 	stw	fp,12(sp)
   85888:	df000304 	addi	fp,sp,12
   8588c:	e13ffe15 	stw	r4,-8(fp)
   85890:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   85894:	e0bffe17 	ldw	r2,-8(fp)
   85898:	10000616 	blt	r2,zero,858b4 <fstat+0x38>
   8589c:	e0bffe17 	ldw	r2,-8(fp)
   858a0:	10c00324 	muli	r3,r2,12
   858a4:	00800234 	movhi	r2,8
   858a8:	109c4b04 	addi	r2,r2,28972
   858ac:	1885883a 	add	r2,r3,r2
   858b0:	00000106 	br	858b8 <fstat+0x3c>
   858b4:	0005883a 	mov	r2,zero
   858b8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   858bc:	e0bffd17 	ldw	r2,-12(fp)
   858c0:	10001026 	beq	r2,zero,85904 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   858c4:	e0bffd17 	ldw	r2,-12(fp)
   858c8:	10800017 	ldw	r2,0(r2)
   858cc:	10800817 	ldw	r2,32(r2)
   858d0:	10000726 	beq	r2,zero,858f0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   858d4:	e0bffd17 	ldw	r2,-12(fp)
   858d8:	10800017 	ldw	r2,0(r2)
   858dc:	10800817 	ldw	r2,32(r2)
   858e0:	e13ffd17 	ldw	r4,-12(fp)
   858e4:	e17fff17 	ldw	r5,-4(fp)
   858e8:	103ee83a 	callr	r2
   858ec:	00000a06 	br	85918 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   858f0:	e0bfff17 	ldw	r2,-4(fp)
   858f4:	00c80004 	movi	r3,8192
   858f8:	10c00115 	stw	r3,4(r2)
      return 0;
   858fc:	0005883a 	mov	r2,zero
   85900:	00000506 	br	85918 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   85904:	008582c0 	call	8582c <alt_get_errno>
   85908:	1007883a 	mov	r3,r2
   8590c:	00801444 	movi	r2,81
   85910:	18800015 	stw	r2,0(r3)
    return -1;
   85914:	00bfffc4 	movi	r2,-1
  }
}
   85918:	e037883a 	mov	sp,fp
   8591c:	dfc00117 	ldw	ra,4(sp)
   85920:	df000017 	ldw	fp,0(sp)
   85924:	dec00204 	addi	sp,sp,8
   85928:	f800283a 	ret

0008592c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   8592c:	defffe04 	addi	sp,sp,-8
   85930:	dfc00115 	stw	ra,4(sp)
   85934:	df000015 	stw	fp,0(sp)
   85938:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   8593c:	00800234 	movhi	r2,8
   85940:	109ebd04 	addi	r2,r2,31476
   85944:	10800017 	ldw	r2,0(r2)
   85948:	10000526 	beq	r2,zero,85960 <alt_get_errno+0x34>
   8594c:	00800234 	movhi	r2,8
   85950:	109ebd04 	addi	r2,r2,31476
   85954:	10800017 	ldw	r2,0(r2)
   85958:	103ee83a 	callr	r2
   8595c:	00000206 	br	85968 <alt_get_errno+0x3c>
   85960:	00800274 	movhi	r2,9
   85964:	10a58604 	addi	r2,r2,-27112
}
   85968:	e037883a 	mov	sp,fp
   8596c:	dfc00117 	ldw	ra,4(sp)
   85970:	df000017 	ldw	fp,0(sp)
   85974:	dec00204 	addi	sp,sp,8
   85978:	f800283a 	ret

0008597c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   8597c:	deffed04 	addi	sp,sp,-76
   85980:	dfc01215 	stw	ra,72(sp)
   85984:	df001115 	stw	fp,68(sp)
   85988:	df001104 	addi	fp,sp,68
   8598c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   85990:	e0bfff17 	ldw	r2,-4(fp)
   85994:	10000616 	blt	r2,zero,859b0 <isatty+0x34>
   85998:	e0bfff17 	ldw	r2,-4(fp)
   8599c:	10c00324 	muli	r3,r2,12
   859a0:	00800234 	movhi	r2,8
   859a4:	109c4b04 	addi	r2,r2,28972
   859a8:	1885883a 	add	r2,r3,r2
   859ac:	00000106 	br	859b4 <isatty+0x38>
   859b0:	0005883a 	mov	r2,zero
   859b4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   859b8:	e0bfef17 	ldw	r2,-68(fp)
   859bc:	10000e26 	beq	r2,zero,859f8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   859c0:	e0bfef17 	ldw	r2,-68(fp)
   859c4:	10800017 	ldw	r2,0(r2)
   859c8:	10800817 	ldw	r2,32(r2)
   859cc:	1000021e 	bne	r2,zero,859d8 <isatty+0x5c>
    {
      return 1;
   859d0:	00800044 	movi	r2,1
   859d4:	00000d06 	br	85a0c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   859d8:	e0bff004 	addi	r2,fp,-64
   859dc:	e13fff17 	ldw	r4,-4(fp)
   859e0:	100b883a 	mov	r5,r2
   859e4:	008587c0 	call	8587c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   859e8:	e0bff117 	ldw	r2,-60(fp)
   859ec:	10880020 	cmpeqi	r2,r2,8192
   859f0:	10803fcc 	andi	r2,r2,255
   859f4:	00000506 	br	85a0c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   859f8:	008592c0 	call	8592c <alt_get_errno>
   859fc:	1007883a 	mov	r3,r2
   85a00:	00801444 	movi	r2,81
   85a04:	18800015 	stw	r2,0(r3)
    return 0;
   85a08:	0005883a 	mov	r2,zero
  }
}
   85a0c:	e037883a 	mov	sp,fp
   85a10:	dfc00117 	ldw	ra,4(sp)
   85a14:	df000017 	ldw	fp,0(sp)
   85a18:	dec00204 	addi	sp,sp,8
   85a1c:	f800283a 	ret

00085a20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   85a20:	defffe04 	addi	sp,sp,-8
   85a24:	dfc00115 	stw	ra,4(sp)
   85a28:	df000015 	stw	fp,0(sp)
   85a2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   85a30:	00800234 	movhi	r2,8
   85a34:	109ebd04 	addi	r2,r2,31476
   85a38:	10800017 	ldw	r2,0(r2)
   85a3c:	10000526 	beq	r2,zero,85a54 <alt_get_errno+0x34>
   85a40:	00800234 	movhi	r2,8
   85a44:	109ebd04 	addi	r2,r2,31476
   85a48:	10800017 	ldw	r2,0(r2)
   85a4c:	103ee83a 	callr	r2
   85a50:	00000206 	br	85a5c <alt_get_errno+0x3c>
   85a54:	00800274 	movhi	r2,9
   85a58:	10a58604 	addi	r2,r2,-27112
}
   85a5c:	e037883a 	mov	sp,fp
   85a60:	dfc00117 	ldw	ra,4(sp)
   85a64:	df000017 	ldw	fp,0(sp)
   85a68:	dec00204 	addi	sp,sp,8
   85a6c:	f800283a 	ret

00085a70 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   85a70:	defff904 	addi	sp,sp,-28
   85a74:	dfc00615 	stw	ra,24(sp)
   85a78:	df000515 	stw	fp,20(sp)
   85a7c:	df000504 	addi	fp,sp,20
   85a80:	e13ffd15 	stw	r4,-12(fp)
   85a84:	e17ffe15 	stw	r5,-8(fp)
   85a88:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   85a8c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   85a90:	e0bffd17 	ldw	r2,-12(fp)
   85a94:	10000616 	blt	r2,zero,85ab0 <lseek+0x40>
   85a98:	e0bffd17 	ldw	r2,-12(fp)
   85a9c:	10c00324 	muli	r3,r2,12
   85aa0:	00800234 	movhi	r2,8
   85aa4:	109c4b04 	addi	r2,r2,28972
   85aa8:	1885883a 	add	r2,r3,r2
   85aac:	00000106 	br	85ab4 <lseek+0x44>
   85ab0:	0005883a 	mov	r2,zero
   85ab4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   85ab8:	e0bffc17 	ldw	r2,-16(fp)
   85abc:	10001026 	beq	r2,zero,85b00 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   85ac0:	e0bffc17 	ldw	r2,-16(fp)
   85ac4:	10800017 	ldw	r2,0(r2)
   85ac8:	10800717 	ldw	r2,28(r2)
   85acc:	10000926 	beq	r2,zero,85af4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   85ad0:	e0bffc17 	ldw	r2,-16(fp)
   85ad4:	10800017 	ldw	r2,0(r2)
   85ad8:	10800717 	ldw	r2,28(r2)
   85adc:	e13ffc17 	ldw	r4,-16(fp)
   85ae0:	e17ffe17 	ldw	r5,-8(fp)
   85ae4:	e1bfff17 	ldw	r6,-4(fp)
   85ae8:	103ee83a 	callr	r2
   85aec:	e0bffb15 	stw	r2,-20(fp)
   85af0:	00000506 	br	85b08 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   85af4:	00bfde84 	movi	r2,-134
   85af8:	e0bffb15 	stw	r2,-20(fp)
   85afc:	00000206 	br	85b08 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   85b00:	00bfebc4 	movi	r2,-81
   85b04:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   85b08:	e0bffb17 	ldw	r2,-20(fp)
   85b0c:	1000070e 	bge	r2,zero,85b2c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   85b10:	0085a200 	call	85a20 <alt_get_errno>
   85b14:	1007883a 	mov	r3,r2
   85b18:	e0bffb17 	ldw	r2,-20(fp)
   85b1c:	0085c83a 	sub	r2,zero,r2
   85b20:	18800015 	stw	r2,0(r3)
    rc = -1;
   85b24:	00bfffc4 	movi	r2,-1
   85b28:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   85b2c:	e0bffb17 	ldw	r2,-20(fp)
}
   85b30:	e037883a 	mov	sp,fp
   85b34:	dfc00117 	ldw	ra,4(sp)
   85b38:	df000017 	ldw	fp,0(sp)
   85b3c:	dec00204 	addi	sp,sp,8
   85b40:	f800283a 	ret

00085b44 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   85b44:	defffe04 	addi	sp,sp,-8
   85b48:	df000115 	stw	fp,4(sp)
   85b4c:	df000104 	addi	fp,sp,4
   85b50:	e13fff15 	stw	r4,-4(fp)
}
   85b54:	e037883a 	mov	sp,fp
   85b58:	df000017 	ldw	fp,0(sp)
   85b5c:	dec00104 	addi	sp,sp,4
   85b60:	f800283a 	ret

00085b64 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   85b64:	defffe04 	addi	sp,sp,-8
   85b68:	df000115 	stw	fp,4(sp)
   85b6c:	df000104 	addi	fp,sp,4
   85b70:	e13fff15 	stw	r4,-4(fp)
}
   85b74:	e037883a 	mov	sp,fp
   85b78:	df000017 	ldw	fp,0(sp)
   85b7c:	dec00104 	addi	sp,sp,4
   85b80:	f800283a 	ret

00085b84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   85b84:	defffe04 	addi	sp,sp,-8
   85b88:	dfc00115 	stw	ra,4(sp)
   85b8c:	df000015 	stw	fp,0(sp)
   85b90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   85b94:	00800234 	movhi	r2,8
   85b98:	109ebd04 	addi	r2,r2,31476
   85b9c:	10800017 	ldw	r2,0(r2)
   85ba0:	10000526 	beq	r2,zero,85bb8 <alt_get_errno+0x34>
   85ba4:	00800234 	movhi	r2,8
   85ba8:	109ebd04 	addi	r2,r2,31476
   85bac:	10800017 	ldw	r2,0(r2)
   85bb0:	103ee83a 	callr	r2
   85bb4:	00000206 	br	85bc0 <alt_get_errno+0x3c>
   85bb8:	00800274 	movhi	r2,9
   85bbc:	10a58604 	addi	r2,r2,-27112
}
   85bc0:	e037883a 	mov	sp,fp
   85bc4:	dfc00117 	ldw	ra,4(sp)
   85bc8:	df000017 	ldw	fp,0(sp)
   85bcc:	dec00204 	addi	sp,sp,8
   85bd0:	f800283a 	ret

00085bd4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   85bd4:	defff904 	addi	sp,sp,-28
   85bd8:	dfc00615 	stw	ra,24(sp)
   85bdc:	df000515 	stw	fp,20(sp)
   85be0:	df000504 	addi	fp,sp,20
   85be4:	e13ffd15 	stw	r4,-12(fp)
   85be8:	e17ffe15 	stw	r5,-8(fp)
   85bec:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   85bf0:	e0bffd17 	ldw	r2,-12(fp)
   85bf4:	10000616 	blt	r2,zero,85c10 <read+0x3c>
   85bf8:	e0bffd17 	ldw	r2,-12(fp)
   85bfc:	10c00324 	muli	r3,r2,12
   85c00:	00800234 	movhi	r2,8
   85c04:	109c4b04 	addi	r2,r2,28972
   85c08:	1885883a 	add	r2,r3,r2
   85c0c:	00000106 	br	85c14 <read+0x40>
   85c10:	0005883a 	mov	r2,zero
   85c14:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   85c18:	e0bffb17 	ldw	r2,-20(fp)
   85c1c:	10002226 	beq	r2,zero,85ca8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   85c20:	e0bffb17 	ldw	r2,-20(fp)
   85c24:	10800217 	ldw	r2,8(r2)
   85c28:	108000cc 	andi	r2,r2,3
   85c2c:	10800060 	cmpeqi	r2,r2,1
   85c30:	1000181e 	bne	r2,zero,85c94 <read+0xc0>
        (fd->dev->read))
   85c34:	e0bffb17 	ldw	r2,-20(fp)
   85c38:	10800017 	ldw	r2,0(r2)
   85c3c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   85c40:	10001426 	beq	r2,zero,85c94 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   85c44:	e0bffb17 	ldw	r2,-20(fp)
   85c48:	10800017 	ldw	r2,0(r2)
   85c4c:	10800517 	ldw	r2,20(r2)
   85c50:	e0ffff17 	ldw	r3,-4(fp)
   85c54:	e13ffb17 	ldw	r4,-20(fp)
   85c58:	e17ffe17 	ldw	r5,-8(fp)
   85c5c:	180d883a 	mov	r6,r3
   85c60:	103ee83a 	callr	r2
   85c64:	e0bffc15 	stw	r2,-16(fp)
   85c68:	e0bffc17 	ldw	r2,-16(fp)
   85c6c:	1000070e 	bge	r2,zero,85c8c <read+0xb8>
        {
          ALT_ERRNO = -rval;
   85c70:	0085b840 	call	85b84 <alt_get_errno>
   85c74:	1007883a 	mov	r3,r2
   85c78:	e0bffc17 	ldw	r2,-16(fp)
   85c7c:	0085c83a 	sub	r2,zero,r2
   85c80:	18800015 	stw	r2,0(r3)
          return -1;
   85c84:	00bfffc4 	movi	r2,-1
   85c88:	00000c06 	br	85cbc <read+0xe8>
        }
        return rval;
   85c8c:	e0bffc17 	ldw	r2,-16(fp)
   85c90:	00000a06 	br	85cbc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   85c94:	0085b840 	call	85b84 <alt_get_errno>
   85c98:	1007883a 	mov	r3,r2
   85c9c:	00800344 	movi	r2,13
   85ca0:	18800015 	stw	r2,0(r3)
   85ca4:	00000406 	br	85cb8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   85ca8:	0085b840 	call	85b84 <alt_get_errno>
   85cac:	1007883a 	mov	r3,r2
   85cb0:	00801444 	movi	r2,81
   85cb4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   85cb8:	00bfffc4 	movi	r2,-1
}
   85cbc:	e037883a 	mov	sp,fp
   85cc0:	dfc00117 	ldw	ra,4(sp)
   85cc4:	df000017 	ldw	fp,0(sp)
   85cc8:	dec00204 	addi	sp,sp,8
   85ccc:	f800283a 	ret

00085cd0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   85cd0:	defff904 	addi	sp,sp,-28
   85cd4:	df000615 	stw	fp,24(sp)
   85cd8:	df000604 	addi	fp,sp,24
   85cdc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   85ce0:	0005303a 	rdctl	r2,status
   85ce4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   85ce8:	e0fffc17 	ldw	r3,-16(fp)
   85cec:	00bfff84 	movi	r2,-2
   85cf0:	1884703a 	and	r2,r3,r2
   85cf4:	1001703a 	wrctl	status,r2
  
  return context;
   85cf8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   85cfc:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   85d00:	d0a00f17 	ldw	r2,-32708(gp)
   85d04:	10c000c4 	addi	r3,r2,3
   85d08:	00bfff04 	movi	r2,-4
   85d0c:	1884703a 	and	r2,r3,r2
   85d10:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   85d14:	d0e00f17 	ldw	r3,-32708(gp)
   85d18:	e0bfff17 	ldw	r2,-4(fp)
   85d1c:	1887883a 	add	r3,r3,r2
   85d20:	00800374 	movhi	r2,13
   85d24:	10ac0004 	addi	r2,r2,-20480
   85d28:	10c0062e 	bgeu	r2,r3,85d44 <sbrk+0x74>
   85d2c:	e0bffa17 	ldw	r2,-24(fp)
   85d30:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   85d34:	e0bffd17 	ldw	r2,-12(fp)
   85d38:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   85d3c:	00bfffc4 	movi	r2,-1
   85d40:	00000b06 	br	85d70 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   85d44:	d0a00f17 	ldw	r2,-32708(gp)
   85d48:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   85d4c:	d0e00f17 	ldw	r3,-32708(gp)
   85d50:	e0bfff17 	ldw	r2,-4(fp)
   85d54:	1885883a 	add	r2,r3,r2
   85d58:	d0a00f15 	stw	r2,-32708(gp)
   85d5c:	e0bffa17 	ldw	r2,-24(fp)
   85d60:	e0bffe15 	stw	r2,-8(fp)
   85d64:	e0bffe17 	ldw	r2,-8(fp)
   85d68:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   85d6c:	e0bffb17 	ldw	r2,-20(fp)
} 
   85d70:	e037883a 	mov	sp,fp
   85d74:	df000017 	ldw	fp,0(sp)
   85d78:	dec00104 	addi	sp,sp,4
   85d7c:	f800283a 	ret

00085d80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   85d80:	defffe04 	addi	sp,sp,-8
   85d84:	dfc00115 	stw	ra,4(sp)
   85d88:	df000015 	stw	fp,0(sp)
   85d8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   85d90:	00800234 	movhi	r2,8
   85d94:	109ebd04 	addi	r2,r2,31476
   85d98:	10800017 	ldw	r2,0(r2)
   85d9c:	10000526 	beq	r2,zero,85db4 <alt_get_errno+0x34>
   85da0:	00800234 	movhi	r2,8
   85da4:	109ebd04 	addi	r2,r2,31476
   85da8:	10800017 	ldw	r2,0(r2)
   85dac:	103ee83a 	callr	r2
   85db0:	00000206 	br	85dbc <alt_get_errno+0x3c>
   85db4:	00800274 	movhi	r2,9
   85db8:	10a58604 	addi	r2,r2,-27112
}
   85dbc:	e037883a 	mov	sp,fp
   85dc0:	dfc00117 	ldw	ra,4(sp)
   85dc4:	df000017 	ldw	fp,0(sp)
   85dc8:	dec00204 	addi	sp,sp,8
   85dcc:	f800283a 	ret

00085dd0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   85dd0:	defff904 	addi	sp,sp,-28
   85dd4:	dfc00615 	stw	ra,24(sp)
   85dd8:	df000515 	stw	fp,20(sp)
   85ddc:	df000504 	addi	fp,sp,20
   85de0:	e13ffd15 	stw	r4,-12(fp)
   85de4:	e17ffe15 	stw	r5,-8(fp)
   85de8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   85dec:	e0bffd17 	ldw	r2,-12(fp)
   85df0:	10000616 	blt	r2,zero,85e0c <write+0x3c>
   85df4:	e0bffd17 	ldw	r2,-12(fp)
   85df8:	10c00324 	muli	r3,r2,12
   85dfc:	00800234 	movhi	r2,8
   85e00:	109c4b04 	addi	r2,r2,28972
   85e04:	1885883a 	add	r2,r3,r2
   85e08:	00000106 	br	85e10 <write+0x40>
   85e0c:	0005883a 	mov	r2,zero
   85e10:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   85e14:	e0bffb17 	ldw	r2,-20(fp)
   85e18:	10002126 	beq	r2,zero,85ea0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   85e1c:	e0bffb17 	ldw	r2,-20(fp)
   85e20:	10800217 	ldw	r2,8(r2)
   85e24:	108000cc 	andi	r2,r2,3
   85e28:	10001826 	beq	r2,zero,85e8c <write+0xbc>
   85e2c:	e0bffb17 	ldw	r2,-20(fp)
   85e30:	10800017 	ldw	r2,0(r2)
   85e34:	10800617 	ldw	r2,24(r2)
   85e38:	10001426 	beq	r2,zero,85e8c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   85e3c:	e0bffb17 	ldw	r2,-20(fp)
   85e40:	10800017 	ldw	r2,0(r2)
   85e44:	10800617 	ldw	r2,24(r2)
   85e48:	e0ffff17 	ldw	r3,-4(fp)
   85e4c:	e13ffb17 	ldw	r4,-20(fp)
   85e50:	e17ffe17 	ldw	r5,-8(fp)
   85e54:	180d883a 	mov	r6,r3
   85e58:	103ee83a 	callr	r2
   85e5c:	e0bffc15 	stw	r2,-16(fp)
   85e60:	e0bffc17 	ldw	r2,-16(fp)
   85e64:	1000070e 	bge	r2,zero,85e84 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   85e68:	0085d800 	call	85d80 <alt_get_errno>
   85e6c:	1007883a 	mov	r3,r2
   85e70:	e0bffc17 	ldw	r2,-16(fp)
   85e74:	0085c83a 	sub	r2,zero,r2
   85e78:	18800015 	stw	r2,0(r3)
        return -1;
   85e7c:	00bfffc4 	movi	r2,-1
   85e80:	00000c06 	br	85eb4 <write+0xe4>
      }
      return rval;
   85e84:	e0bffc17 	ldw	r2,-16(fp)
   85e88:	00000a06 	br	85eb4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   85e8c:	0085d800 	call	85d80 <alt_get_errno>
   85e90:	1007883a 	mov	r3,r2
   85e94:	00800344 	movi	r2,13
   85e98:	18800015 	stw	r2,0(r3)
   85e9c:	00000406 	br	85eb0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   85ea0:	0085d800 	call	85d80 <alt_get_errno>
   85ea4:	1007883a 	mov	r3,r2
   85ea8:	00801444 	movi	r2,81
   85eac:	18800015 	stw	r2,0(r3)
  }
  return -1;
   85eb0:	00bfffc4 	movi	r2,-1
}
   85eb4:	e037883a 	mov	sp,fp
   85eb8:	dfc00117 	ldw	ra,4(sp)
   85ebc:	df000017 	ldw	fp,0(sp)
   85ec0:	dec00204 	addi	sp,sp,8
   85ec4:	f800283a 	ret
