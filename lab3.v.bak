module top_level(  // module and port declaration: fill the gaps
	// Clock

	
	// KEY (reset)
	input   KEY,
	
	//LED

	 
	//Switch
	
	
	// Ethernet : the signals used are: the RGMII transmit clock, the MDC reference, the MDIO, the hardware reset, the RGMII receive clock, the receive data, the receive data valid, the transmit data and the transmit enable (check the manual)
	output        ,
	output       ,
	inout         ENET_MDIO,
	output       ,
	input         ,
	input  [3: 0] ,
	input         ,
	output [3: 0] ,
	output        
);

	wire sys_clk, clk_125, clk_25, clk_2p5, tx_clk;
	wire core_reset_n;
	wire mdc, mdio_in, mdio_oen, mdio_out;
	wire eth_mode, ena_10;


	// Assign MDIO and MDC signals
	
	assign mdio_in   = ENET_MDIO;
	assign ENET_MDC  = mdc;
	assign ENET_MDIO = mdio_oen ? 1'bz : mdio_out;
	
	//Assign reset
	
	assign ENET_RST_N = core_reset_n;
	
	//PLL instances
	
	my_pll pll_inst(
		.areset	(),
		.inclk0	(),
		.c0		(),
		.c1		(),
		.c2		(),
		.c3		(),
		.locked	()
	); 
	
	pll_clocks_PHY pll_inst(
		.areset	(),
		.inclk0	(),
		.c0		(),
		.c1		(),
		.c2		(),
	); 
	
	// Transmission Clock in FPGA (TSE IP core)
	
	assign tx_clk = ?  :       // GbE Mode   = 125MHz clock
	                ena_10?  :       // 10Mb Mode  = 2.5MHz clock
	                          ;         // 100Mb Mode = 25 MHz clock
	                          
	// Clock for transmission in PHY chip
	
	assign ENET_GTX_CLK= ?  :       // GbE Mode   = 125MHz clock
	                ena_10?  :       // 10Mb Mode  = 2.5MHz clock
	                          ;         // 100Mb Mode = 25 MHz clock

	// Nios II system instance
	
    nios_system system_inst (
        .clk_clk (),                                            					//  system clock (input)
        .reset_reset_n  (),                      				      			//  system reset (input)
	.led_export (),										// led (output)
	.sw0_export (),										// swicht button (input)
        .tse_pcs_mac_tx_clock_connection_clk 	(tx_clk), 			//  transmit clock (input)
        .tse_pcs_mac_rx_clock_connection_clk 	(),		 		//  receive clock (input)
        .tse_mac_mdio_connection_mdc               (mdc),             		//  mdc (output)
        .tse_mac_mdio_connection_mdio_in         (mdio_in),           	//  mdio_in (input)
        .tse_mac_mdio_connection_mdio_out       (mdio_out),          	//  mdio_out (output)
        .tse_mac_mdio_connection_mdio_oen      (mdio_oen),     	     	//  mdio_oen (output)
        .tse_mac_rgmii_connection_rgmii_in         (),      			//  rgmii_in (rx data, input)
        .tse_mac_rgmii_connection_rgmii_out       (),	     			//  gmii_out (tx data, output)
        .tse_mac_rgmii_connection_rx_control      (),      			//  rx_control (receive data valid, input)
        .tse_mac_rgmii_connection_tx_control      (),      			//  tx_control (tx enable, output)
        .tse_mac_status_connection_eth_mode    (),	                         //  eth_mode (output)
        .tse_mac_status_connection_ena_10        (),          	                //   ena_10	  (output)
    );	
    
    

endmodule 